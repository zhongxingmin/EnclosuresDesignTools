/////////////////////////////////////////////////////////////////////////////// 
// Copyright (C) 2003-2011, Open Design Alliance (the "Alliance"). 
// All rights reserved. 
// 
// This software and its documentation and related materials are owned by 
// the Alliance. The software may only be incorporated into application 
// programs owned by members of the Alliance, subject to a signed 
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable  
// trade secrets of the Alliance and its suppliers. The software is also 
// protected by copyright law and international treaty provisions. Application  
// programs incorporating this software must include the following statement 
// with their copyright notices:
//   
//   This application incorporates Teigha(R) software pursuant to a license 
//   agreement with Open Design Alliance.
//   Teigha(R) for .dwg files Copyright (C) 2003-2011 by Open Design Alliance. 
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you 
// acknowledge and accept the above terms.
//
//
// *DWG is the native and proprietary file format for AutoCAD(R) and a trademark  
// of Autodesk, Inc.  Open Design Alliance is not associated with Autodesk.
///////////////////////////////////////////////////////////////////////////////

#ifndef OD_GETORUS_H
#define OD_GETORUS_H /* {Secret} */

#include "../Ge/GeGbl.h"
#include "../Ge/GeSurface.h"
#include "../Ge/GeInterval.h"
#include "../Ge/GeVector3d.h"
#include "../Ge/GeCircArc3d.h"
#include "../OdPlatform.h"

#include "../TD_PackPush.h"

/**
    Description:
    This class represents toroidal segments.

    Remarks:
    The torus is surface generated by revolving a circular *arc*
    about an axis of symmetry, where the *plane* of the circular *arc* 
    contains the axis of symmetry

    The torus is located in space by its *center*, which is a *point* on the axis of symmetry.  

    The *center* of the *circular* *arc* is at a distance of majorRadius from
    the *center* of the torus. The *radius* of the *circular* *arc* is the
    minorRadius.

    Parameter U is the longitude (about the axis of symmetry), which for a closed torus defaults
    to the range [-OdaPI, OdaPI).  Zero corresponds to the refAxis (which is
    a vector orthogonal to the axis of symmetry).  Applying the right
    hand rule along the symmetric axis defines the increasing direction
    for U.

    Parameter v parameterizes the circular tube, which
    for a closed circle defaults to the range [-OdaPI, OdaPI).  Applying the
    right hand rule along the refAxis X-axisOfSymmetry defines the
    increasing direction for v.

    The torus is *periodic* in U, v with a period of Oda2PI.
    [umin, umax] x [vmin, vmax] defines a four sided toroidal patch bounded
    by four circular arcs. Following constraints apply to the definition
    of a toroidal patch.

    o umin < umax and |umin - umax| <= Oda2PI.
    o vmin < vmax and |vmin - vmax| <= Oda2PI

    Library: TD_Ge

   {group:OdGe_Classes} 
*/
class GE_TOOLKIT_EXPORT OdGeTorus : public OdGeSurface
{
public:


  /* Arguments:
    majorRadius (I) The major *radius* of this *torus*.
    minorRadius (I) The minor *radius* of this *torus*.
    center (I) The origin of the this *torus*.
    axisOfSymmetry (I) Axis of symmetry (rotation).
    refAxis (I) defines thegle 0 about the axis of symmetry.
    startAngleU (I) Start angle about the axis of symmetry.
    endAngleU (I) End angle about the axis of symmetry.
    startAngleV (I) Start angle about the tube.
    endAngleV (I) End angle about the tube.
    source (I) Object to be cloned.
  */
  OdGeTorus();
  OdGeTorus(
    double majorRadius, 
    double minorRadius,
    const OdGePoint3d& center, 
    const OdGeVector3d& axisOfSymmetry);
  OdGeTorus(
    double majorRadius, 
    double minorRadius,
    const OdGePoint3d& center, 
    const OdGeVector3d& axisOfSymmetry,
    const OdGeVector3d& refAxis,
    double startAngleU, 
    double endAngleU,
    double startAngleV, 
    double endAngleV);
  OdGeTorus(
    const OdGeTorus& source);

  // Geometric properties.
  //

  /**
    Description:
    Returns the major *radius* of this *torus*.
  */
   double majorRadius() const;

  /**
    Description:
    Returns the minor *radius* of this *torus*.
  */
   double minorRadius() const;

  /**
    Description:
    Returns the start and end angles about about the axis of symmetry.

    Arguments:
    startAngleU (O) Receives the angle about the axis of symmetry.
    endAngleU (O) Receives the end angle about the axis of symmetry.
  */
   void getAnglesInU(
    double& startAngleU, 
    double& endAngleU) const;

  /**
    Description:
    Returns the start and end angles about about the tube.

    Arguments:
    startAngleV (O) Receives the start angle about the tube.
    endAngleV (O) Receives the end angle about the tube.
  */
   void getAnglesInV(
    double& startAngleV, 
    double& endAngleV) const;

  /**
    Description:
    Returns the *center* of this *torus*.
  */
   OdGePoint3d center() const;

  /**
    Description:
    Returns the Axis of symmetry (rotation).
  */
   OdGeVector3d axisOfSymmetry() const;

  /**
    Description:
    Returns the reference axis.
  */
   OdGeVector3d refAxis() const;

  /**
    Description:
    Returns true if and only if the *normal* to this surface
    is pointing outward.
  */
  OdBool isOuterNormal () const;

  /**
    Description:
    Sets the major *radius* of this *torus*.

    Arguments:
    majorRadius (I) The major *radius* of this *torus*.
  */
   OdGeTorus& setMajorRadius(
    double radius);

  /**
    Description:
    Sets the minor *radius* of this *torus*.

    Arguments:
    minorRadius (I) The minor *radius* of this *torus*.
  */
   OdGeTorus& setMinorRadius(
    double radius);

  /**
    Description:
    Sets the start and end angles about about the axis of symmetry.

    Arguments:
    startAngleU (I) Start angle about the axis of symmetry.
    endAngleU (I) End angle about the axis of symmetry.
  */
   OdGeTorus& setAnglesInU(
    double startAngleU, 
    double endAngleU);

  /**
    Description:
    Sets the start and end angles about about the tube.

    Arguments:
    startAngleV (I) Start angle about the tube.
    endAngleV (I) End angle about the tube.
  */
   OdGeTorus& setAnglesInV(
    double startAngleV, 
    double endAngleV);

  /**
    Description:
    Sets the parameters for this torus according to the arguments. 

    Arguments:
    majorRadius (I) The major *radius* of this *torus*.
    minorRadius (I) The minor *radius* of this *torus*.
    center (I) The origin of the this *torus*.
    axisOfSymmetry (I) Axis of symmetry (rotation).
    refAxis (I) defines thegle 0 about the axis of symmetry.
    startAngleU (I) Start angle about the axis of symmetry.
    endAngleU (I) End angle about the axis of symmetry.
    startAngleV (I) Start angle about the tube.
    endAngleV (I) End angle about the tube.
    Remarks:
    Returns *a* reference to this torus.
  */
   OdGeTorus& set(
    double majorRadius, 
    double minorRadius,
    const OdGePoint3d& center,
    const OdGeVector3d& axisOfSymmetry);
   OdGeTorus& set(
    double majorRadius, 
    double minorRadius,
    const OdGePoint3d&  center,
    const OdGeVector3d& axisOfSymmetry,
    const OdGeVector3d& refAxis,
    double startAngleU, 
    double endAngleU,
    double startAngleV, 
    double endAngleV);

  OdGeTorus& operator =(
    const OdGeTorus& torus);

  /**
    Description:
    Returns True if the torus intersects with the specified
    line entity, and returns the number of intersections and the
    points of intersection.

    Arguments:
    lineEnt (I) Any 3D line entity.
    numInt (O) Receives the number of intersections.
    p1 (O) Receives the first intersection point.
    p2 (O) Receives the second intersection point.
    p3 (O) Receives the third intersection point.
    p4 (O) Receives the fourth intersection point.
    tol (I) Geometric tolerance.

    Remarks:
    o p1 is valid if and only if numInt > 0.
    o p2 is valid if and only if numInt > 1.
    o p3 is valid if and only if numInt > 2.
    o p4 is valid if and only if numInt > 3.
  */
  OdBool intersectWith (
    const OdGeLinearEnt3d& linEnt, 
    int& numInt,
    OdGePoint3d& p1, 
    OdGePoint3d& p2,
    OdGePoint3d& p3, 
    OdGePoint3d& p4,
    const OdGeTol& tol = OdGeContext::gTol) const;

  // Shape Classification Functions

  /**
    Description:
    Returns true if and only if (majorRadius < 0) and (|majorRadius| < minorRadius), producing
    a solid with points along the axis of symmetry.

    Remarks:
    Exactly one of the following functions will be true for a given torus:

    o isApple() 
    o isDoughnut() 
    o isLemon() 
    o isVortex()
  */
   OdBool isLemon() const;

  /**
    Description:
    Returns true if and only if (0 < majorRadius < minorRadius), creating a solid with dimples at the
    axis of symmetry.

    Remarks:
    Exactly one of the following functions will be true for a given torus:

    o isApple() 
    o isDoughnut() 
    o isLemon() 
    o isVortex()
  */
   OdBool isApple() const;

  /**
    Description:
    Returns true if and only if (minorRadius == majorRadius), producing a donut.
    with a zero-radius hole.

    Remarks:
    Exactly one of the following functions will be true for a given torus:

    o isApple() 
    o isDoughnut() 
    o isLemon() 
    o isVortex()
  */
   OdBool isVortex() const;

  /**
    Description:
    Returns true if and only if (minorRadius <  majorRadius), creating a solid with a hole in the middle.

    Remarks:
    Exactly one of the following functions will be true for a given torus:

    o isApple() 
    o isDoughnut() 
    o isLemon() 
    o isVortex()
  */
   OdBool isDoughnut() const;

  /**
    Description:
    Returns true if and only if (minorRadius <= 0) OR (majorRadius <= -minorRadius) 
  */
   OdBool isDegenerate() const;

  /**
    Description:
    Returns true if and only if there is a hole in the torus.

    Remarks:
    Returns true if and only if |majorRadius| > |minorRadius| + 1e-10
  */
   OdBool isHollow() const;

  /** \details
    Returns true if and only if the v-parameter is measured
    counterclockwise about the torus normal, rather than clockwise.
  */
   bool isReverseV() const;

  /** \details
    Sets ReverseV according to the parameter.

    \param isReverseV [in]  Sets ReverseV.
  */
   void setReverseV(
     bool isReverseV);

  //////////////////////////////////////////////////////////////////////////

};

#include "../TD_PackPop.h"

#endif // OD_GETORUS_H

