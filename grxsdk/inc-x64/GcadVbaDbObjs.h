

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.01.0622 */
/* at Tue Jan 19 11:14:07 2038
 */
/* Compiler settings for ..\..\..\..\..\Extensions\win\gcax\GcadVbaDbObjs.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 8.01.0622 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */



/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __GcadVbaDbObjs_h__
#define __GcadVbaDbObjs_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IGcadObjectEvents_FWD_DEFINED__
#define __IGcadObjectEvents_FWD_DEFINED__
typedef interface IGcadObjectEvents IGcadObjectEvents;

#endif 	/* __IGcadObjectEvents_FWD_DEFINED__ */


#ifndef __IGcadObject_FWD_DEFINED__
#define __IGcadObject_FWD_DEFINED__
typedef interface IGcadObject IGcadObject;

#endif 	/* __IGcadObject_FWD_DEFINED__ */


#ifndef __IGcadEntity_FWD_DEFINED__
#define __IGcadEntity_FWD_DEFINED__
typedef interface IGcadEntity IGcadEntity;

#endif 	/* __IGcadEntity_FWD_DEFINED__ */


#ifndef __IGcadAcCmColor_FWD_DEFINED__
#define __IGcadAcCmColor_FWD_DEFINED__
typedef interface IGcadAcCmColor IGcadAcCmColor;

#endif 	/* __IGcadAcCmColor_FWD_DEFINED__ */


#ifndef __IGcadBlock_FWD_DEFINED__
#define __IGcadBlock_FWD_DEFINED__
typedef interface IGcadBlock IGcadBlock;

#endif 	/* __IGcadBlock_FWD_DEFINED__ */


#ifndef __IGcadHyperlinks_FWD_DEFINED__
#define __IGcadHyperlinks_FWD_DEFINED__
typedef interface IGcadHyperlinks IGcadHyperlinks;

#endif 	/* __IGcadHyperlinks_FWD_DEFINED__ */


#ifndef __IGcadHyperlink_FWD_DEFINED__
#define __IGcadHyperlink_FWD_DEFINED__
typedef interface IGcadHyperlink IGcadHyperlink;

#endif 	/* __IGcadHyperlink_FWD_DEFINED__ */


#ifndef __IGcad3DFace_FWD_DEFINED__
#define __IGcad3DFace_FWD_DEFINED__
typedef interface IGcad3DFace IGcad3DFace;

#endif 	/* __IGcad3DFace_FWD_DEFINED__ */


#ifndef __IGcadPolygonMesh_FWD_DEFINED__
#define __IGcadPolygonMesh_FWD_DEFINED__
typedef interface IGcadPolygonMesh IGcadPolygonMesh;

#endif 	/* __IGcadPolygonMesh_FWD_DEFINED__ */


#ifndef __IGcad3DPolyline_FWD_DEFINED__
#define __IGcad3DPolyline_FWD_DEFINED__
typedef interface IGcad3DPolyline IGcad3DPolyline;

#endif 	/* __IGcad3DPolyline_FWD_DEFINED__ */


#ifndef __IGcadArc_FWD_DEFINED__
#define __IGcadArc_FWD_DEFINED__
typedef interface IGcadArc IGcadArc;

#endif 	/* __IGcadArc_FWD_DEFINED__ */


#ifndef __IGcadAttribute_FWD_DEFINED__
#define __IGcadAttribute_FWD_DEFINED__
typedef interface IGcadAttribute IGcadAttribute;

#endif 	/* __IGcadAttribute_FWD_DEFINED__ */


#ifndef __IGcad3DSolid_FWD_DEFINED__
#define __IGcad3DSolid_FWD_DEFINED__
typedef interface IGcad3DSolid IGcad3DSolid;

#endif 	/* __IGcad3DSolid_FWD_DEFINED__ */


#ifndef __IGcadRegion_FWD_DEFINED__
#define __IGcadRegion_FWD_DEFINED__
typedef interface IGcadRegion IGcadRegion;

#endif 	/* __IGcadRegion_FWD_DEFINED__ */


#ifndef __IGcadCircle_FWD_DEFINED__
#define __IGcadCircle_FWD_DEFINED__
typedef interface IGcadCircle IGcadCircle;

#endif 	/* __IGcadCircle_FWD_DEFINED__ */


#ifndef __IGcadDimension_FWD_DEFINED__
#define __IGcadDimension_FWD_DEFINED__
typedef interface IGcadDimension IGcadDimension;

#endif 	/* __IGcadDimension_FWD_DEFINED__ */


#ifndef __IGcadDimAligned_FWD_DEFINED__
#define __IGcadDimAligned_FWD_DEFINED__
typedef interface IGcadDimAligned IGcadDimAligned;

#endif 	/* __IGcadDimAligned_FWD_DEFINED__ */


#ifndef __IGcadDimAngular_FWD_DEFINED__
#define __IGcadDimAngular_FWD_DEFINED__
typedef interface IGcadDimAngular IGcadDimAngular;

#endif 	/* __IGcadDimAngular_FWD_DEFINED__ */


#ifndef __IGcadDimDiametric_FWD_DEFINED__
#define __IGcadDimDiametric_FWD_DEFINED__
typedef interface IGcadDimDiametric IGcadDimDiametric;

#endif 	/* __IGcadDimDiametric_FWD_DEFINED__ */


#ifndef __IGcadDimRotated_FWD_DEFINED__
#define __IGcadDimRotated_FWD_DEFINED__
typedef interface IGcadDimRotated IGcadDimRotated;

#endif 	/* __IGcadDimRotated_FWD_DEFINED__ */


#ifndef __IGcadDimOrdinate_FWD_DEFINED__
#define __IGcadDimOrdinate_FWD_DEFINED__
typedef interface IGcadDimOrdinate IGcadDimOrdinate;

#endif 	/* __IGcadDimOrdinate_FWD_DEFINED__ */


#ifndef __IGcadDimRadial_FWD_DEFINED__
#define __IGcadDimRadial_FWD_DEFINED__
typedef interface IGcadDimRadial IGcadDimRadial;

#endif 	/* __IGcadDimRadial_FWD_DEFINED__ */


#ifndef __IGcadEllipse_FWD_DEFINED__
#define __IGcadEllipse_FWD_DEFINED__
typedef interface IGcadEllipse IGcadEllipse;

#endif 	/* __IGcadEllipse_FWD_DEFINED__ */


#ifndef __IGcadLeader_FWD_DEFINED__
#define __IGcadLeader_FWD_DEFINED__
typedef interface IGcadLeader IGcadLeader;

#endif 	/* __IGcadLeader_FWD_DEFINED__ */


#ifndef __IGcadMText_FWD_DEFINED__
#define __IGcadMText_FWD_DEFINED__
typedef interface IGcadMText IGcadMText;

#endif 	/* __IGcadMText_FWD_DEFINED__ */


#ifndef __IGcadPoint_FWD_DEFINED__
#define __IGcadPoint_FWD_DEFINED__
typedef interface IGcadPoint IGcadPoint;

#endif 	/* __IGcadPoint_FWD_DEFINED__ */


#ifndef __IGcadLWPolyline_FWD_DEFINED__
#define __IGcadLWPolyline_FWD_DEFINED__
typedef interface IGcadLWPolyline IGcadLWPolyline;

#endif 	/* __IGcadLWPolyline_FWD_DEFINED__ */


#ifndef __IGcadPolyline_FWD_DEFINED__
#define __IGcadPolyline_FWD_DEFINED__
typedef interface IGcadPolyline IGcadPolyline;

#endif 	/* __IGcadPolyline_FWD_DEFINED__ */


#ifndef __IGcadRay_FWD_DEFINED__
#define __IGcadRay_FWD_DEFINED__
typedef interface IGcadRay IGcadRay;

#endif 	/* __IGcadRay_FWD_DEFINED__ */


#ifndef __IGcadShape_FWD_DEFINED__
#define __IGcadShape_FWD_DEFINED__
typedef interface IGcadShape IGcadShape;

#endif 	/* __IGcadShape_FWD_DEFINED__ */


#ifndef __IGcadSolid_FWD_DEFINED__
#define __IGcadSolid_FWD_DEFINED__
typedef interface IGcadSolid IGcadSolid;

#endif 	/* __IGcadSolid_FWD_DEFINED__ */


#ifndef __IGcadSpline_FWD_DEFINED__
#define __IGcadSpline_FWD_DEFINED__
typedef interface IGcadSpline IGcadSpline;

#endif 	/* __IGcadSpline_FWD_DEFINED__ */


#ifndef __IGcadText_FWD_DEFINED__
#define __IGcadText_FWD_DEFINED__
typedef interface IGcadText IGcadText;

#endif 	/* __IGcadText_FWD_DEFINED__ */


#ifndef __IGcadTolerance_FWD_DEFINED__
#define __IGcadTolerance_FWD_DEFINED__
typedef interface IGcadTolerance IGcadTolerance;

#endif 	/* __IGcadTolerance_FWD_DEFINED__ */


#ifndef __IGcadTrace_FWD_DEFINED__
#define __IGcadTrace_FWD_DEFINED__
typedef interface IGcadTrace IGcadTrace;

#endif 	/* __IGcadTrace_FWD_DEFINED__ */


#ifndef __IGcadXline_FWD_DEFINED__
#define __IGcadXline_FWD_DEFINED__
typedef interface IGcadXline IGcadXline;

#endif 	/* __IGcadXline_FWD_DEFINED__ */


#ifndef __IGcadBlockReference_FWD_DEFINED__
#define __IGcadBlockReference_FWD_DEFINED__
typedef interface IGcadBlockReference IGcadBlockReference;

#endif 	/* __IGcadBlockReference_FWD_DEFINED__ */


#ifndef __IGcadHatch_FWD_DEFINED__
#define __IGcadHatch_FWD_DEFINED__
typedef interface IGcadHatch IGcadHatch;

#endif 	/* __IGcadHatch_FWD_DEFINED__ */


#ifndef __IGcadRasterImage_FWD_DEFINED__
#define __IGcadRasterImage_FWD_DEFINED__
typedef interface IGcadRasterImage IGcadRasterImage;

#endif 	/* __IGcadRasterImage_FWD_DEFINED__ */


#ifndef __IGcadLine_FWD_DEFINED__
#define __IGcadLine_FWD_DEFINED__
typedef interface IGcadLine IGcadLine;

#endif 	/* __IGcadLine_FWD_DEFINED__ */


#ifndef __IGcadPlotConfiguration_FWD_DEFINED__
#define __IGcadPlotConfiguration_FWD_DEFINED__
typedef interface IGcadPlotConfiguration IGcadPlotConfiguration;

#endif 	/* __IGcadPlotConfiguration_FWD_DEFINED__ */


#ifndef __IGcadLayout_FWD_DEFINED__
#define __IGcadLayout_FWD_DEFINED__
typedef interface IGcadLayout IGcadLayout;

#endif 	/* __IGcadLayout_FWD_DEFINED__ */


#ifndef __IGcadAttributeReference_FWD_DEFINED__
#define __IGcadAttributeReference_FWD_DEFINED__
typedef interface IGcadAttributeReference IGcadAttributeReference;

#endif 	/* __IGcadAttributeReference_FWD_DEFINED__ */


#ifndef __IGcadOle_FWD_DEFINED__
#define __IGcadOle_FWD_DEFINED__
typedef interface IGcadOle IGcadOle;

#endif 	/* __IGcadOle_FWD_DEFINED__ */


#ifndef __IGcadHelix_FWD_DEFINED__
#define __IGcadHelix_FWD_DEFINED__
typedef interface IGcadHelix IGcadHelix;

#endif 	/* __IGcadHelix_FWD_DEFINED__ */


#ifndef __IGcadSurface_FWD_DEFINED__
#define __IGcadSurface_FWD_DEFINED__
typedef interface IGcadSurface IGcadSurface;

#endif 	/* __IGcadSurface_FWD_DEFINED__ */


#ifndef __IGcadUnderlay_FWD_DEFINED__
#define __IGcadUnderlay_FWD_DEFINED__
typedef interface IGcadUnderlay IGcadUnderlay;

#endif 	/* __IGcadUnderlay_FWD_DEFINED__ */


#ifndef __IGcadDwfUnderlay_FWD_DEFINED__
#define __IGcadDwfUnderlay_FWD_DEFINED__
typedef interface IGcadDwfUnderlay IGcadDwfUnderlay;

#endif 	/* __IGcadDwfUnderlay_FWD_DEFINED__ */


#ifndef __IGcadMInsertBlock_FWD_DEFINED__
#define __IGcadMInsertBlock_FWD_DEFINED__
typedef interface IGcadMInsertBlock IGcadMInsertBlock;

#endif 	/* __IGcadMInsertBlock_FWD_DEFINED__ */


#ifndef __IGcadPolyfaceMesh_FWD_DEFINED__
#define __IGcadPolyfaceMesh_FWD_DEFINED__
typedef interface IGcadPolyfaceMesh IGcadPolyfaceMesh;

#endif 	/* __IGcadPolyfaceMesh_FWD_DEFINED__ */


#ifndef __IGcadMLine_FWD_DEFINED__
#define __IGcadMLine_FWD_DEFINED__
typedef interface IGcadMLine IGcadMLine;

#endif 	/* __IGcadMLine_FWD_DEFINED__ */


#ifndef __IGcadDim3PointAngular_FWD_DEFINED__
#define __IGcadDim3PointAngular_FWD_DEFINED__
typedef interface IGcadDim3PointAngular IGcadDim3PointAngular;

#endif 	/* __IGcadDim3PointAngular_FWD_DEFINED__ */


#ifndef __IGcadAssocArrayPath_FWD_DEFINED__
#define __IGcadAssocArrayPath_FWD_DEFINED__
typedef interface IGcadAssocArrayPath IGcadAssocArrayPath;

#endif 	/* __IGcadAssocArrayPath_FWD_DEFINED__ */


#ifndef __IGcadAssocArrayPolar_FWD_DEFINED__
#define __IGcadAssocArrayPolar_FWD_DEFINED__
typedef interface IGcadAssocArrayPolar IGcadAssocArrayPolar;

#endif 	/* __IGcadAssocArrayPolar_FWD_DEFINED__ */


#ifndef __IGcadAssocArrayRectangular_FWD_DEFINED__
#define __IGcadAssocArrayRectangular_FWD_DEFINED__
typedef interface IGcadAssocArrayRectangular IGcadAssocArrayRectangular;

#endif 	/* __IGcadAssocArrayRectangular_FWD_DEFINED__ */


#ifndef __IGcadExternalReference_FWD_DEFINED__
#define __IGcadExternalReference_FWD_DEFINED__
typedef interface IGcadExternalReference IGcadExternalReference;

#endif 	/* __IGcadExternalReference_FWD_DEFINED__ */


#ifndef __IGcadTable_FWD_DEFINED__
#define __IGcadTable_FWD_DEFINED__
typedef interface IGcadTable IGcadTable;

#endif 	/* __IGcadTable_FWD_DEFINED__ */


#ifndef __IGcadTableCell_FWD_DEFINED__
#define __IGcadTableCell_FWD_DEFINED__
typedef interface IGcadTableCell IGcadTableCell;

#endif 	/* __IGcadTableCell_FWD_DEFINED__ */


#ifndef __IGcadDimArcLength_FWD_DEFINED__
#define __IGcadDimArcLength_FWD_DEFINED__
typedef interface IGcadDimArcLength IGcadDimArcLength;

#endif 	/* __IGcadDimArcLength_FWD_DEFINED__ */


#ifndef __IGcadDimRadialLarge_FWD_DEFINED__
#define __IGcadDimRadialLarge_FWD_DEFINED__
typedef interface IGcadDimRadialLarge IGcadDimRadialLarge;

#endif 	/* __IGcadDimRadialLarge_FWD_DEFINED__ */


#ifndef __IGcadSection_FWD_DEFINED__
#define __IGcadSection_FWD_DEFINED__
typedef interface IGcadSection IGcadSection;

#endif 	/* __IGcadSection_FWD_DEFINED__ */


#ifndef __IGcadSection2_FWD_DEFINED__
#define __IGcadSection2_FWD_DEFINED__
typedef interface IGcadSection2 IGcadSection2;

#endif 	/* __IGcadSection2_FWD_DEFINED__ */


#ifndef __IGcadModelSpace_FWD_DEFINED__
#define __IGcadModelSpace_FWD_DEFINED__
typedef interface IGcadModelSpace IGcadModelSpace;

#endif 	/* __IGcadModelSpace_FWD_DEFINED__ */


#ifndef __IGcadBlocks_FWD_DEFINED__
#define __IGcadBlocks_FWD_DEFINED__
typedef interface IGcadBlocks IGcadBlocks;

#endif 	/* __IGcadBlocks_FWD_DEFINED__ */


#ifndef __IGcadGroups_FWD_DEFINED__
#define __IGcadGroups_FWD_DEFINED__
typedef interface IGcadGroups IGcadGroups;

#endif 	/* __IGcadGroups_FWD_DEFINED__ */


#ifndef __IGcadGroup_FWD_DEFINED__
#define __IGcadGroup_FWD_DEFINED__
typedef interface IGcadGroup IGcadGroup;

#endif 	/* __IGcadGroup_FWD_DEFINED__ */


#ifndef __IGcadDimStyles_FWD_DEFINED__
#define __IGcadDimStyles_FWD_DEFINED__
typedef interface IGcadDimStyles IGcadDimStyles;

#endif 	/* __IGcadDimStyles_FWD_DEFINED__ */


#ifndef __IGcadDimStyle_FWD_DEFINED__
#define __IGcadDimStyle_FWD_DEFINED__
typedef interface IGcadDimStyle IGcadDimStyle;

#endif 	/* __IGcadDimStyle_FWD_DEFINED__ */


#ifndef __IGcadMLeaderStyle_FWD_DEFINED__
#define __IGcadMLeaderStyle_FWD_DEFINED__
typedef interface IGcadMLeaderStyle IGcadMLeaderStyle;

#endif 	/* __IGcadMLeaderStyle_FWD_DEFINED__ */


#ifndef __IGcadLayers_FWD_DEFINED__
#define __IGcadLayers_FWD_DEFINED__
typedef interface IGcadLayers IGcadLayers;

#endif 	/* __IGcadLayers_FWD_DEFINED__ */


#ifndef __IGcadLayer_FWD_DEFINED__
#define __IGcadLayer_FWD_DEFINED__
typedef interface IGcadLayer IGcadLayer;

#endif 	/* __IGcadLayer_FWD_DEFINED__ */


#ifndef __IGcadLineTypes_FWD_DEFINED__
#define __IGcadLineTypes_FWD_DEFINED__
typedef interface IGcadLineTypes IGcadLineTypes;

#endif 	/* __IGcadLineTypes_FWD_DEFINED__ */


#ifndef __IGcadLineType_FWD_DEFINED__
#define __IGcadLineType_FWD_DEFINED__
typedef interface IGcadLineType IGcadLineType;

#endif 	/* __IGcadLineType_FWD_DEFINED__ */


#ifndef __IGcadDictionaries_FWD_DEFINED__
#define __IGcadDictionaries_FWD_DEFINED__
typedef interface IGcadDictionaries IGcadDictionaries;

#endif 	/* __IGcadDictionaries_FWD_DEFINED__ */


#ifndef __IGcadDictionary_FWD_DEFINED__
#define __IGcadDictionary_FWD_DEFINED__
typedef interface IGcadDictionary IGcadDictionary;

#endif 	/* __IGcadDictionary_FWD_DEFINED__ */


#ifndef __IGcadXRecord_FWD_DEFINED__
#define __IGcadXRecord_FWD_DEFINED__
typedef interface IGcadXRecord IGcadXRecord;

#endif 	/* __IGcadXRecord_FWD_DEFINED__ */


#ifndef __IGcadDatabase_FWD_DEFINED__
#define __IGcadDatabase_FWD_DEFINED__
typedef interface IGcadDatabase IGcadDatabase;

#endif 	/* __IGcadDatabase_FWD_DEFINED__ */


#ifndef __IGcadSectionSettings_FWD_DEFINED__
#define __IGcadSectionSettings_FWD_DEFINED__
typedef interface IGcadSectionSettings IGcadSectionSettings;

#endif 	/* __IGcadSectionSettings_FWD_DEFINED__ */


#ifndef __IGcadPaperSpace_FWD_DEFINED__
#define __IGcadPaperSpace_FWD_DEFINED__
typedef interface IGcadPaperSpace IGcadPaperSpace;

#endif 	/* __IGcadPaperSpace_FWD_DEFINED__ */


#ifndef __IGcadRegisteredApplications_FWD_DEFINED__
#define __IGcadRegisteredApplications_FWD_DEFINED__
typedef interface IGcadRegisteredApplications IGcadRegisteredApplications;

#endif 	/* __IGcadRegisteredApplications_FWD_DEFINED__ */


#ifndef __IGcadTextStyles_FWD_DEFINED__
#define __IGcadTextStyles_FWD_DEFINED__
typedef interface IGcadTextStyles IGcadTextStyles;

#endif 	/* __IGcadTextStyles_FWD_DEFINED__ */


#ifndef __IGcadTextStyle_FWD_DEFINED__
#define __IGcadTextStyle_FWD_DEFINED__
typedef interface IGcadTextStyle IGcadTextStyle;

#endif 	/* __IGcadTextStyle_FWD_DEFINED__ */


#ifndef __IGcadUCSs_FWD_DEFINED__
#define __IGcadUCSs_FWD_DEFINED__
typedef interface IGcadUCSs IGcadUCSs;

#endif 	/* __IGcadUCSs_FWD_DEFINED__ */


#ifndef __IGcadUCS_FWD_DEFINED__
#define __IGcadUCS_FWD_DEFINED__
typedef interface IGcadUCS IGcadUCS;

#endif 	/* __IGcadUCS_FWD_DEFINED__ */


#ifndef __IGcadViews_FWD_DEFINED__
#define __IGcadViews_FWD_DEFINED__
typedef interface IGcadViews IGcadViews;

#endif 	/* __IGcadViews_FWD_DEFINED__ */


#ifndef __IGcadViewports_FWD_DEFINED__
#define __IGcadViewports_FWD_DEFINED__
typedef interface IGcadViewports IGcadViewports;

#endif 	/* __IGcadViewports_FWD_DEFINED__ */


#ifndef __IGcadViewport_FWD_DEFINED__
#define __IGcadViewport_FWD_DEFINED__
typedef interface IGcadViewport IGcadViewport;

#endif 	/* __IGcadViewport_FWD_DEFINED__ */


#ifndef __IGcadLayouts_FWD_DEFINED__
#define __IGcadLayouts_FWD_DEFINED__
typedef interface IGcadLayouts IGcadLayouts;

#endif 	/* __IGcadLayouts_FWD_DEFINED__ */


#ifndef __IGcadPlotConfigurations_FWD_DEFINED__
#define __IGcadPlotConfigurations_FWD_DEFINED__
typedef interface IGcadPlotConfigurations IGcadPlotConfigurations;

#endif 	/* __IGcadPlotConfigurations_FWD_DEFINED__ */


#ifndef __IGcadDatabasePreferences_FWD_DEFINED__
#define __IGcadDatabasePreferences_FWD_DEFINED__
typedef interface IGcadDatabasePreferences IGcadDatabasePreferences;

#endif 	/* __IGcadDatabasePreferences_FWD_DEFINED__ */


#ifndef __IGcadFileDependencies_FWD_DEFINED__
#define __IGcadFileDependencies_FWD_DEFINED__
typedef interface IGcadFileDependencies IGcadFileDependencies;

#endif 	/* __IGcadFileDependencies_FWD_DEFINED__ */


#ifndef __IGcadFileDependency_FWD_DEFINED__
#define __IGcadFileDependency_FWD_DEFINED__
typedef interface IGcadFileDependency IGcadFileDependency;

#endif 	/* __IGcadFileDependency_FWD_DEFINED__ */


#ifndef __IGcadSummaryInfo_FWD_DEFINED__
#define __IGcadSummaryInfo_FWD_DEFINED__
typedef interface IGcadSummaryInfo IGcadSummaryInfo;

#endif 	/* __IGcadSummaryInfo_FWD_DEFINED__ */


#ifndef __IGcadSectionManager_FWD_DEFINED__
#define __IGcadSectionManager_FWD_DEFINED__
typedef interface IGcadSectionManager IGcadSectionManager;

#endif 	/* __IGcadSectionManager_FWD_DEFINED__ */


#ifndef __IGcadMaterials_FWD_DEFINED__
#define __IGcadMaterials_FWD_DEFINED__
typedef interface IGcadMaterials IGcadMaterials;

#endif 	/* __IGcadMaterials_FWD_DEFINED__ */


#ifndef __IGcadMaterial_FWD_DEFINED__
#define __IGcadMaterial_FWD_DEFINED__
typedef interface IGcadMaterial IGcadMaterial;

#endif 	/* __IGcadMaterial_FWD_DEFINED__ */


#ifndef __IGcadSectionTypeSettings_FWD_DEFINED__
#define __IGcadSectionTypeSettings_FWD_DEFINED__
typedef interface IGcadSectionTypeSettings IGcadSectionTypeSettings;

#endif 	/* __IGcadSectionTypeSettings_FWD_DEFINED__ */


#ifndef __IGcadPViewport_FWD_DEFINED__
#define __IGcadPViewport_FWD_DEFINED__
typedef interface IGcadPViewport IGcadPViewport;

#endif 	/* __IGcadPViewport_FWD_DEFINED__ */


#ifndef __IGcadView_FWD_DEFINED__
#define __IGcadView_FWD_DEFINED__
typedef interface IGcadView IGcadView;

#endif 	/* __IGcadView_FWD_DEFINED__ */


#ifndef __IGcadRegisteredApplication_FWD_DEFINED__
#define __IGcadRegisteredApplication_FWD_DEFINED__
typedef interface IGcadRegisteredApplication IGcadRegisteredApplication;

#endif 	/* __IGcadRegisteredApplication_FWD_DEFINED__ */


#ifndef __IGcadMLeader_FWD_DEFINED__
#define __IGcadMLeader_FWD_DEFINED__
typedef interface IGcadMLeader IGcadMLeader;

#endif 	/* __IGcadMLeader_FWD_DEFINED__ */


#ifndef __IGcadSubDMesh_FWD_DEFINED__
#define __IGcadSubDMesh_FWD_DEFINED__
typedef interface IGcadSubDMesh IGcadSubDMesh;

#endif 	/* __IGcadSubDMesh_FWD_DEFINED__ */


#ifndef __IGcadCamera_FWD_DEFINED__
#define __IGcadCamera_FWD_DEFINED__
typedef interface IGcadCamera IGcadCamera;

#endif 	/* __IGcadCamera_FWD_DEFINED__ */


#ifndef __IGcadLight_FWD_DEFINED__
#define __IGcadLight_FWD_DEFINED__
typedef interface IGcadLight IGcadLight;

#endif 	/* __IGcadLight_FWD_DEFINED__ */


#ifndef __IGcadLight2_FWD_DEFINED__
#define __IGcadLight2_FWD_DEFINED__
typedef interface IGcadLight2 IGcadLight2;

#endif 	/* __IGcadLight2_FWD_DEFINED__ */


#ifndef __IGcadLight3_FWD_DEFINED__
#define __IGcadLight3_FWD_DEFINED__
typedef interface IGcadLight3 IGcadLight3;

#endif 	/* __IGcadLight3_FWD_DEFINED__ */


#ifndef __IGcadArcAlignedText_FWD_DEFINED__
#define __IGcadArcAlignedText_FWD_DEFINED__
typedef interface IGcadArcAlignedText IGcadArcAlignedText;

#endif 	/* __IGcadArcAlignedText_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "GcadVbaDefs.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_GcadVbaDbObjs_0000_0000 */
/* [local] */ 

















































































































































extern RPC_IF_HANDLE __MIDL_itf_GcadVbaDbObjs_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_GcadVbaDbObjs_0000_0000_v0_0_s_ifspec;

#ifndef __IGcadObjectEvents_INTERFACE_DEFINED__
#define __IGcadObjectEvents_INTERFACE_DEFINED__

/* interface IGcadObjectEvents */
/* [object][oleautomation][helpstring][uuid] */ 


EXTERN_C const IID IID_IGcadObjectEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B909185C-EFBF-4E85-8962-151D7578B963")
    IGcadObjectEvents : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT __stdcall Modified( 
            /* [in] */ IGcadObject *pObject) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadObjectEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadObjectEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadObjectEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadObjectEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadObjectEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadObjectEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadObjectEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadObjectEvents * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( __stdcall *Modified )( 
            IGcadObjectEvents * This,
            /* [in] */ IGcadObject *pObject);
        
        END_INTERFACE
    } IGcadObjectEventsVtbl;

    interface IGcadObjectEvents
    {
        CONST_VTBL struct IGcadObjectEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadObjectEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadObjectEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadObjectEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadObjectEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadObjectEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadObjectEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadObjectEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadObjectEvents_Modified(This,pObject)	\
    ( (This)->lpVtbl -> Modified(This,pObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadObjectEvents_INTERFACE_DEFINED__ */


#ifndef __IGcadObject_INTERFACE_DEFINED__
#define __IGcadObject_INTERFACE_DEFINED__

/* interface IGcadObject */
/* [unique][oleautomation][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B6338EEF-4780-46F7-831F-D19BA40458EE")
    IGcadObject : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ BSTR *Handle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectName( 
            /* [retval][out] */ BSTR *ObjectName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetXData( 
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetXData( 
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectID( 
            /* [retval][out] */ LONG_PTR *ObjectID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ApplicationObject) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Database( 
            /* [retval][out] */ IGcadDatabase **pDatabase) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasExtensionDictionary( 
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetExtensionDictionary( 
            /* [retval][out] */ IGcadDictionary **pExtDictionary) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OwnerID( 
            /* [retval][out] */ LONG_PTR *OwnerID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ IDispatch **pDocument) = 0;
        
        virtual /* [helpstring][hidden][id] */ HRESULT STDMETHODCALLTYPE Erase( void) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectID32( 
            /* [retval][out] */ long *ObjectID) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_OwnerID32( 
            /* [retval][out] */ long *OwnerID) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadObject * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadObject * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadObject * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadObject * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadObject * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadObject * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadObject * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadObject * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadObject * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadObject * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadObject * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadObject * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadObject * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadObject * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadObject * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadObject * This,
            /* [retval][out] */ long *OwnerID);
        
        END_INTERFACE
    } IGcadObjectVtbl;

    interface IGcadObject
    {
        CONST_VTBL struct IGcadObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadObject_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadObject_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadObject_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadObject_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadObject_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadObject_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadObject_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadObject_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadObject_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadObject_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadObject_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadObject_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadObject_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadObject_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadObject_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadObject_INTERFACE_DEFINED__ */


#ifndef __IGcadEntity_INTERFACE_DEFINED__
#define __IGcadEntity_INTERFACE_DEFINED__

/* interface IGcadEntity */
/* [unique][oleautomation][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadEntity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6A96DAAF-8962-47B3-BB54-CA0F20D6480B")
    IGcadEntity : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TrueColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrueColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *bVisible) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL bVisible) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ArrayPolar( 
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ArrayRectangular( 
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Highlight( 
            /* [in] */ VARIANT_BOOL HighlightFlag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IDispatch **pCopyObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Rotate( 
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Rotate3D( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Mirror( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Mirror3D( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ScaleEntity( 
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE TransformBy( 
            /* [in] */ VARIANT TransformationMatrix) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBoundingBox( 
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IntersectWith( 
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Lineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntityTransparency( 
            /* [retval][out] */ BSTR *transparency) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntityTransparency( 
            /* [in] */ BSTR transparency) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Material( 
            /* [retval][out] */ BSTR *Material) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Material( 
            /* [in] */ BSTR Material) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntityName( 
            /* [retval][out] */ BSTR *EntityName) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntityType( 
            /* [retval][out] */ GcEntityName *entType) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ GCAD_COLOR color) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadEntityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadEntity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadEntity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadEntity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadEntity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadEntity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadEntity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadEntity * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadEntity * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadEntity * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadEntity * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadEntity * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadEntity * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadEntity * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadEntity * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadEntity * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadEntity * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadEntity * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadEntity * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadEntity * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadEntity * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadEntity * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadEntity * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadEntity * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadEntity * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadEntity * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadEntity * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadEntity * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadEntity * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadEntity * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadEntity * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadEntity * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadEntity * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadEntity * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadEntity * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadEntity * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadEntity * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadEntity * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadEntity * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadEntity * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadEntity * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadEntity * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadEntity * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadEntity * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadEntity * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadEntity * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadEntity * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadEntity * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadEntity * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadEntity * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadEntity * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadEntity * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadEntity * This,
            /* [in] */ GCAD_COLOR color);
        
        END_INTERFACE
    } IGcadEntityVtbl;

    interface IGcadEntity
    {
        CONST_VTBL struct IGcadEntityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadEntity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadEntity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadEntity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadEntity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadEntity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadEntity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadEntity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadEntity_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadEntity_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadEntity_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadEntity_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadEntity_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadEntity_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadEntity_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadEntity_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadEntity_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadEntity_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadEntity_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadEntity_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadEntity_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadEntity_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadEntity_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadEntity_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadEntity_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadEntity_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadEntity_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadEntity_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadEntity_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadEntity_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadEntity_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadEntity_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadEntity_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadEntity_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadEntity_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadEntity_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadEntity_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadEntity_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadEntity_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadEntity_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadEntity_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadEntity_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadEntity_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadEntity_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadEntity_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadEntity_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadEntity_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadEntity_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadEntity_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadEntity_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadEntity_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadEntity_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadEntity_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadEntity_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadEntity_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadEntity_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadEntity_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadEntity_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadEntity_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadEntity_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadEntity_INTERFACE_DEFINED__ */


#ifndef __IGcadAcCmColor_INTERFACE_DEFINED__
#define __IGcadAcCmColor_INTERFACE_DEFINED__

/* interface IGcadAcCmColor */
/* [unique][oleautomation][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadAcCmColor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1E5A66A-2F75-46F3-B293-B4C509A8A18B")
    IGcadAcCmColor : public IDispatch
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntityColor( 
            /* [in] */ long eColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntityColor( 
            /* [retval][out] */ long *eColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetNames( 
            /* [in] */ BSTR ColorName,
            /* [in] */ BSTR BookName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ long *Red) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ long *Blue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ long *Green) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetRGB( 
            /* [in] */ long Red,
            /* [in] */ long Green,
            /* [in] */ long Blue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorMethod( 
            /* [in] */ GcColorMethod Flags) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorMethod( 
            /* [retval][out] */ GcColorMethod *Flags) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ GcColor *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ GcColor color) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetColorBookColor( 
            /* [in] */ BSTR BookName,
            /* [in] */ BSTR ColorName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAcCmColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAcCmColor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAcCmColor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAcCmColor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAcCmColor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAcCmColor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAcCmColor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAcCmColor * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityColor )( 
            IGcadAcCmColor * This,
            /* [in] */ long eColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityColor )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ long *eColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorName )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookName )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetNames )( 
            IGcadAcCmColor * This,
            /* [in] */ BSTR ColorName,
            /* [in] */ BSTR BookName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAcCmColor * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ long *Red);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ long *Blue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ long *Green);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetRGB )( 
            IGcadAcCmColor * This,
            /* [in] */ long Red,
            /* [in] */ long Green,
            /* [in] */ long Blue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMethod )( 
            IGcadAcCmColor * This,
            /* [in] */ GcColorMethod Flags);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMethod )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ GcColorMethod *Flags);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            IGcadAcCmColor * This,
            /* [retval][out] */ GcColor *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            IGcadAcCmColor * This,
            /* [in] */ GcColor color);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetColorBookColor )( 
            IGcadAcCmColor * This,
            /* [in] */ BSTR BookName,
            /* [in] */ BSTR ColorName);
        
        END_INTERFACE
    } IGcadAcCmColorVtbl;

    interface IGcadAcCmColor
    {
        CONST_VTBL struct IGcadAcCmColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAcCmColor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAcCmColor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAcCmColor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAcCmColor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAcCmColor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAcCmColor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAcCmColor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAcCmColor_put_EntityColor(This,eColor)	\
    ( (This)->lpVtbl -> put_EntityColor(This,eColor) ) 

#define IGcadAcCmColor_get_EntityColor(This,eColor)	\
    ( (This)->lpVtbl -> get_EntityColor(This,eColor) ) 

#define IGcadAcCmColor_get_ColorName(This,Name)	\
    ( (This)->lpVtbl -> get_ColorName(This,Name) ) 

#define IGcadAcCmColor_get_BookName(This,Name)	\
    ( (This)->lpVtbl -> get_BookName(This,Name) ) 

#define IGcadAcCmColor_SetNames(This,ColorName,BookName)	\
    ( (This)->lpVtbl -> SetNames(This,ColorName,BookName) ) 

#define IGcadAcCmColor_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAcCmColor_get_Red(This,Red)	\
    ( (This)->lpVtbl -> get_Red(This,Red) ) 

#define IGcadAcCmColor_get_Blue(This,Blue)	\
    ( (This)->lpVtbl -> get_Blue(This,Blue) ) 

#define IGcadAcCmColor_get_Green(This,Green)	\
    ( (This)->lpVtbl -> get_Green(This,Green) ) 

#define IGcadAcCmColor_SetRGB(This,Red,Green,Blue)	\
    ( (This)->lpVtbl -> SetRGB(This,Red,Green,Blue) ) 

#define IGcadAcCmColor_put_ColorMethod(This,Flags)	\
    ( (This)->lpVtbl -> put_ColorMethod(This,Flags) ) 

#define IGcadAcCmColor_get_ColorMethod(This,Flags)	\
    ( (This)->lpVtbl -> get_ColorMethod(This,Flags) ) 

#define IGcadAcCmColor_get_ColorIndex(This,color)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,color) ) 

#define IGcadAcCmColor_put_ColorIndex(This,color)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,color) ) 

#define IGcadAcCmColor_SetColorBookColor(This,BookName,ColorName)	\
    ( (This)->lpVtbl -> SetColorBookColor(This,BookName,ColorName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAcCmColor_INTERFACE_DEFINED__ */


#ifndef __IGcadBlock_INTERFACE_DEFINED__
#define __IGcadBlock_INTERFACE_DEFINED__

/* interface IGcadBlock */
/* [unique][oleautomation][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4E606022-298C-4930-A348-D54FCA8E9BBC")
    IGcadBlock : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **pItem) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Origin( 
            /* [retval][out] */ VARIANT *Origin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Origin( 
            /* [in] */ VARIANT Origin) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddCustomObject( 
            /* [in] */ BSTR ClassName,
            /* [retval][out] */ IDispatch **pObject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add3DFace( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcad3DFace **pFace3d) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add3DMesh( 
            /* [in] */ int M,
            /* [in] */ int N,
            /* [in] */ VARIANT PointsMatrix,
            /* [retval][out] */ IGcadPolygonMesh **pMesh3d) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add3DPoly( 
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcad3DPolyline **pPoly3d) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddArc( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double StartAngle,
            /* [in] */ double EndAngle,
            /* [retval][out] */ IGcadArc **pArc) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            /* [in] */ double Height,
            /* [in] */ GcAttributeMode Mode,
            /* [in] */ BSTR Prompt,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Tag,
            /* [in] */ BSTR Value,
            /* [retval][out] */ IGcadAttribute **pAttr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddBox( 
            /* [in] */ VARIANT Origin,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pBox) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddCircle( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcadCircle **pCircle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddCone( 
            /* [in] */ VARIANT Center,
            /* [in] */ double BaseRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCone) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddCylinder( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCyl) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimAligned( 
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT TextPosition,
            /* [retval][out] */ IGcadDimAligned **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimAngular( 
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDimAngular **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimDiametric( 
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT FarChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimDiametric **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimRotated( 
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT DimLineLocation,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadDimRotated **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimOrdinate( 
            /* [in] */ VARIANT DefinitionPoint,
            /* [in] */ VARIANT LeaderEndPoint,
            /* [in] */ int UseXAxis,
            /* [retval][out] */ IGcadDimOrdinate **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimRadial( 
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimRadial **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddEllipse( 
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT MajorAxis,
            /* [in] */ double RadiusRatio,
            /* [retval][out] */ IGcadEllipse **pEllipse) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddEllipticalCone( 
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCone) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddEllipticalCylinder( 
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCyl) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddExtrudedSolid( 
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ double Height,
            /* [in] */ double TaperAngle,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddExtrudedSolidAlongPath( 
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ IDispatch *Path,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLeader( 
            /* [in] */ VARIANT PointsArray,
            /* [in] */ IGcadEntity *Annotation,
            /* [in] */ GcLeaderType Type,
            /* [retval][out] */ IGcadLeader **pLeader) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMText( 
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Width,
            /* [in] */ BSTR Text,
            /* [retval][out] */ IGcadMText **pMtext) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddPoint( 
            /* [in] */ VARIANT Point,
            /* [retval][out] */ IGcadPoint **pPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLightWeightPolyline( 
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadLWPolyline **pLWPolyline) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddPolyline( 
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadPolyline **pPolyline) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddRay( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadRay **pRay) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddRegion( 
            /* [in] */ VARIANT ObjectList,
            /* [retval][out] */ VARIANT *pRegions) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddRevolvedSolid( 
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ VARIANT AxisPoint,
            /* [in] */ VARIANT AxisDir,
            /* [in] */ double Angle,
            /* [retval][out] */ IGcad3DSolid **pRevolSolid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddShape( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadShape **pShape) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddSolid( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcadSolid **pSolid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddSphere( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcad3DSolid **pSphere) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddSpline( 
            /* [in] */ VARIANT PointsArray,
            /* [in] */ VARIANT StartTangent,
            /* [in] */ VARIANT EndTangent,
            /* [retval][out] */ IGcadSpline **pSpline) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddText( 
            /* [in] */ BSTR TextString,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadText **pText) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddTolerance( 
            /* [in] */ BSTR Text,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ VARIANT Direction,
            /* [retval][out] */ IGcadTolerance **pTolerance) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddTorus( 
            /* [in] */ VARIANT Center,
            /* [in] */ double TorusRadius,
            /* [in] */ double TubeRadius,
            /* [retval][out] */ IGcad3DSolid **pTorus) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddTrace( 
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcadTrace **pTrace) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddWedge( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pWedge) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddXline( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadXline **pXline) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertBlock( 
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadBlockReference **pBlkRef) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddHatch( 
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName,
            /* [in] */ VARIANT_BOOL Associativity,
            /* [optional][in] */ VARIANT HatchObjectType,
            /* [retval][out] */ IGcadHatch **pHatch) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddRaster( 
            /* [in] */ BSTR imageFileName,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadRasterImage **pRaster) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ VARIANT StartPoint,
            /* [in] */ VARIANT EndPoint,
            /* [retval][out] */ IGcadLine **pLine) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLayout( 
            /* [retval][out] */ VARIANT_BOOL *bIsLayout) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ IGcadLayout **pLayout) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsXRef( 
            /* [retval][out] */ VARIANT_BOOL *pIsXRref) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMInsertBlock( 
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [in] */ long RowSpacing,
            /* [in] */ long ColumnSpacing,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadMInsertBlock **pMInsertBlk) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddPolyfaceMesh( 
            /* [in] */ VARIANT VertexList,
            /* [in] */ VARIANT FaceList,
            /* [retval][out] */ IGcadPolyfaceMesh **pPFMesh) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMLine( 
            /* [in] */ VARIANT VertexList,
            /* [retval][out] */ IGcadMLine **pMLine) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDim3PointAngular( 
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDim3PointAngular **pDim) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XRefDatabase( 
            /* [retval][out] */ IGcadDatabase **pDatabase) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AttachExternalReference( 
            /* [in] */ BSTR PathName,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ VARIANT_BOOL bOverlay,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadExternalReference **pXRef) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Unload( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reload( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Bind( 
            /* [in] */ VARIANT_BOOL bPrefixName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddTable( 
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [in] */ double RowHeight,
            /* [in] */ double ColWidth,
            /* [retval][out] */ IGcadTable **pTable) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comments( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Units( 
            /* [retval][out] */ GcInsertUnits *pIU) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Units( 
            /* [in] */ GcInsertUnits pIU) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Explodable( 
            /* [retval][out] */ VARIANT_BOOL *bExplodable) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Explodable( 
            /* [in] */ VARIANT_BOOL bExplodable) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockScaling( 
            /* [retval][out] */ GcBlockScaling *pBS) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockScaling( 
            /* [in] */ GcBlockScaling pBS) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDynamicBlock( 
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimArc( 
            /* [in] */ VARIANT ArcCenter,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT ArcPoint,
            /* [retval][out] */ IGcadDimArcLength **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddDimRadialLarge( 
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT OverrideCenter,
            /* [in] */ VARIANT JogPoint,
            /* [in] */ double JogAngle,
            /* [retval][out] */ IGcadDimRadialLarge **pDim) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddSection( 
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint,
            /* [in] */ VARIANT planeVector,
            /* [retval][out] */ IGcadSection **ppSecPlane) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMLeader( 
            /* [in] */ VARIANT PointsArray,
            /* [out] */ int *leaderLineIndex,
            /* [retval][out] */ IGcadMLeader **pMLeader) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadBlock * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadBlock * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadBlock * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadBlock * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadBlock * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadBlock * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadBlock * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadBlock * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadBlock * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadBlock * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadBlock * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadBlock * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadBlock * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadBlock * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadBlock * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadBlock * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **pItem);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadBlock * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadBlock * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadBlock * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadBlock * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomObject )( 
            IGcadBlock * This,
            /* [in] */ BSTR ClassName,
            /* [retval][out] */ IDispatch **pObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DFace )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcad3DFace **pFace3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DMesh )( 
            IGcadBlock * This,
            /* [in] */ int M,
            /* [in] */ int N,
            /* [in] */ VARIANT PointsMatrix,
            /* [retval][out] */ IGcadPolygonMesh **pMesh3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DPoly )( 
            IGcadBlock * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcad3DPolyline **pPoly3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddArc )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double StartAngle,
            /* [in] */ double EndAngle,
            /* [retval][out] */ IGcadArc **pArc);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IGcadBlock * This,
            /* [in] */ double Height,
            /* [in] */ GcAttributeMode Mode,
            /* [in] */ BSTR Prompt,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Tag,
            /* [in] */ BSTR Value,
            /* [retval][out] */ IGcadAttribute **pAttr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddBox )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Origin,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pBox);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCircle )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcadCircle **pCircle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCone )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double BaseRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCylinder )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAligned )( 
            IGcadBlock * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT TextPosition,
            /* [retval][out] */ IGcadDimAligned **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAngular )( 
            IGcadBlock * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDimAngular **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )( 
            IGcadBlock * This,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT FarChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimDiametric **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRotated )( 
            IGcadBlock * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT DimLineLocation,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadDimRotated **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )( 
            IGcadBlock * This,
            /* [in] */ VARIANT DefinitionPoint,
            /* [in] */ VARIANT LeaderEndPoint,
            /* [in] */ int UseXAxis,
            /* [retval][out] */ IGcadDimOrdinate **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadial )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimRadial **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipse )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT MajorAxis,
            /* [in] */ double RadiusRatio,
            /* [retval][out] */ IGcadEllipse **pEllipse);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )( 
            IGcadBlock * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ double Height,
            /* [in] */ double TaperAngle,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )( 
            IGcadBlock * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ IDispatch *Path,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeader )( 
            IGcadBlock * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ IGcadEntity *Annotation,
            /* [in] */ GcLeaderType Type,
            /* [retval][out] */ IGcadLeader **pLeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMText )( 
            IGcadBlock * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Width,
            /* [in] */ BSTR Text,
            /* [retval][out] */ IGcadMText **pMtext);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPoint )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Point,
            /* [retval][out] */ IGcadPoint **pPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )( 
            IGcadBlock * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadLWPolyline **pLWPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            IGcadBlock * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadPolyline **pPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRay )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadRay **pRay);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRegion )( 
            IGcadBlock * This,
            /* [in] */ VARIANT ObjectList,
            /* [retval][out] */ VARIANT *pRegions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )( 
            IGcadBlock * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ VARIANT AxisPoint,
            /* [in] */ VARIANT AxisDir,
            /* [in] */ double Angle,
            /* [retval][out] */ IGcad3DSolid **pRevolSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            IGcadBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadShape **pShape);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSolid )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcadSolid **pSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSphere )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcad3DSolid **pSphere);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSpline )( 
            IGcadBlock * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ VARIANT StartTangent,
            /* [in] */ VARIANT EndTangent,
            /* [retval][out] */ IGcadSpline **pSpline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddText )( 
            IGcadBlock * This,
            /* [in] */ BSTR TextString,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadText **pText);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTolerance )( 
            IGcadBlock * This,
            /* [in] */ BSTR Text,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ VARIANT Direction,
            /* [retval][out] */ IGcadTolerance **pTolerance);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTorus )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double TorusRadius,
            /* [in] */ double TubeRadius,
            /* [retval][out] */ IGcad3DSolid **pTorus);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTrace )( 
            IGcadBlock * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcadTrace **pTrace);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddWedge )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pWedge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddXline )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadXline **pXline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBlock )( 
            IGcadBlock * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadBlockReference **pBlkRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddHatch )( 
            IGcadBlock * This,
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName,
            /* [in] */ VARIANT_BOOL Associativity,
            /* [optional][in] */ VARIANT HatchObjectType,
            /* [retval][out] */ IGcadHatch **pHatch);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRaster )( 
            IGcadBlock * This,
            /* [in] */ BSTR imageFileName,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadRasterImage **pRaster);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            IGcadBlock * This,
            /* [in] */ VARIANT StartPoint,
            /* [in] */ VARIANT EndPoint,
            /* [retval][out] */ IGcadLine **pLine);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLayout )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bIsLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            IGcadBlock * This,
            /* [retval][out] */ IGcadLayout **pLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsXRef )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT_BOOL *pIsXRref);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )( 
            IGcadBlock * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [in] */ long RowSpacing,
            /* [in] */ long ColumnSpacing,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadMInsertBlock **pMInsertBlk);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )( 
            IGcadBlock * This,
            /* [in] */ VARIANT VertexList,
            /* [in] */ VARIANT FaceList,
            /* [retval][out] */ IGcadPolyfaceMesh **pPFMesh);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLine )( 
            IGcadBlock * This,
            /* [in] */ VARIANT VertexList,
            /* [retval][out] */ IGcadMLine **pMLine);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )( 
            IGcadBlock * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDim3PointAngular **pDim);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )( 
            IGcadBlock * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )( 
            IGcadBlock * This,
            /* [in] */ BSTR PathName,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ VARIANT_BOOL bOverlay,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadExternalReference **pXRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Unload )( 
            IGcadBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            IGcadBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Bind )( 
            IGcadBlock * This,
            /* [in] */ VARIANT_BOOL bPrefixName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IGcadBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTable )( 
            IGcadBlock * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [in] */ double RowHeight,
            /* [in] */ double ColWidth,
            /* [retval][out] */ IGcadTable **pTable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IGcadBlock * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IGcadBlock * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            IGcadBlock * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comments )( 
            IGcadBlock * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Units )( 
            IGcadBlock * This,
            /* [retval][out] */ GcInsertUnits *pIU);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Units )( 
            IGcadBlock * This,
            /* [in] */ GcInsertUnits pIU);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Explodable )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bExplodable);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Explodable )( 
            IGcadBlock * This,
            /* [in] */ VARIANT_BOOL bExplodable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )( 
            IGcadBlock * This,
            /* [retval][out] */ GcBlockScaling *pBS);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )( 
            IGcadBlock * This,
            /* [in] */ GcBlockScaling pBS);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadBlock * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimArc )( 
            IGcadBlock * This,
            /* [in] */ VARIANT ArcCenter,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT ArcPoint,
            /* [retval][out] */ IGcadDimArcLength **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )( 
            IGcadBlock * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT OverrideCenter,
            /* [in] */ VARIANT JogPoint,
            /* [in] */ double JogAngle,
            /* [retval][out] */ IGcadDimRadialLarge **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSection )( 
            IGcadBlock * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint,
            /* [in] */ VARIANT planeVector,
            /* [retval][out] */ IGcadSection **ppSecPlane);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLeader )( 
            IGcadBlock * This,
            /* [in] */ VARIANT PointsArray,
            /* [out] */ int *leaderLineIndex,
            /* [retval][out] */ IGcadMLeader **pMLeader);
        
        END_INTERFACE
    } IGcadBlockVtbl;

    interface IGcadBlock
    {
        CONST_VTBL struct IGcadBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadBlock_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadBlock_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadBlock_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadBlock_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadBlock_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadBlock_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadBlock_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadBlock_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadBlock_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadBlock_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadBlock_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadBlock_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadBlock_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadBlock_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadBlock_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadBlock_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadBlock_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadBlock_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadBlock_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadBlock_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadBlock_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadBlock_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadBlock_AddCustomObject(This,ClassName,pObject)	\
    ( (This)->lpVtbl -> AddCustomObject(This,ClassName,pObject) ) 

#define IGcadBlock_Add3DFace(This,Point1,Point2,point3,Point4,pFace3d)	\
    ( (This)->lpVtbl -> Add3DFace(This,Point1,Point2,point3,Point4,pFace3d) ) 

#define IGcadBlock_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ( (This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d) ) 

#define IGcadBlock_Add3DPoly(This,PointsArray,pPoly3d)	\
    ( (This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d) ) 

#define IGcadBlock_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ( (This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc) ) 

#define IGcadBlock_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ( (This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr) ) 

#define IGcadBlock_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ( (This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox) ) 

#define IGcadBlock_AddCircle(This,Center,Radius,pCircle)	\
    ( (This)->lpVtbl -> AddCircle(This,Center,Radius,pCircle) ) 

#define IGcadBlock_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ( (This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone) ) 

#define IGcadBlock_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ( (This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl) ) 

#define IGcadBlock_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ( (This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim) ) 

#define IGcadBlock_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadBlock_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim) ) 

#define IGcadBlock_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim) ) 

#define IGcadBlock_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ( (This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim) ) 

#define IGcadBlock_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim) ) 

#define IGcadBlock_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ( (This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse) ) 

#define IGcadBlock_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ( (This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone) ) 

#define IGcadBlock_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ( (This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl) ) 

#define IGcadBlock_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid) ) 

#define IGcadBlock_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid) ) 

#define IGcadBlock_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ( (This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader) ) 

#define IGcadBlock_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ( (This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext) ) 

#define IGcadBlock_AddPoint(This,Point,pPoint)	\
    ( (This)->lpVtbl -> AddPoint(This,Point,pPoint) ) 

#define IGcadBlock_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ( (This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline) ) 

#define IGcadBlock_AddPolyline(This,VerticesList,pPolyline)	\
    ( (This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline) ) 

#define IGcadBlock_AddRay(This,Point1,Point2,pRay)	\
    ( (This)->lpVtbl -> AddRay(This,Point1,Point2,pRay) ) 

#define IGcadBlock_AddRegion(This,ObjectList,pRegions)	\
    ( (This)->lpVtbl -> AddRegion(This,ObjectList,pRegions) ) 

#define IGcadBlock_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ( (This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid) ) 

#define IGcadBlock_AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape)	\
    ( (This)->lpVtbl -> AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape) ) 

#define IGcadBlock_AddSolid(This,Point1,Point2,point3,Point4,pSolid)	\
    ( (This)->lpVtbl -> AddSolid(This,Point1,Point2,point3,Point4,pSolid) ) 

#define IGcadBlock_AddSphere(This,Center,Radius,pSphere)	\
    ( (This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere) ) 

#define IGcadBlock_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ( (This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline) ) 

#define IGcadBlock_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ( (This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText) ) 

#define IGcadBlock_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ( (This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance) ) 

#define IGcadBlock_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ( (This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus) ) 

#define IGcadBlock_AddTrace(This,PointsArray,pTrace)	\
    ( (This)->lpVtbl -> AddTrace(This,PointsArray,pTrace) ) 

#define IGcadBlock_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ( (This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge) ) 

#define IGcadBlock_AddXline(This,Point1,Point2,pXline)	\
    ( (This)->lpVtbl -> AddXline(This,Point1,Point2,pXline) ) 

#define IGcadBlock_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ( (This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef) ) 

#define IGcadBlock_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ( (This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch) ) 

#define IGcadBlock_AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ( (This)->lpVtbl -> AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster) ) 

#define IGcadBlock_AddLine(This,StartPoint,EndPoint,pLine)	\
    ( (This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine) ) 

#define IGcadBlock_get_IsLayout(This,bIsLayout)	\
    ( (This)->lpVtbl -> get_IsLayout(This,bIsLayout) ) 

#define IGcadBlock_get_Layout(This,pLayout)	\
    ( (This)->lpVtbl -> get_Layout(This,pLayout) ) 

#define IGcadBlock_get_IsXRef(This,pIsXRref)	\
    ( (This)->lpVtbl -> get_IsXRef(This,pIsXRref) ) 

#define IGcadBlock_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ( (This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk) ) 

#define IGcadBlock_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ( (This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh) ) 

#define IGcadBlock_AddMLine(This,VertexList,pMLine)	\
    ( (This)->lpVtbl -> AddMLine(This,VertexList,pMLine) ) 

#define IGcadBlock_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadBlock_get_XRefDatabase(This,pDatabase)	\
    ( (This)->lpVtbl -> get_XRefDatabase(This,pDatabase) ) 

#define IGcadBlock_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ( (This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef) ) 

#define IGcadBlock_Unload(This)	\
    ( (This)->lpVtbl -> Unload(This) ) 

#define IGcadBlock_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define IGcadBlock_Bind(This,bPrefixName)	\
    ( (This)->lpVtbl -> Bind(This,bPrefixName) ) 

#define IGcadBlock_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#define IGcadBlock_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ( (This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable) ) 

#define IGcadBlock_get_Path(This,bstrName)	\
    ( (This)->lpVtbl -> get_Path(This,bstrName) ) 

#define IGcadBlock_put_Path(This,bstrName)	\
    ( (This)->lpVtbl -> put_Path(This,bstrName) ) 

#define IGcadBlock_get_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> get_Comments(This,bstrName) ) 

#define IGcadBlock_put_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> put_Comments(This,bstrName) ) 

#define IGcadBlock_get_Units(This,pIU)	\
    ( (This)->lpVtbl -> get_Units(This,pIU) ) 

#define IGcadBlock_put_Units(This,pIU)	\
    ( (This)->lpVtbl -> put_Units(This,pIU) ) 

#define IGcadBlock_get_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> get_Explodable(This,bExplodable) ) 

#define IGcadBlock_put_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> put_Explodable(This,bExplodable) ) 

#define IGcadBlock_get_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> get_BlockScaling(This,pBS) ) 

#define IGcadBlock_put_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> put_BlockScaling(This,pBS) ) 

#define IGcadBlock_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadBlock_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim) ) 

#define IGcadBlock_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim) ) 

#define IGcadBlock_AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane)	\
    ( (This)->lpVtbl -> AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane) ) 

#define IGcadBlock_AddMLeader(This,PointsArray,leaderLineIndex,pMLeader)	\
    ( (This)->lpVtbl -> AddMLeader(This,PointsArray,leaderLineIndex,pMLeader) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadBlock_INTERFACE_DEFINED__ */


#ifndef __IGcadHyperlinks_INTERFACE_DEFINED__
#define __IGcadHyperlinks_INTERFACE_DEFINED__

/* interface IGcadHyperlinks */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadHyperlinks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("260082FD-4C29-44DA-B434-22AA2D8438AD")
    IGcadHyperlinks : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IGcadHyperlink **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ApplicationObject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT Description,
            /* [optional][in] */ VARIANT NamedLocation,
            /* [retval][out] */ IGcadHyperlink **pHyperlink) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadHyperlinksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadHyperlinks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadHyperlinks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadHyperlinks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadHyperlinks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadHyperlinks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadHyperlinks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadHyperlinks * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadHyperlinks * This,
            /* [in] */ long Index,
            /* [retval][out] */ IGcadHyperlink **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadHyperlinks * This,
            /* [retval][out] */ long *pVal);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadHyperlinks * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadHyperlinks * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadHyperlinks * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT Description,
            /* [optional][in] */ VARIANT NamedLocation,
            /* [retval][out] */ IGcadHyperlink **pHyperlink);
        
        END_INTERFACE
    } IGcadHyperlinksVtbl;

    interface IGcadHyperlinks
    {
        CONST_VTBL struct IGcadHyperlinksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadHyperlinks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadHyperlinks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadHyperlinks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadHyperlinks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadHyperlinks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadHyperlinks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadHyperlinks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadHyperlinks_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadHyperlinks_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadHyperlinks_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadHyperlinks_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadHyperlinks_Add(This,Name,Description,NamedLocation,pHyperlink)	\
    ( (This)->lpVtbl -> Add(This,Name,Description,NamedLocation,pHyperlink) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadHyperlinks_INTERFACE_DEFINED__ */


#ifndef __IGcadHyperlink_INTERFACE_DEFINED__
#define __IGcadHyperlink_INTERFACE_DEFINED__

/* interface IGcadHyperlink */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadHyperlink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B275727D-7919-4D3C-B31E-B0C0D6B2DF47")
    IGcadHyperlink : public IDispatch
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_URL( 
            /* [in] */ BSTR URLPath) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [retval][out] */ BSTR *URLPath) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_URLDescription( 
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_URLDescription( 
            /* [retval][out] */ BSTR *Description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ApplicationObject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_URLNamedLocation( 
            /* [in] */ BSTR Location) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_URLNamedLocation( 
            /* [retval][out] */ BSTR *Location) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadHyperlinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadHyperlink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadHyperlink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadHyperlink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadHyperlink * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadHyperlink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadHyperlink * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadHyperlink * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IGcadHyperlink * This,
            /* [in] */ BSTR URLPath);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IGcadHyperlink * This,
            /* [retval][out] */ BSTR *URLPath);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URLDescription )( 
            IGcadHyperlink * This,
            /* [in] */ BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URLDescription )( 
            IGcadHyperlink * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadHyperlink * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadHyperlink * This);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URLNamedLocation )( 
            IGcadHyperlink * This,
            /* [in] */ BSTR Location);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URLNamedLocation )( 
            IGcadHyperlink * This,
            /* [retval][out] */ BSTR *Location);
        
        END_INTERFACE
    } IGcadHyperlinkVtbl;

    interface IGcadHyperlink
    {
        CONST_VTBL struct IGcadHyperlinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadHyperlink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadHyperlink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadHyperlink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadHyperlink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadHyperlink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadHyperlink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadHyperlink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadHyperlink_put_URL(This,URLPath)	\
    ( (This)->lpVtbl -> put_URL(This,URLPath) ) 

#define IGcadHyperlink_get_URL(This,URLPath)	\
    ( (This)->lpVtbl -> get_URL(This,URLPath) ) 

#define IGcadHyperlink_put_URLDescription(This,Description)	\
    ( (This)->lpVtbl -> put_URLDescription(This,Description) ) 

#define IGcadHyperlink_get_URLDescription(This,Description)	\
    ( (This)->lpVtbl -> get_URLDescription(This,Description) ) 

#define IGcadHyperlink_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadHyperlink_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadHyperlink_put_URLNamedLocation(This,Location)	\
    ( (This)->lpVtbl -> put_URLNamedLocation(This,Location) ) 

#define IGcadHyperlink_get_URLNamedLocation(This,Location)	\
    ( (This)->lpVtbl -> get_URLNamedLocation(This,Location) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadHyperlink_INTERFACE_DEFINED__ */


#ifndef __IGcad3DFace_INTERFACE_DEFINED__
#define __IGcad3DFace_INTERFACE_DEFINED__

/* interface IGcad3DFace */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcad3DFace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("043DED63-4DE4-4462-9260-8EFCFCD2B121")
    IGcad3DFace : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *corners) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT corners) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibilityEdge1( 
            /* [retval][out] */ VARIANT_BOOL *visibility) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibilityEdge1( 
            /* [in] */ VARIANT_BOOL visibility) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibilityEdge2( 
            /* [retval][out] */ VARIANT_BOOL *visibility) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibilityEdge2( 
            /* [in] */ VARIANT_BOOL visibility) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibilityEdge3( 
            /* [retval][out] */ VARIANT_BOOL *visibility) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibilityEdge3( 
            /* [in] */ VARIANT_BOOL visibility) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibilityEdge4( 
            /* [retval][out] */ VARIANT_BOOL *visibility) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibilityEdge4( 
            /* [in] */ VARIANT_BOOL visibility) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetInvisibleEdge( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT_BOOL *bVisible) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetInvisibleEdge( 
            /* [in] */ int Index,
            /* [in] */ VARIANT_BOOL State) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcad3DFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcad3DFace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcad3DFace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcad3DFace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcad3DFace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcad3DFace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcad3DFace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcad3DFace * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcad3DFace * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcad3DFace * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcad3DFace * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcad3DFace * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcad3DFace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcad3DFace * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcad3DFace * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcad3DFace * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcad3DFace * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcad3DFace * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcad3DFace * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcad3DFace * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcad3DFace * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcad3DFace * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcad3DFace * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcad3DFace * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcad3DFace * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcad3DFace * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcad3DFace * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcad3DFace * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcad3DFace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcad3DFace * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcad3DFace * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcad3DFace * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcad3DFace * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcad3DFace * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcad3DFace * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcad3DFace * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcad3DFace * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcad3DFace * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcad3DFace * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcad3DFace * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcad3DFace * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT *corners);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT corners);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge1 )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *visibility);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge1 )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL visibility);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge2 )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *visibility);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge2 )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL visibility);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge3 )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *visibility);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge3 )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL visibility);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge4 )( 
            IGcad3DFace * This,
            /* [retval][out] */ VARIANT_BOOL *visibility);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge4 )( 
            IGcad3DFace * This,
            /* [in] */ VARIANT_BOOL visibility);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetInvisibleEdge )( 
            IGcad3DFace * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetInvisibleEdge )( 
            IGcad3DFace * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT_BOOL State);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcad3DFace * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcad3DFace * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        END_INTERFACE
    } IGcad3DFaceVtbl;

    interface IGcad3DFace
    {
        CONST_VTBL struct IGcad3DFaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcad3DFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcad3DFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcad3DFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcad3DFace_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcad3DFace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcad3DFace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcad3DFace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcad3DFace_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcad3DFace_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcad3DFace_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcad3DFace_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcad3DFace_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcad3DFace_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcad3DFace_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcad3DFace_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcad3DFace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcad3DFace_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcad3DFace_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcad3DFace_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcad3DFace_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcad3DFace_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcad3DFace_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcad3DFace_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcad3DFace_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcad3DFace_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcad3DFace_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcad3DFace_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcad3DFace_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcad3DFace_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcad3DFace_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcad3DFace_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcad3DFace_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcad3DFace_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcad3DFace_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcad3DFace_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcad3DFace_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcad3DFace_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcad3DFace_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcad3DFace_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcad3DFace_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcad3DFace_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcad3DFace_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcad3DFace_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcad3DFace_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcad3DFace_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcad3DFace_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcad3DFace_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcad3DFace_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcad3DFace_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcad3DFace_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcad3DFace_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcad3DFace_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcad3DFace_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcad3DFace_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcad3DFace_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcad3DFace_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcad3DFace_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcad3DFace_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcad3DFace_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcad3DFace_get_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> get_Coordinates(This,corners) ) 

#define IGcad3DFace_put_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> put_Coordinates(This,corners) ) 

#define IGcad3DFace_get_VisibilityEdge1(This,visibility)	\
    ( (This)->lpVtbl -> get_VisibilityEdge1(This,visibility) ) 

#define IGcad3DFace_put_VisibilityEdge1(This,visibility)	\
    ( (This)->lpVtbl -> put_VisibilityEdge1(This,visibility) ) 

#define IGcad3DFace_get_VisibilityEdge2(This,visibility)	\
    ( (This)->lpVtbl -> get_VisibilityEdge2(This,visibility) ) 

#define IGcad3DFace_put_VisibilityEdge2(This,visibility)	\
    ( (This)->lpVtbl -> put_VisibilityEdge2(This,visibility) ) 

#define IGcad3DFace_get_VisibilityEdge3(This,visibility)	\
    ( (This)->lpVtbl -> get_VisibilityEdge3(This,visibility) ) 

#define IGcad3DFace_put_VisibilityEdge3(This,visibility)	\
    ( (This)->lpVtbl -> put_VisibilityEdge3(This,visibility) ) 

#define IGcad3DFace_get_VisibilityEdge4(This,visibility)	\
    ( (This)->lpVtbl -> get_VisibilityEdge4(This,visibility) ) 

#define IGcad3DFace_put_VisibilityEdge4(This,visibility)	\
    ( (This)->lpVtbl -> put_VisibilityEdge4(This,visibility) ) 

#define IGcad3DFace_GetInvisibleEdge(This,Index,bVisible)	\
    ( (This)->lpVtbl -> GetInvisibleEdge(This,Index,bVisible) ) 

#define IGcad3DFace_SetInvisibleEdge(This,Index,State)	\
    ( (This)->lpVtbl -> SetInvisibleEdge(This,Index,State) ) 

#define IGcad3DFace_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcad3DFace_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcad3DFace_INTERFACE_DEFINED__ */


#ifndef __IGcadPolygonMesh_INTERFACE_DEFINED__
#define __IGcadPolygonMesh_INTERFACE_DEFINED__

/* interface IGcadPolygonMesh */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPolygonMesh;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68AFCC76-3763-4E13-9BA6-AFFE23E0B0D1")
    IGcadPolygonMesh : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MClose( 
            /* [retval][out] */ VARIANT_BOOL *bClose) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MClose( 
            /* [in] */ VARIANT_BOOL bClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NClose( 
            /* [retval][out] */ VARIANT_BOOL *bClose) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_NClose( 
            /* [in] */ VARIANT_BOOL bClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MDensity( 
            /* [retval][out] */ long *density) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MDensity( 
            /* [in] */ long density) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NDensity( 
            /* [retval][out] */ long *density) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_NDensity( 
            /* [in] */ long density) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MVertexCount( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NVertexCount( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ GcPolymeshType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ GcPolymeshType Type) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendVertex( 
            /* [in] */ VARIANT vertex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPolygonMeshVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPolygonMesh * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPolygonMesh * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPolygonMesh * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPolygonMesh * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPolygonMesh * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPolygonMesh * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPolygonMesh * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPolygonMesh * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPolygonMesh * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadPolygonMesh * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadPolygonMesh * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadPolygonMesh * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadPolygonMesh * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadPolygonMesh * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadPolygonMesh * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadPolygonMesh * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadPolygonMesh * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadPolygonMesh * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadPolygonMesh * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MClose )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bClose);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MClose )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT_BOOL bClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NClose )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bClose);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NClose )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT_BOOL bClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MDensity )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *density);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MDensity )( 
            IGcadPolygonMesh * This,
            /* [in] */ long density);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NDensity )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *density);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NDensity )( 
            IGcadPolygonMesh * This,
            /* [in] */ long density);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MVertexCount )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NVertexCount )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ GcPolymeshType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IGcadPolygonMesh * This,
            /* [in] */ GcPolymeshType Type);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendVertex )( 
            IGcadPolygonMesh * This,
            /* [in] */ VARIANT vertex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadPolygonMesh * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadPolygonMesh * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadPolygonMesh * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        END_INTERFACE
    } IGcadPolygonMeshVtbl;

    interface IGcadPolygonMesh
    {
        CONST_VTBL struct IGcadPolygonMeshVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPolygonMesh_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPolygonMesh_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPolygonMesh_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPolygonMesh_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPolygonMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPolygonMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPolygonMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPolygonMesh_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPolygonMesh_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPolygonMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPolygonMesh_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPolygonMesh_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPolygonMesh_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPolygonMesh_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPolygonMesh_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPolygonMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPolygonMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPolygonMesh_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPolygonMesh_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPolygonMesh_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPolygonMesh_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPolygonMesh_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPolygonMesh_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadPolygonMesh_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadPolygonMesh_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadPolygonMesh_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadPolygonMesh_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadPolygonMesh_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadPolygonMesh_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadPolygonMesh_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadPolygonMesh_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadPolygonMesh_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadPolygonMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadPolygonMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadPolygonMesh_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadPolygonMesh_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadPolygonMesh_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadPolygonMesh_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadPolygonMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadPolygonMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadPolygonMesh_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadPolygonMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadPolygonMesh_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadPolygonMesh_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadPolygonMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadPolygonMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadPolygonMesh_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadPolygonMesh_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadPolygonMesh_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadPolygonMesh_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadPolygonMesh_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadPolygonMesh_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadPolygonMesh_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadPolygonMesh_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadPolygonMesh_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadPolygonMesh_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadPolygonMesh_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadPolygonMesh_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadPolygonMesh_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadPolygonMesh_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcadPolygonMesh_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcadPolygonMesh_get_MClose(This,bClose)	\
    ( (This)->lpVtbl -> get_MClose(This,bClose) ) 

#define IGcadPolygonMesh_put_MClose(This,bClose)	\
    ( (This)->lpVtbl -> put_MClose(This,bClose) ) 

#define IGcadPolygonMesh_get_NClose(This,bClose)	\
    ( (This)->lpVtbl -> get_NClose(This,bClose) ) 

#define IGcadPolygonMesh_put_NClose(This,bClose)	\
    ( (This)->lpVtbl -> put_NClose(This,bClose) ) 

#define IGcadPolygonMesh_get_MDensity(This,density)	\
    ( (This)->lpVtbl -> get_MDensity(This,density) ) 

#define IGcadPolygonMesh_put_MDensity(This,density)	\
    ( (This)->lpVtbl -> put_MDensity(This,density) ) 

#define IGcadPolygonMesh_get_NDensity(This,density)	\
    ( (This)->lpVtbl -> get_NDensity(This,density) ) 

#define IGcadPolygonMesh_put_NDensity(This,density)	\
    ( (This)->lpVtbl -> put_NDensity(This,density) ) 

#define IGcadPolygonMesh_get_MVertexCount(This,Count)	\
    ( (This)->lpVtbl -> get_MVertexCount(This,Count) ) 

#define IGcadPolygonMesh_get_NVertexCount(This,Count)	\
    ( (This)->lpVtbl -> get_NVertexCount(This,Count) ) 

#define IGcadPolygonMesh_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IGcadPolygonMesh_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define IGcadPolygonMesh_AppendVertex(This,vertex)	\
    ( (This)->lpVtbl -> AppendVertex(This,vertex) ) 

#define IGcadPolygonMesh_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadPolygonMesh_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadPolygonMesh_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPolygonMesh_INTERFACE_DEFINED__ */


#ifndef __IGcad3DPolyline_INTERFACE_DEFINED__
#define __IGcad3DPolyline_INTERFACE_DEFINED__

/* interface IGcad3DPolyline */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcad3DPolyline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1803FD1A-DFB5-4F3B-B009-E8F5F60F6D27")
    IGcad3DPolyline : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendVertex( 
            /* [in] */ VARIANT vertex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ Gc3DPolylineType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ Gc3DPolylineType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ VARIANT_BOOL *fClose) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Closed( 
            /* [in] */ VARIANT_BOOL fClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ double *Length) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcad3DPolylineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcad3DPolyline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcad3DPolyline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcad3DPolyline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcad3DPolyline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcad3DPolyline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcad3DPolyline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcad3DPolyline * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcad3DPolyline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcad3DPolyline * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcad3DPolyline * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcad3DPolyline * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcad3DPolyline * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcad3DPolyline * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcad3DPolyline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcad3DPolyline * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcad3DPolyline * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcad3DPolyline * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcad3DPolyline * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcad3DPolyline * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendVertex )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT vertex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcad3DPolyline * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcad3DPolyline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ Gc3DPolylineType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IGcad3DPolyline * This,
            /* [in] */ Gc3DPolylineType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *fClose);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Closed )( 
            IGcad3DPolyline * This,
            /* [in] */ VARIANT_BOOL fClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IGcad3DPolyline * This,
            /* [retval][out] */ double *Length);
        
        END_INTERFACE
    } IGcad3DPolylineVtbl;

    interface IGcad3DPolyline
    {
        CONST_VTBL struct IGcad3DPolylineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcad3DPolyline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcad3DPolyline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcad3DPolyline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcad3DPolyline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcad3DPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcad3DPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcad3DPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcad3DPolyline_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcad3DPolyline_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcad3DPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcad3DPolyline_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcad3DPolyline_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcad3DPolyline_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcad3DPolyline_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcad3DPolyline_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcad3DPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcad3DPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcad3DPolyline_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcad3DPolyline_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcad3DPolyline_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcad3DPolyline_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcad3DPolyline_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcad3DPolyline_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcad3DPolyline_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcad3DPolyline_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcad3DPolyline_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcad3DPolyline_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcad3DPolyline_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcad3DPolyline_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcad3DPolyline_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcad3DPolyline_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcad3DPolyline_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcad3DPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcad3DPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcad3DPolyline_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcad3DPolyline_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcad3DPolyline_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcad3DPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcad3DPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcad3DPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcad3DPolyline_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcad3DPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcad3DPolyline_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcad3DPolyline_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcad3DPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcad3DPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcad3DPolyline_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcad3DPolyline_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcad3DPolyline_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcad3DPolyline_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcad3DPolyline_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcad3DPolyline_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcad3DPolyline_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcad3DPolyline_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcad3DPolyline_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcad3DPolyline_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcad3DPolyline_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcad3DPolyline_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcad3DPolyline_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcad3DPolyline_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcad3DPolyline_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcad3DPolyline_AppendVertex(This,vertex)	\
    ( (This)->lpVtbl -> AppendVertex(This,vertex) ) 

#define IGcad3DPolyline_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcad3DPolyline_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcad3DPolyline_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcad3DPolyline_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IGcad3DPolyline_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define IGcad3DPolyline_get_Closed(This,fClose)	\
    ( (This)->lpVtbl -> get_Closed(This,fClose) ) 

#define IGcad3DPolyline_put_Closed(This,fClose)	\
    ( (This)->lpVtbl -> put_Closed(This,fClose) ) 

#define IGcad3DPolyline_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcad3DPolyline_INTERFACE_DEFINED__ */


#ifndef __IGcadArc_INTERFACE_DEFINED__
#define __IGcadArc_INTERFACE_DEFINED__

/* interface IGcadArc */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadArc;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AA8ABAEA-4329-4F97-935A-F1639CF760B1")
    IGcadArc : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ VARIANT *StartPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *CenterPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT CenterPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ VARIANT *EndPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Radius( 
            /* [retval][out] */ double *Radius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Radius( 
            /* [in] */ double Radius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartAngle( 
            /* [retval][out] */ GCAD_ANGLE *Angle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartAngle( 
            /* [in] */ GCAD_ANGLE Angle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndAngle( 
            /* [retval][out] */ GCAD_ANGLE *Angle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndAngle( 
            /* [in] */ GCAD_ANGLE Angle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalAngle( 
            /* [retval][out] */ GCAD_ANGLE *TotalAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcLength( 
            /* [retval][out] */ GCAD_DISTANCE *ArcLength) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadArcVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadArc * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadArc * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadArc * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadArc * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadArc * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadArc * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadArc * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadArc * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadArc * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadArc * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadArc * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadArc * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadArc * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadArc * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadArc * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadArc * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadArc * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadArc * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadArc * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadArc * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadArc * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadArc * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadArc * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadArc * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadArc * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadArc * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadArc * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadArc * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadArc * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadArc * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadArc * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadArc * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadArc * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadArc * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadArc * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadArc * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadArc * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadArc * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadArc * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadArc * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadArc * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadArc * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadArc * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadArc * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadArc * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadArc * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadArc * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT *StartPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT *CenterPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadArc * This,
            /* [in] */ VARIANT CenterPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT *EndPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Radius )( 
            IGcadArc * This,
            /* [retval][out] */ double *Radius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Radius )( 
            IGcadArc * This,
            /* [in] */ double Radius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartAngle )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_ANGLE *Angle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartAngle )( 
            IGcadArc * This,
            /* [in] */ GCAD_ANGLE Angle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndAngle )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_ANGLE *Angle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndAngle )( 
            IGcadArc * This,
            /* [in] */ GCAD_ANGLE Angle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalAngle )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_ANGLE *TotalAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcLength )( 
            IGcadArc * This,
            /* [retval][out] */ GCAD_DISTANCE *ArcLength);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadArc * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadArc * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadArc * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadArc * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadArc * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadArc * This,
            /* [in] */ VARIANT Normal);
        
        END_INTERFACE
    } IGcadArcVtbl;

    interface IGcadArc
    {
        CONST_VTBL struct IGcadArcVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadArc_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadArc_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadArc_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadArc_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadArc_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadArc_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadArc_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadArc_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadArc_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadArc_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadArc_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadArc_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadArc_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadArc_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadArc_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadArc_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadArc_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadArc_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadArc_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadArc_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadArc_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadArc_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadArc_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadArc_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadArc_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadArc_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadArc_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadArc_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadArc_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadArc_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadArc_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadArc_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadArc_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadArc_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadArc_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadArc_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadArc_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadArc_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadArc_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadArc_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadArc_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadArc_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadArc_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadArc_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadArc_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadArc_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadArc_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadArc_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadArc_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadArc_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadArc_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadArc_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadArc_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadArc_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadArc_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadArc_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadArc_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadArc_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadArc_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadArc_get_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> get_StartPoint(This,StartPoint) ) 

#define IGcadArc_get_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> get_Center(This,CenterPoint) ) 

#define IGcadArc_put_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> put_Center(This,CenterPoint) ) 

#define IGcadArc_get_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> get_EndPoint(This,EndPoint) ) 

#define IGcadArc_get_Radius(This,Radius)	\
    ( (This)->lpVtbl -> get_Radius(This,Radius) ) 

#define IGcadArc_put_Radius(This,Radius)	\
    ( (This)->lpVtbl -> put_Radius(This,Radius) ) 

#define IGcadArc_get_StartAngle(This,Angle)	\
    ( (This)->lpVtbl -> get_StartAngle(This,Angle) ) 

#define IGcadArc_put_StartAngle(This,Angle)	\
    ( (This)->lpVtbl -> put_StartAngle(This,Angle) ) 

#define IGcadArc_get_EndAngle(This,Angle)	\
    ( (This)->lpVtbl -> get_EndAngle(This,Angle) ) 

#define IGcadArc_put_EndAngle(This,Angle)	\
    ( (This)->lpVtbl -> put_EndAngle(This,Angle) ) 

#define IGcadArc_get_TotalAngle(This,TotalAngle)	\
    ( (This)->lpVtbl -> get_TotalAngle(This,TotalAngle) ) 

#define IGcadArc_get_ArcLength(This,ArcLength)	\
    ( (This)->lpVtbl -> get_ArcLength(This,ArcLength) ) 

#define IGcadArc_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadArc_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadArc_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#define IGcadArc_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadArc_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadArc_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadArc_INTERFACE_DEFINED__ */


#ifndef __IGcadAttribute_INTERFACE_DEFINED__
#define __IGcadAttribute_INTERFACE_DEFINED__

/* interface IGcadAttribute */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F1656AE4-6A82-475B-BA35-C1F2F3587FC1")
    IGcadAttribute : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldLength( 
            /* [retval][out] */ long *fieldLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FieldLength( 
            /* [in] */ long fieldLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TagString( 
            /* [retval][out] */ BSTR *Tag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TagString( 
            /* [in] */ BSTR Tag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PromptString( 
            /* [retval][out] */ BSTR *bstrPrompt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PromptString( 
            /* [in] */ BSTR bstrPrompt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ GcAlignment *align) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ GcAlignment align) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ GcHorizontalAlignment *horizAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ GcHorizontalAlignment horizAlign) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ GcVerticalAlignment *vertiAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ GcVerticalAlignment vertiAlign) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *scalFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS scalFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObliqueAngle( 
            /* [retval][out] */ GCAD_ANGLE *obliAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObliqueAngle( 
            /* [in] */ GCAD_ANGLE obliAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint( 
            /* [retval][out] */ VARIANT *alignPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint( 
            /* [in] */ VARIANT alignPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGenerationFlag( 
            /* [retval][out] */ long *textGenFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGenerationFlag( 
            /* [in] */ long textGenFlag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ long *Mode) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Mode( 
            /* [in] */ long Mode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpsideDown( 
            /* [retval][out] */ VARIANT_BOOL *bUpsideDown) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpsideDown( 
            /* [in] */ VARIANT_BOOL bUpsideDown) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backward( 
            /* [retval][out] */ VARIANT_BOOL *bBackward) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backward( 
            /* [in] */ VARIANT_BOOL bBackward) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Invisible( 
            /* [retval][out] */ VARIANT_BOOL *bInvisible) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Invisible( 
            /* [in] */ VARIANT_BOOL bInvisible) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Constant( 
            /* [retval][out] */ VARIANT_BOOL *bConstant) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Constant( 
            /* [in] */ VARIANT_BOOL bConstant) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Verify( 
            /* [retval][out] */ VARIANT_BOOL *bVerify) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Verify( 
            /* [in] */ VARIANT_BOOL bVerify) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Preset( 
            /* [retval][out] */ VARIANT_BOOL *bPreset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Preset( 
            /* [in] */ VARIANT_BOOL bPreset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockPosition( 
            /* [retval][out] */ VARIANT_BOOL *bLockPosition) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockPosition( 
            /* [in] */ VARIANT_BOOL bLockPosition) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MTextAttribute( 
            /* [retval][out] */ VARIANT_BOOL *bMTextAttribute) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MTextAttribute( 
            /* [in] */ VARIANT_BOOL bMTextAttribute) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MTextAttributeContent( 
            /* [retval][out] */ BSTR *content) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MTextAttributeContent( 
            /* [in] */ BSTR content) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UpdateMTextAttribute( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MTextBoundaryWidth( 
            /* [retval][out] */ double *boundaryWidth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MTextBoundaryWidth( 
            double boundaryWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MTextDrawingDirection( 
            /* [retval][out] */ GcDrawingDirection *drawDir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MTextDrawingDirection( 
            /* [in] */ GcDrawingDirection drawDir) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAttribute * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadAttribute * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAttribute * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadAttribute * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadAttribute * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadAttribute * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadAttribute * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadAttribute * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadAttribute * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadAttribute * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadAttribute * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadAttribute * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadAttribute * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadAttribute * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadAttribute * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadAttribute * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadAttribute * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadAttribute * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadAttribute * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadAttribute * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadAttribute * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadAttribute * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadAttribute * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadAttribute * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadAttribute * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadAttribute * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadAttribute * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldLength )( 
            IGcadAttribute * This,
            /* [retval][out] */ long *fieldLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FieldLength )( 
            IGcadAttribute * This,
            /* [in] */ long fieldLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TagString )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Tag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TagString )( 
            IGcadAttribute * This,
            /* [in] */ BSTR Tag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PromptString )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *bstrPrompt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PromptString )( 
            IGcadAttribute * This,
            /* [in] */ BSTR bstrPrompt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadAttribute * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadAttribute * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            IGcadAttribute * This,
            /* [retval][out] */ GcAlignment *align);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            IGcadAttribute * This,
            /* [in] */ GcAlignment align);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            IGcadAttribute * This,
            /* [retval][out] */ GcHorizontalAlignment *horizAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            IGcadAttribute * This,
            /* [in] */ GcHorizontalAlignment horizAlign);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            IGcadAttribute * This,
            /* [retval][out] */ GcVerticalAlignment *vertiAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            IGcadAttribute * This,
            /* [in] */ GcVerticalAlignment vertiAlign);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadAttribute * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadAttribute * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_NOUNITS *scalFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_NOUNITS scalFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )( 
            IGcadAttribute * This,
            /* [retval][out] */ GCAD_ANGLE *obliAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )( 
            IGcadAttribute * This,
            /* [in] */ GCAD_ANGLE obliAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT *alignPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT alignPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )( 
            IGcadAttribute * This,
            /* [retval][out] */ long *textGenFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )( 
            IGcadAttribute * This,
            /* [in] */ long textGenFlag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadAttribute * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadAttribute * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            IGcadAttribute * This,
            /* [retval][out] */ long *Mode);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            IGcadAttribute * This,
            /* [in] */ long Mode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bUpsideDown);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bUpsideDown);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backward )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bBackward);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backward )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bBackward);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Invisible )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bInvisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Invisible )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bInvisible);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Constant )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bConstant);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Constant )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bConstant);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Verify )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bVerify);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Verify )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bVerify);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Preset )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bPreset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Preset )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bPreset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockPosition )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bLockPosition);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockPosition )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bLockPosition);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MTextAttribute )( 
            IGcadAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *bMTextAttribute);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MTextAttribute )( 
            IGcadAttribute * This,
            /* [in] */ VARIANT_BOOL bMTextAttribute);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MTextAttributeContent )( 
            IGcadAttribute * This,
            /* [retval][out] */ BSTR *content);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MTextAttributeContent )( 
            IGcadAttribute * This,
            /* [in] */ BSTR content);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateMTextAttribute )( 
            IGcadAttribute * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MTextBoundaryWidth )( 
            IGcadAttribute * This,
            /* [retval][out] */ double *boundaryWidth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MTextBoundaryWidth )( 
            IGcadAttribute * This,
            double boundaryWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MTextDrawingDirection )( 
            IGcadAttribute * This,
            /* [retval][out] */ GcDrawingDirection *drawDir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MTextDrawingDirection )( 
            IGcadAttribute * This,
            /* [in] */ GcDrawingDirection drawDir);
        
        END_INTERFACE
    } IGcadAttributeVtbl;

    interface IGcadAttribute
    {
        CONST_VTBL struct IGcadAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAttribute_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAttribute_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadAttribute_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadAttribute_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadAttribute_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadAttribute_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAttribute_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadAttribute_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadAttribute_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadAttribute_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadAttribute_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadAttribute_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadAttribute_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadAttribute_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadAttribute_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadAttribute_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadAttribute_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadAttribute_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadAttribute_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadAttribute_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadAttribute_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadAttribute_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadAttribute_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadAttribute_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadAttribute_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadAttribute_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadAttribute_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadAttribute_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadAttribute_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadAttribute_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadAttribute_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadAttribute_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadAttribute_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadAttribute_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadAttribute_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadAttribute_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadAttribute_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadAttribute_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadAttribute_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadAttribute_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadAttribute_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadAttribute_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadAttribute_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadAttribute_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadAttribute_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadAttribute_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadAttribute_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadAttribute_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadAttribute_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadAttribute_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadAttribute_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadAttribute_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadAttribute_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadAttribute_get_FieldLength(This,fieldLen)	\
    ( (This)->lpVtbl -> get_FieldLength(This,fieldLen) ) 

#define IGcadAttribute_put_FieldLength(This,fieldLen)	\
    ( (This)->lpVtbl -> put_FieldLength(This,fieldLen) ) 

#define IGcadAttribute_get_TagString(This,Tag)	\
    ( (This)->lpVtbl -> get_TagString(This,Tag) ) 

#define IGcadAttribute_put_TagString(This,Tag)	\
    ( (This)->lpVtbl -> put_TagString(This,Tag) ) 

#define IGcadAttribute_get_PromptString(This,bstrPrompt)	\
    ( (This)->lpVtbl -> get_PromptString(This,bstrPrompt) ) 

#define IGcadAttribute_put_PromptString(This,bstrPrompt)	\
    ( (This)->lpVtbl -> put_PromptString(This,bstrPrompt) ) 

#define IGcadAttribute_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadAttribute_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadAttribute_get_StyleName(This,Name)	\
    ( (This)->lpVtbl -> get_StyleName(This,Name) ) 

#define IGcadAttribute_put_StyleName(This,Name)	\
    ( (This)->lpVtbl -> put_StyleName(This,Name) ) 

#define IGcadAttribute_get_Alignment(This,align)	\
    ( (This)->lpVtbl -> get_Alignment(This,align) ) 

#define IGcadAttribute_put_Alignment(This,align)	\
    ( (This)->lpVtbl -> put_Alignment(This,align) ) 

#define IGcadAttribute_get_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign) ) 

#define IGcadAttribute_put_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign) ) 

#define IGcadAttribute_get_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign) ) 

#define IGcadAttribute_put_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign) ) 

#define IGcadAttribute_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadAttribute_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadAttribute_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadAttribute_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadAttribute_get_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scalFactor) ) 

#define IGcadAttribute_put_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scalFactor) ) 

#define IGcadAttribute_get_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> get_ObliqueAngle(This,obliAngle) ) 

#define IGcadAttribute_put_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> put_ObliqueAngle(This,obliAngle) ) 

#define IGcadAttribute_get_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadAttribute_put_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadAttribute_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadAttribute_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadAttribute_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadAttribute_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadAttribute_get_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadAttribute_put_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadAttribute_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadAttribute_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadAttribute_get_Mode(This,Mode)	\
    ( (This)->lpVtbl -> get_Mode(This,Mode) ) 

#define IGcadAttribute_put_Mode(This,Mode)	\
    ( (This)->lpVtbl -> put_Mode(This,Mode) ) 

#define IGcadAttribute_get_UpsideDown(This,bUpsideDown)	\
    ( (This)->lpVtbl -> get_UpsideDown(This,bUpsideDown) ) 

#define IGcadAttribute_put_UpsideDown(This,bUpsideDown)	\
    ( (This)->lpVtbl -> put_UpsideDown(This,bUpsideDown) ) 

#define IGcadAttribute_get_Backward(This,bBackward)	\
    ( (This)->lpVtbl -> get_Backward(This,bBackward) ) 

#define IGcadAttribute_put_Backward(This,bBackward)	\
    ( (This)->lpVtbl -> put_Backward(This,bBackward) ) 

#define IGcadAttribute_get_Invisible(This,bInvisible)	\
    ( (This)->lpVtbl -> get_Invisible(This,bInvisible) ) 

#define IGcadAttribute_put_Invisible(This,bInvisible)	\
    ( (This)->lpVtbl -> put_Invisible(This,bInvisible) ) 

#define IGcadAttribute_get_Constant(This,bConstant)	\
    ( (This)->lpVtbl -> get_Constant(This,bConstant) ) 

#define IGcadAttribute_put_Constant(This,bConstant)	\
    ( (This)->lpVtbl -> put_Constant(This,bConstant) ) 

#define IGcadAttribute_get_Verify(This,bVerify)	\
    ( (This)->lpVtbl -> get_Verify(This,bVerify) ) 

#define IGcadAttribute_put_Verify(This,bVerify)	\
    ( (This)->lpVtbl -> put_Verify(This,bVerify) ) 

#define IGcadAttribute_get_Preset(This,bPreset)	\
    ( (This)->lpVtbl -> get_Preset(This,bPreset) ) 

#define IGcadAttribute_put_Preset(This,bPreset)	\
    ( (This)->lpVtbl -> put_Preset(This,bPreset) ) 

#define IGcadAttribute_get_LockPosition(This,bLockPosition)	\
    ( (This)->lpVtbl -> get_LockPosition(This,bLockPosition) ) 

#define IGcadAttribute_put_LockPosition(This,bLockPosition)	\
    ( (This)->lpVtbl -> put_LockPosition(This,bLockPosition) ) 

#define IGcadAttribute_get_MTextAttribute(This,bMTextAttribute)	\
    ( (This)->lpVtbl -> get_MTextAttribute(This,bMTextAttribute) ) 

#define IGcadAttribute_put_MTextAttribute(This,bMTextAttribute)	\
    ( (This)->lpVtbl -> put_MTextAttribute(This,bMTextAttribute) ) 

#define IGcadAttribute_get_MTextAttributeContent(This,content)	\
    ( (This)->lpVtbl -> get_MTextAttributeContent(This,content) ) 

#define IGcadAttribute_put_MTextAttributeContent(This,content)	\
    ( (This)->lpVtbl -> put_MTextAttributeContent(This,content) ) 

#define IGcadAttribute_UpdateMTextAttribute(This)	\
    ( (This)->lpVtbl -> UpdateMTextAttribute(This) ) 

#define IGcadAttribute_get_MTextBoundaryWidth(This,boundaryWidth)	\
    ( (This)->lpVtbl -> get_MTextBoundaryWidth(This,boundaryWidth) ) 

#define IGcadAttribute_put_MTextBoundaryWidth(This,boundaryWidth)	\
    ( (This)->lpVtbl -> put_MTextBoundaryWidth(This,boundaryWidth) ) 

#define IGcadAttribute_get_MTextDrawingDirection(This,drawDir)	\
    ( (This)->lpVtbl -> get_MTextDrawingDirection(This,drawDir) ) 

#define IGcadAttribute_put_MTextDrawingDirection(This,drawDir)	\
    ( (This)->lpVtbl -> put_MTextDrawingDirection(This,drawDir) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAttribute_INTERFACE_DEFINED__ */


#ifndef __IGcad3DSolid_INTERFACE_DEFINED__
#define __IGcad3DSolid_INTERFACE_DEFINED__

/* interface IGcad3DSolid */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcad3DSolid;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("99329C49-4AD2-48B8-A7B0-0C90C659E550")
    IGcad3DSolid : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Centroid( 
            /* [retval][out] */ VARIANT *Centroid) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MomentOfInertia( 
            /* [retval][out] */ VARIANT *momentInertia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrincipalDirections( 
            /* [retval][out] */ VARIANT *prinDir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrincipalMoments( 
            /* [retval][out] */ VARIANT *prinMoments) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProductOfInertia( 
            /* [retval][out] */ VARIANT *prodInertia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RadiiOfGyration( 
            /* [retval][out] */ VARIANT *radiiGyration) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ double *Volume) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Boolean( 
            /* [in] */ GcBooleanType Operation,
            /* [in] */ IGcad3DSolid *SolidObject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CheckInterference( 
            /* [in] */ IGcad3DSolid *Object,
            /* [in] */ VARIANT_BOOL CreateInterferenceSolid,
            /* [retval][out] */ IGcad3DSolid **pIntSolid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SectionSolid( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IGcadRegion **pRegion) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SliceSolid( 
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT_BOOL Negative,
            /* [retval][out] */ IGcad3DSolid **pNegSideSolid) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolidType( 
            /* [retval][out] */ BSTR *SolidType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ VARIANT *Position) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ VARIANT Position) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_History( 
            /* [retval][out] */ VARIANT_BOOL *bHistory) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_History( 
            /* [in] */ VARIANT_BOOL bHistory) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowHistory( 
            /* [retval][out] */ VARIANT_BOOL *Position) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowHistory( 
            /* [in] */ VARIANT_BOOL Position) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcad3DSolidVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcad3DSolid * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcad3DSolid * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcad3DSolid * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcad3DSolid * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcad3DSolid * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcad3DSolid * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcad3DSolid * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcad3DSolid * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcad3DSolid * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcad3DSolid * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcad3DSolid * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcad3DSolid * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcad3DSolid * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcad3DSolid * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcad3DSolid * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcad3DSolid * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcad3DSolid * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcad3DSolid * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcad3DSolid * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcad3DSolid * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcad3DSolid * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcad3DSolid * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcad3DSolid * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcad3DSolid * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcad3DSolid * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcad3DSolid * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcad3DSolid * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcad3DSolid * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Centroid )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *Centroid);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MomentOfInertia )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *momentInertia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrincipalDirections )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *prinDir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrincipalMoments )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *prinMoments);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProductOfInertia )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *prodInertia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RadiiOfGyration )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *radiiGyration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            IGcad3DSolid * This,
            /* [retval][out] */ double *Volume);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Boolean )( 
            IGcad3DSolid * This,
            /* [in] */ GcBooleanType Operation,
            /* [in] */ IGcad3DSolid *SolidObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckInterference )( 
            IGcad3DSolid * This,
            /* [in] */ IGcad3DSolid *Object,
            /* [in] */ VARIANT_BOOL CreateInterferenceSolid,
            /* [retval][out] */ IGcad3DSolid **pIntSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SectionSolid )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IGcadRegion **pRegion);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SliceSolid )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT_BOOL Negative,
            /* [retval][out] */ IGcad3DSolid **pNegSideSolid);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolidType )( 
            IGcad3DSolid * This,
            /* [retval][out] */ BSTR *SolidType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT *Position);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_History )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT_BOOL *bHistory);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_History )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT_BOOL bHistory);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowHistory )( 
            IGcad3DSolid * This,
            /* [retval][out] */ VARIANT_BOOL *Position);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowHistory )( 
            IGcad3DSolid * This,
            /* [in] */ VARIANT_BOOL Position);
        
        END_INTERFACE
    } IGcad3DSolidVtbl;

    interface IGcad3DSolid
    {
        CONST_VTBL struct IGcad3DSolidVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcad3DSolid_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcad3DSolid_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcad3DSolid_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcad3DSolid_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcad3DSolid_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcad3DSolid_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcad3DSolid_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcad3DSolid_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcad3DSolid_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcad3DSolid_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcad3DSolid_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcad3DSolid_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcad3DSolid_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcad3DSolid_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcad3DSolid_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcad3DSolid_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcad3DSolid_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcad3DSolid_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcad3DSolid_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcad3DSolid_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcad3DSolid_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcad3DSolid_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcad3DSolid_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcad3DSolid_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcad3DSolid_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcad3DSolid_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcad3DSolid_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcad3DSolid_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcad3DSolid_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcad3DSolid_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcad3DSolid_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcad3DSolid_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcad3DSolid_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcad3DSolid_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcad3DSolid_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcad3DSolid_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcad3DSolid_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcad3DSolid_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcad3DSolid_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcad3DSolid_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcad3DSolid_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcad3DSolid_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcad3DSolid_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcad3DSolid_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcad3DSolid_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcad3DSolid_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcad3DSolid_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcad3DSolid_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcad3DSolid_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcad3DSolid_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcad3DSolid_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcad3DSolid_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcad3DSolid_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcad3DSolid_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcad3DSolid_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcad3DSolid_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcad3DSolid_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcad3DSolid_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcad3DSolid_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcad3DSolid_get_Centroid(This,Centroid)	\
    ( (This)->lpVtbl -> get_Centroid(This,Centroid) ) 

#define IGcad3DSolid_get_MomentOfInertia(This,momentInertia)	\
    ( (This)->lpVtbl -> get_MomentOfInertia(This,momentInertia) ) 

#define IGcad3DSolid_get_PrincipalDirections(This,prinDir)	\
    ( (This)->lpVtbl -> get_PrincipalDirections(This,prinDir) ) 

#define IGcad3DSolid_get_PrincipalMoments(This,prinMoments)	\
    ( (This)->lpVtbl -> get_PrincipalMoments(This,prinMoments) ) 

#define IGcad3DSolid_get_ProductOfInertia(This,prodInertia)	\
    ( (This)->lpVtbl -> get_ProductOfInertia(This,prodInertia) ) 

#define IGcad3DSolid_get_RadiiOfGyration(This,radiiGyration)	\
    ( (This)->lpVtbl -> get_RadiiOfGyration(This,radiiGyration) ) 

#define IGcad3DSolid_get_Volume(This,Volume)	\
    ( (This)->lpVtbl -> get_Volume(This,Volume) ) 

#define IGcad3DSolid_Boolean(This,Operation,SolidObject)	\
    ( (This)->lpVtbl -> Boolean(This,Operation,SolidObject) ) 

#define IGcad3DSolid_CheckInterference(This,Object,CreateInterferenceSolid,pIntSolid)	\
    ( (This)->lpVtbl -> CheckInterference(This,Object,CreateInterferenceSolid,pIntSolid) ) 

#define IGcad3DSolid_SectionSolid(This,Point1,Point2,point3,pRegion)	\
    ( (This)->lpVtbl -> SectionSolid(This,Point1,Point2,point3,pRegion) ) 

#define IGcad3DSolid_SliceSolid(This,Point1,Point2,point3,Negative,pNegSideSolid)	\
    ( (This)->lpVtbl -> SliceSolid(This,Point1,Point2,point3,Negative,pNegSideSolid) ) 

#define IGcad3DSolid_get_SolidType(This,SolidType)	\
    ( (This)->lpVtbl -> get_SolidType(This,SolidType) ) 

#define IGcad3DSolid_get_Position(This,Position)	\
    ( (This)->lpVtbl -> get_Position(This,Position) ) 

#define IGcad3DSolid_put_Position(This,Position)	\
    ( (This)->lpVtbl -> put_Position(This,Position) ) 

#define IGcad3DSolid_get_History(This,bHistory)	\
    ( (This)->lpVtbl -> get_History(This,bHistory) ) 

#define IGcad3DSolid_put_History(This,bHistory)	\
    ( (This)->lpVtbl -> put_History(This,bHistory) ) 

#define IGcad3DSolid_get_ShowHistory(This,Position)	\
    ( (This)->lpVtbl -> get_ShowHistory(This,Position) ) 

#define IGcad3DSolid_put_ShowHistory(This,Position)	\
    ( (This)->lpVtbl -> put_ShowHistory(This,Position) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcad3DSolid_INTERFACE_DEFINED__ */


#ifndef __IGcadRegion_INTERFACE_DEFINED__
#define __IGcadRegion_INTERFACE_DEFINED__

/* interface IGcadRegion */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadRegion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E14C3F6-C913-49B1-8359-E3A43558513D")
    IGcadRegion : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Centroid( 
            /* [retval][out] */ VARIANT *Centroid) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MomentOfInertia( 
            /* [retval][out] */ VARIANT *momentInertia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Perimeter( 
            /* [retval][out] */ double *Perimeter) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrincipalDirections( 
            /* [retval][out] */ VARIANT *prinDir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrincipalMoments( 
            /* [retval][out] */ VARIANT *prinMoments) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProductOfInertia( 
            /* [retval][out] */ double *prodInertia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RadiiOfGyration( 
            /* [retval][out] */ VARIANT *radiiGyration) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Boolean( 
            /* [in] */ GcBooleanType Operation,
            /* [in] */ IGcadRegion *Object) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadRegionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadRegion * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadRegion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadRegion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadRegion * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadRegion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadRegion * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadRegion * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadRegion * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadRegion * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadRegion * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadRegion * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadRegion * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadRegion * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadRegion * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadRegion * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadRegion * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadRegion * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadRegion * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadRegion * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadRegion * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadRegion * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadRegion * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadRegion * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadRegion * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadRegion * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadRegion * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadRegion * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadRegion * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadRegion * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadRegion * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadRegion * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadRegion * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadRegion * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadRegion * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadRegion * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadRegion * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadRegion * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadRegion * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadRegion * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadRegion * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadRegion * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadRegion * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadRegion * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadRegion * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadRegion * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadRegion * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadRegion * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadRegion * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadRegion * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadRegion * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadRegion * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Centroid )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *Centroid);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MomentOfInertia )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *momentInertia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Perimeter )( 
            IGcadRegion * This,
            /* [retval][out] */ double *Perimeter);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrincipalDirections )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *prinDir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrincipalMoments )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *prinMoments);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProductOfInertia )( 
            IGcadRegion * This,
            /* [retval][out] */ double *prodInertia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RadiiOfGyration )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *radiiGyration);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Boolean )( 
            IGcadRegion * This,
            /* [in] */ GcBooleanType Operation,
            /* [in] */ IGcadRegion *Object);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadRegion * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        END_INTERFACE
    } IGcadRegionVtbl;

    interface IGcadRegion
    {
        CONST_VTBL struct IGcadRegionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadRegion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadRegion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadRegion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadRegion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadRegion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadRegion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadRegion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadRegion_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadRegion_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadRegion_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadRegion_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadRegion_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadRegion_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadRegion_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadRegion_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadRegion_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadRegion_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadRegion_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadRegion_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadRegion_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadRegion_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadRegion_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadRegion_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadRegion_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadRegion_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadRegion_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadRegion_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadRegion_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadRegion_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadRegion_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadRegion_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadRegion_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadRegion_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadRegion_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadRegion_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadRegion_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadRegion_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadRegion_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadRegion_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadRegion_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadRegion_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadRegion_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadRegion_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadRegion_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadRegion_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadRegion_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadRegion_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadRegion_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadRegion_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadRegion_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadRegion_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadRegion_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadRegion_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadRegion_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadRegion_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadRegion_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadRegion_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadRegion_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadRegion_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadRegion_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadRegion_get_Centroid(This,Centroid)	\
    ( (This)->lpVtbl -> get_Centroid(This,Centroid) ) 

#define IGcadRegion_get_MomentOfInertia(This,momentInertia)	\
    ( (This)->lpVtbl -> get_MomentOfInertia(This,momentInertia) ) 

#define IGcadRegion_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadRegion_get_Perimeter(This,Perimeter)	\
    ( (This)->lpVtbl -> get_Perimeter(This,Perimeter) ) 

#define IGcadRegion_get_PrincipalDirections(This,prinDir)	\
    ( (This)->lpVtbl -> get_PrincipalDirections(This,prinDir) ) 

#define IGcadRegion_get_PrincipalMoments(This,prinMoments)	\
    ( (This)->lpVtbl -> get_PrincipalMoments(This,prinMoments) ) 

#define IGcadRegion_get_ProductOfInertia(This,prodInertia)	\
    ( (This)->lpVtbl -> get_ProductOfInertia(This,prodInertia) ) 

#define IGcadRegion_get_RadiiOfGyration(This,radiiGyration)	\
    ( (This)->lpVtbl -> get_RadiiOfGyration(This,radiiGyration) ) 

#define IGcadRegion_Boolean(This,Operation,Object)	\
    ( (This)->lpVtbl -> Boolean(This,Operation,Object) ) 

#define IGcadRegion_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadRegion_INTERFACE_DEFINED__ */


#ifndef __IGcadCircle_INTERFACE_DEFINED__
#define __IGcadCircle_INTERFACE_DEFINED__

/* interface IGcadCircle */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadCircle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7F1B5CD-197C-4436-A1A5-42B61640DFBE")
    IGcadCircle : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *CenterPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT CenterPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Radius( 
            /* [retval][out] */ double *Radius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Radius( 
            /* [in] */ double Radius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diameter( 
            /* [retval][out] */ double *Diameter) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Diameter( 
            /* [in] */ double Diameter) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Circumference( 
            /* [retval][out] */ double *Circumference) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Circumference( 
            /* [in] */ double Circumference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Area( 
            /* [in] */ double Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadCircleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadCircle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadCircle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadCircle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadCircle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadCircle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadCircle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadCircle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadCircle * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadCircle * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadCircle * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadCircle * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadCircle * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadCircle * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadCircle * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadCircle * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadCircle * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadCircle * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadCircle * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadCircle * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadCircle * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadCircle * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadCircle * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadCircle * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadCircle * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadCircle * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadCircle * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadCircle * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadCircle * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadCircle * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadCircle * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadCircle * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadCircle * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadCircle * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadCircle * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadCircle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadCircle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadCircle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadCircle * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadCircle * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadCircle * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadCircle * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadCircle * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadCircle * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadCircle * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadCircle * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadCircle * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadCircle * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadCircle * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadCircle * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadCircle * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadCircle * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadCircle * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadCircle * This,
            /* [retval][out] */ VARIANT *CenterPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadCircle * This,
            /* [in] */ VARIANT CenterPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Radius )( 
            IGcadCircle * This,
            /* [retval][out] */ double *Radius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Radius )( 
            IGcadCircle * This,
            /* [in] */ double Radius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diameter )( 
            IGcadCircle * This,
            /* [retval][out] */ double *Diameter);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Diameter )( 
            IGcadCircle * This,
            /* [in] */ double Diameter);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Circumference )( 
            IGcadCircle * This,
            /* [retval][out] */ double *Circumference);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Circumference )( 
            IGcadCircle * This,
            /* [in] */ double Circumference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadCircle * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Area )( 
            IGcadCircle * This,
            /* [in] */ double Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadCircle * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadCircle * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadCircle * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadCircle * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadCircle * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        END_INTERFACE
    } IGcadCircleVtbl;

    interface IGcadCircle
    {
        CONST_VTBL struct IGcadCircleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadCircle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadCircle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadCircle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadCircle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadCircle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadCircle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadCircle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadCircle_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadCircle_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadCircle_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadCircle_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadCircle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadCircle_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadCircle_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadCircle_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadCircle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadCircle_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadCircle_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadCircle_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadCircle_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadCircle_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadCircle_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadCircle_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadCircle_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadCircle_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadCircle_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadCircle_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadCircle_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadCircle_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadCircle_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadCircle_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadCircle_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadCircle_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadCircle_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadCircle_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadCircle_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadCircle_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadCircle_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadCircle_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadCircle_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadCircle_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadCircle_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadCircle_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadCircle_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadCircle_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadCircle_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadCircle_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadCircle_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadCircle_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadCircle_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadCircle_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadCircle_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadCircle_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadCircle_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadCircle_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadCircle_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadCircle_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadCircle_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadCircle_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadCircle_get_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> get_Center(This,CenterPoint) ) 

#define IGcadCircle_put_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> put_Center(This,CenterPoint) ) 

#define IGcadCircle_get_Radius(This,Radius)	\
    ( (This)->lpVtbl -> get_Radius(This,Radius) ) 

#define IGcadCircle_put_Radius(This,Radius)	\
    ( (This)->lpVtbl -> put_Radius(This,Radius) ) 

#define IGcadCircle_get_Diameter(This,Diameter)	\
    ( (This)->lpVtbl -> get_Diameter(This,Diameter) ) 

#define IGcadCircle_put_Diameter(This,Diameter)	\
    ( (This)->lpVtbl -> put_Diameter(This,Diameter) ) 

#define IGcadCircle_get_Circumference(This,Circumference)	\
    ( (This)->lpVtbl -> get_Circumference(This,Circumference) ) 

#define IGcadCircle_put_Circumference(This,Circumference)	\
    ( (This)->lpVtbl -> put_Circumference(This,Circumference) ) 

#define IGcadCircle_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadCircle_put_Area(This,Area)	\
    ( (This)->lpVtbl -> put_Area(This,Area) ) 

#define IGcadCircle_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadCircle_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadCircle_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadCircle_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadCircle_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadCircle_INTERFACE_DEFINED__ */


#ifndef __IGcadDimension_INTERFACE_DEFINED__
#define __IGcadDimension_INTERFACE_DEFINED__

/* interface IGcadDimension */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimension;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5506FE5F-CC08-4A51-BC46-E8FCA93704F7")
    IGcadDimension : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPosition( 
            /* [retval][out] */ VARIANT *textPos) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextPosition( 
            /* [in] */ VARIANT textPos) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextRotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOverride( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOverride( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextColor( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextColor( 
            /* [in] */ GCAD_COLOR color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DecimalSeparator( 
            /* [retval][out] */ BSTR *character) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DecimalSeparator( 
            /* [in] */ BSTR character) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGap( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGap( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalTextPosition( 
            /* [retval][out] */ GcDimVerticalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalTextPosition( 
            /* [in] */ GcDimVerticalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TolerancePrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceHeightScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceHeightScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceLowerLimit( 
            /* [retval][out] */ double *lower) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceLowerLimit( 
            /* [in] */ double lower) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextMovement( 
            /* [retval][out] */ GcDimTextMovement *Move) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextMovement( 
            /* [in] */ GcDimTextMovement Move) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceDisplay( 
            /* [retval][out] */ GcDimToleranceMethod *method) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceDisplay( 
            /* [in] */ GcDimToleranceMethod method) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceJustification( 
            /* [retval][out] */ GcDimToleranceJustify *method) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceJustification( 
            /* [in] */ GcDimToleranceJustify method) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceUpperLimit( 
            /* [retval][out] */ double *upper) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceUpperLimit( 
            /* [in] */ double upper) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyle( 
            /* [retval][out] */ BSTR *style) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextStyle( 
            /* [in] */ BSTR style) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFill( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextFill( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFillColor( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextFillColor( 
            /* [in] */ GCAD_COLOR color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimTxtDirection( 
            /* [retval][out] */ VARIANT_BOOL *pbVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimTxtDirection( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimensionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimension * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimension * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimension * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimension * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimension * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimension * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimension * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimension * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimension * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimension * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimension * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimension * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimension * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimension * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimension * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimension * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimension * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimension * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimension * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimension * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimension * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimension * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimension * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimension * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimension * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimension * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimension * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimension * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimension * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimension * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimension * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimension * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimension * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimension * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimension * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimension * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimension * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimension * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimension * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimension * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimension * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimension * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimension * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimension * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimension * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimension * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimension * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimension * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimension * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimension * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimension * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimension * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimension * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimension * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimension * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimension * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimension * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimension * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimension * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimension * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimension * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimension * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimension * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimension * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimension * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimension * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimension * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimension * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimension * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimension * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimension * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimension * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimension * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimension * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimension * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimension * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimension * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimension * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimension * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimension * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        END_INTERFACE
    } IGcadDimensionVtbl;

    interface IGcadDimension
    {
        CONST_VTBL struct IGcadDimensionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimension_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimension_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimension_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimension_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimension_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimension_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimension_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimension_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimension_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimension_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimension_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimension_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimension_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimension_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimension_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimension_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimension_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimension_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimension_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimension_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimension_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimension_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimension_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimension_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimension_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimension_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimension_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimension_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimension_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimension_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimension_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimension_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimension_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimension_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimension_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimension_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimension_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimension_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimension_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimension_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimension_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimension_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimension_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimension_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimension_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimension_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimension_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimension_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimension_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimension_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimension_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimension_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimension_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimension_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimension_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimension_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimension_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimension_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimension_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimension_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimension_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimension_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimension_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimension_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimension_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimension_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimension_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimension_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimension_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimension_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimension_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimension_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimension_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimension_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimension_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimension_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimension_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimension_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimension_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimension_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimension_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimension_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimension_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimension_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimension_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimension_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimension_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimension_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimension_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimension_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimension_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimension_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimension_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimension_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimension_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimension_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimension_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimension_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimension_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimension_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimension_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimension_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimension_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimension_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimension_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimension_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimension_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimension_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimension_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimension_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimension_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimension_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimension_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimension_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimension_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimension_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimension_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDimension_INTERFACE_DEFINED__ */


#ifndef __IGcadDimAligned_INTERFACE_DEFINED__
#define __IGcadDimAligned_INTERFACE_DEFINED__

/* interface IGcadDimAligned */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimAligned;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C0C5A7A3-BAE5-4DE0-87F6-A096475B3533")
    IGcadDimAligned : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Point( 
            /* [retval][out] */ VARIANT *xLine1Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Point( 
            /* [in] */ VARIANT xLine1Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Point( 
            /* [retval][out] */ VARIANT *xLine2Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Point( 
            /* [in] */ VARIANT xLine2Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition( 
            /* [retval][out] */ GcDimHorizontalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition( 
            /* [in] */ GcDimHorizontalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimAlignedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimAligned * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimAligned * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimAligned * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimAligned * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimAligned * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimAligned * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimAligned * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimAligned * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimAligned * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimAligned * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimAligned * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimAligned * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimAligned * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimAligned * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimAligned * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimAligned * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimAligned * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimAligned * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimAligned * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimAligned * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimAligned * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimAligned * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimAligned * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimAligned * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Point )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT *xLine1Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Point )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT xLine1Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Point )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT *xLine2Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Point )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT xLine2Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimAligned * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )( 
            IGcadDimAligned * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )( 
            IGcadDimAligned * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimHorizontalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimHorizontalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimAligned * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDimAligned * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimAligned * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimAligned * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDimAligned * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDimAligned * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDimAligned * This,
            /* [in] */ double FixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDimAligned * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDimAligned * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )( 
            IGcadDimAligned * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )( 
            IGcadDimAligned * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )( 
            IGcadDimAligned * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )( 
            IGcadDimAligned * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )( 
            IGcadDimAligned * This,
            /* [in] */ double factor);
        
        END_INTERFACE
    } IGcadDimAlignedVtbl;

    interface IGcadDimAligned
    {
        CONST_VTBL struct IGcadDimAlignedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimAligned_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimAligned_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimAligned_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimAligned_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimAligned_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimAligned_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimAligned_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimAligned_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimAligned_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimAligned_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimAligned_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimAligned_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimAligned_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimAligned_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimAligned_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimAligned_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimAligned_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimAligned_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimAligned_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimAligned_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimAligned_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimAligned_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimAligned_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimAligned_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimAligned_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimAligned_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimAligned_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimAligned_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimAligned_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimAligned_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimAligned_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimAligned_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimAligned_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimAligned_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimAligned_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimAligned_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimAligned_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimAligned_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimAligned_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimAligned_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimAligned_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimAligned_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimAligned_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimAligned_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimAligned_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimAligned_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimAligned_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimAligned_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimAligned_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimAligned_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimAligned_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimAligned_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimAligned_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimAligned_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimAligned_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimAligned_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimAligned_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimAligned_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimAligned_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimAligned_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimAligned_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimAligned_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimAligned_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimAligned_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimAligned_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimAligned_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimAligned_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimAligned_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimAligned_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimAligned_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimAligned_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimAligned_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimAligned_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimAligned_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimAligned_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimAligned_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimAligned_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimAligned_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimAligned_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimAligned_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimAligned_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimAligned_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimAligned_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimAligned_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimAligned_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimAligned_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimAligned_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimAligned_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimAligned_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimAligned_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimAligned_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimAligned_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimAligned_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimAligned_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimAligned_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimAligned_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimAligned_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimAligned_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimAligned_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimAligned_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimAligned_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimAligned_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimAligned_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimAligned_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimAligned_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimAligned_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimAligned_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimAligned_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimAligned_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimAligned_get_ExtLine1Point(This,xLine1Point)	\
    ( (This)->lpVtbl -> get_ExtLine1Point(This,xLine1Point) ) 

#define IGcadDimAligned_put_ExtLine1Point(This,xLine1Point)	\
    ( (This)->lpVtbl -> put_ExtLine1Point(This,xLine1Point) ) 

#define IGcadDimAligned_get_ExtLine2Point(This,xLine2Point)	\
    ( (This)->lpVtbl -> get_ExtLine2Point(This,xLine2Point) ) 

#define IGcadDimAligned_put_ExtLine2Point(This,xLine2Point)	\
    ( (This)->lpVtbl -> put_ExtLine2Point(This,xLine2Point) ) 

#define IGcadDimAligned_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimAligned_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimAligned_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimAligned_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimAligned_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimAligned_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimAligned_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimAligned_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimAligned_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimAligned_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimAligned_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimAligned_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimAligned_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimAligned_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimAligned_get_AltTextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,suffix) ) 

#define IGcadDimAligned_put_AltTextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,suffix) ) 

#define IGcadDimAligned_get_DimensionLineColor(This,color)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,color) ) 

#define IGcadDimAligned_put_DimensionLineColor(This,color)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,color) ) 

#define IGcadDimAligned_get_ExtensionLineColor(This,color)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,color) ) 

#define IGcadDimAligned_put_ExtensionLineColor(This,color)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,color) ) 

#define IGcadDimAligned_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimAligned_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimAligned_get_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_DimensionLineExtend(This,extend) ) 

#define IGcadDimAligned_put_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_DimensionLineExtend(This,extend) ) 

#define IGcadDimAligned_get_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_ExtensionLineExtend(This,extend) ) 

#define IGcadDimAligned_put_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_ExtensionLineExtend(This,extend) ) 

#define IGcadDimAligned_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimAligned_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimAligned_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimAligned_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimAligned_get_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_HorizontalTextPosition(This,Type) ) 

#define IGcadDimAligned_put_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_HorizontalTextPosition(This,Type) ) 

#define IGcadDimAligned_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimAligned_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimAligned_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimAligned_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimAligned_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimAligned_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimAligned_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimAligned_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimAligned_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimAligned_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimAligned_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimAligned_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimAligned_get_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimAligned_put_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimAligned_get_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimAligned_put_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimAligned_get_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_DimLineInside(This,bInside) ) 

#define IGcadDimAligned_put_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_DimLineInside(This,bInside) ) 

#define IGcadDimAligned_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimAligned_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimAligned_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimAligned_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimAligned_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimAligned_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimAligned_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimAligned_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimAligned_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimAligned_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimAligned_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAligned_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAligned_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimAligned_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimAligned_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimAligned_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimAligned_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimAligned_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimAligned_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDimAligned_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDimAligned_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDimAligned_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDimAligned_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimAligned_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimAligned_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimAligned_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimAligned_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimAligned_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimAligned_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimAligned_get_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimAligned_put_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimAligned_get_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimAligned_put_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimAligned_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimAligned_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimAligned_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimAligned_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimAligned_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimAligned_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimAligned_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDimAligned_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDimAligned_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDimAligned_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDimAligned_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimAligned_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimAligned_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDimAligned_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDimAligned_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimAligned_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimAligned_get_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimAligned_put_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimAligned_get_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_SubUnitsFactor(This,factor) ) 

#define IGcadDimAligned_put_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_SubUnitsFactor(This,factor) ) 

#define IGcadDimAligned_get_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimAligned_put_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimAligned_get_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_AltSubUnitsFactor(This,factor) ) 

#define IGcadDimAligned_put_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_AltSubUnitsFactor(This,factor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltRoundDistance_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimAligned_put_AltRoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltTolerancePrecision_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimPrecision *Distance);


void __RPC_STUB IGcadDimAligned_get_AltTolerancePrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltTolerancePrecision_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimPrecision Distance);


void __RPC_STUB IGcadDimAligned_put_AltTolerancePrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltUnitsFormat_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimUnits *Units);


void __RPC_STUB IGcadDimAligned_get_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltUnitsFormat_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimAligned_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltTextPrefix_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimAligned_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltTextPrefix_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimAligned_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltTextSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimAligned_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltTextSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimAligned_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimensionLineColor_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GCAD_COLOR *color);


void __RPC_STUB IGcadDimAligned_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimensionLineColor_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GCAD_COLOR color);


void __RPC_STUB IGcadDimAligned_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtensionLineColor_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GCAD_COLOR *color);


void __RPC_STUB IGcadDimAligned_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtensionLineColor_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GCAD_COLOR color);


void __RPC_STUB IGcadDimAligned_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimAligned_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimAligned_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimensionLineExtend_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimAligned_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimensionLineExtend_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimAligned_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtensionLineExtend_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimAligned_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtensionLineExtend_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimAligned_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Fit_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimAligned_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_Fit_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimAligned_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_FractionFormat_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimAligned_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_FractionFormat_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimAligned_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_HorizontalTextPosition_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimHorizontalJustification *Type);


void __RPC_STUB IGcadDimAligned_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_HorizontalTextPosition_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimHorizontalJustification Type);


void __RPC_STUB IGcadDimAligned_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_LinearScaleFactor_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimAligned_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_LinearScaleFactor_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimAligned_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_UnitsFormat_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimAligned_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_UnitsFormat_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimAligned_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtensionLineWeight_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDimAligned_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtensionLineWeight_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDimAligned_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_RoundDistance_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimAligned_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_RoundDistance_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimAligned_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimLine1Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAligned_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimLine1Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAligned_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimLine2Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAligned_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimLine2Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAligned_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLine1Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAligned_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLine1Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAligned_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLine2Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAligned_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLine2Suppress_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAligned_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimLineInside_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAligned_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimLineInside_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAligned_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_TextInsideAlign_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAligned_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_TextInsideAlign_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAligned_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_TextInside_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAligned_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_TextInside_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAligned_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ForceLineInside_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAligned_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ForceLineInside_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAligned_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_TextOutsideAlign_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAligned_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_TextOutsideAlign_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAligned_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtensionLineOffset_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDimAligned_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtensionLineOffset_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDimAligned_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_SuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_SuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_SuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_SuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimAligned_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimAligned_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimensionLineWeight_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimAligned_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimensionLineWeight_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimAligned_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ArrowheadSize_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimAligned_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ArrowheadSize_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimAligned_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Arrowhead1Type_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimAligned_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_Arrowhead1Type_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimAligned_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Arrowhead2Type_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimAligned_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_Arrowhead2Type_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimAligned_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Measurement_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimAligned_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Arrowhead1Block_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimAligned_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_Arrowhead1Block_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimAligned_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_Arrowhead2Block_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimAligned_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_Arrowhead2Block_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimAligned_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimensionLinetype_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAligned_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimensionLinetype_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAligned_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLine1Linetype_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAligned_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLine1Linetype_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAligned_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLine2Linetype_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAligned_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLine2Linetype_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAligned_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDimAligned_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDimAligned_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_ExtLineFixedLen_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDimAligned_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_ExtLineFixedLen_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDimAligned_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrForm_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDimAligned_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrForm_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDimAligned_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrReference_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDimAligned_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrReference_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDimAligned_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrName_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDimAligned_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrName_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDimAligned_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrExpression_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDimAligned_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrExpression_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDimAligned_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrValue_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDimAligned_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrValue_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDimAligned_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_DimConstrDesc_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDimAligned_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_DimConstrDesc_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDimAligned_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_SubUnitsSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimAligned_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_SubUnitsSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimAligned_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_SubUnitsFactor_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimAligned_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_SubUnitsFactor_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimAligned_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSubUnitsSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimAligned_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSubUnitsSuffix_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimAligned_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_get_AltSubUnitsFactor_Proxy( 
    IGcadDimAligned * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimAligned_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAligned_put_AltSubUnitsFactor_Proxy( 
    IGcadDimAligned * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimAligned_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimAligned_INTERFACE_DEFINED__ */


#ifndef __IGcadDimAngular_INTERFACE_DEFINED__
#define __IGcadDimAngular_INTERFACE_DEFINED__

/* interface IGcadDimAngular */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimAngular;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4BEBF44A-7F34-4975-B63C-0C2034C226B5")
    IGcadDimAngular : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1StartPoint( 
            /* [retval][out] */ VARIANT *xLine1Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1StartPoint( 
            /* [in] */ VARIANT xLine1Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1EndPoint( 
            /* [retval][out] */ VARIANT *xLine1Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1EndPoint( 
            /* [in] */ VARIANT xLine1Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2StartPoint( 
            /* [retval][out] */ VARIANT *xLine2Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2StartPoint( 
            /* [in] */ VARIANT xLine2Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2EndPoint( 
            /* [retval][out] */ VARIANT *xLine2Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2EndPoint( 
            /* [in] */ VARIANT xLine2Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AngleFormat( 
            /* [retval][out] */ GcAngleUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AngleFormat( 
            /* [in] */ GcAngleUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition( 
            /* [retval][out] */ GcDimHorizontalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition( 
            /* [in] */ GcDimHorizontalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ GCAD_ANGLE *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimAngularVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimAngular * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimAngular * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimAngular * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimAngular * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimAngular * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimAngular * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimAngular * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimAngular * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimAngular * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimAngular * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimAngular * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimAngular * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimAngular * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimAngular * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimAngular * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimAngular * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimAngular * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimAngular * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimAngular * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimAngular * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimAngular * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimAngular * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimAngular * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimAngular * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1StartPoint )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *xLine1Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1StartPoint )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT xLine1Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1EndPoint )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *xLine1Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1EndPoint )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT xLine1Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2StartPoint )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *xLine2Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2StartPoint )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT xLine2Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2EndPoint )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT *xLine2Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2EndPoint )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT xLine2Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AngleFormat )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcAngleUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AngleFormat )( 
            IGcadDimAngular * This,
            /* [in] */ GcAngleUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )( 
            IGcadDimAngular * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimHorizontalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimHorizontalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrecision )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrecision )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDimAngular * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimAngular * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimAngular * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDimAngular * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimAngular * This,
            /* [retval][out] */ GCAD_ANGLE *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDimAngular * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDimAngular * This,
            /* [in] */ double FixedLen);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDimAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDimAngular * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDimAngular * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDimAngular * This,
            /* [in] */ BSTR bstrDescription);
        
        END_INTERFACE
    } IGcadDimAngularVtbl;

    interface IGcadDimAngular
    {
        CONST_VTBL struct IGcadDimAngularVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimAngular_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimAngular_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimAngular_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimAngular_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimAngular_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimAngular_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimAngular_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimAngular_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimAngular_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimAngular_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimAngular_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimAngular_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimAngular_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimAngular_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimAngular_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimAngular_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimAngular_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimAngular_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimAngular_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimAngular_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimAngular_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimAngular_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimAngular_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimAngular_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimAngular_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimAngular_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimAngular_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimAngular_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimAngular_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimAngular_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimAngular_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimAngular_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimAngular_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimAngular_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimAngular_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimAngular_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimAngular_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimAngular_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimAngular_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimAngular_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimAngular_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimAngular_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimAngular_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimAngular_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimAngular_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimAngular_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimAngular_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimAngular_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimAngular_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimAngular_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimAngular_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimAngular_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimAngular_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimAngular_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimAngular_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimAngular_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimAngular_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimAngular_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimAngular_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimAngular_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimAngular_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimAngular_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimAngular_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimAngular_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimAngular_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimAngular_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimAngular_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimAngular_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimAngular_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimAngular_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimAngular_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimAngular_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimAngular_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimAngular_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimAngular_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimAngular_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimAngular_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimAngular_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimAngular_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimAngular_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimAngular_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimAngular_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimAngular_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimAngular_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimAngular_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimAngular_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimAngular_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimAngular_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimAngular_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimAngular_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimAngular_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimAngular_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimAngular_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimAngular_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimAngular_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimAngular_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimAngular_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimAngular_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimAngular_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimAngular_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimAngular_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimAngular_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimAngular_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimAngular_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAngular_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAngular_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAngular_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAngular_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAngular_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimAngular_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAngular_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimAngular_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimAngular_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimAngular_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimAngular_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimAngular_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimAngular_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimAngular_get_ExtLine1StartPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> get_ExtLine1StartPoint(This,xLine1Point) ) 

#define IGcadDimAngular_put_ExtLine1StartPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> put_ExtLine1StartPoint(This,xLine1Point) ) 

#define IGcadDimAngular_get_ExtLine1EndPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> get_ExtLine1EndPoint(This,xLine1Point) ) 

#define IGcadDimAngular_put_ExtLine1EndPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> put_ExtLine1EndPoint(This,xLine1Point) ) 

#define IGcadDimAngular_get_ExtLine2StartPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> get_ExtLine2StartPoint(This,xLine2Point) ) 

#define IGcadDimAngular_put_ExtLine2StartPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> put_ExtLine2StartPoint(This,xLine2Point) ) 

#define IGcadDimAngular_get_ExtLine2EndPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> get_ExtLine2EndPoint(This,xLine2Point) ) 

#define IGcadDimAngular_put_ExtLine2EndPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> put_ExtLine2EndPoint(This,xLine2Point) ) 

#define IGcadDimAngular_get_AngleFormat(This,format)	\
    ( (This)->lpVtbl -> get_AngleFormat(This,format) ) 

#define IGcadDimAngular_put_AngleFormat(This,format)	\
    ( (This)->lpVtbl -> put_AngleFormat(This,format) ) 

#define IGcadDimAngular_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimAngular_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimAngular_get_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,Type) ) 

#define IGcadDimAngular_put_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,Type) ) 

#define IGcadDimAngular_get_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_ExtensionLineExtend(This,extend) ) 

#define IGcadDimAngular_put_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_ExtensionLineExtend(This,extend) ) 

#define IGcadDimAngular_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimAngular_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimAngular_get_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_HorizontalTextPosition(This,Type) ) 

#define IGcadDimAngular_put_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_HorizontalTextPosition(This,Type) ) 

#define IGcadDimAngular_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimAngular_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimAngular_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimAngular_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimAngular_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimAngular_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimAngular_get_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimAngular_put_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimAngular_get_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimAngular_put_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimAngular_get_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_DimLineInside(This,bInside) ) 

#define IGcadDimAngular_put_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_DimLineInside(This,bInside) ) 

#define IGcadDimAngular_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimAngular_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimAngular_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimAngular_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimAngular_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimAngular_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimAngular_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimAngular_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimAngular_get_TextPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TextPrecision(This,precision) ) 

#define IGcadDimAngular_put_TextPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TextPrecision(This,precision) ) 

#define IGcadDimAngular_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimAngular_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimAngular_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimAngular_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimAngular_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimAngular_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimAngular_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDimAngular_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDimAngular_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDimAngular_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDimAngular_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimAngular_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimAngular_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimAngular_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimAngular_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimAngular_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimAngular_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimAngular_get_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimAngular_put_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimAngular_get_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimAngular_put_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimAngular_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimAngular_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimAngular_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimAngular_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimAngular_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimAngular_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimAngular_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDimAngular_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDimAngular_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDimAngular_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDimAngular_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimAngular_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimAngular_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDimAngular_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDimAngular_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimAngular_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimensionLineColor_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimAngular_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtensionLineColor_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimAngular_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtensionLineColor_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimAngular_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtensionLineExtend_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimAngular_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtensionLineExtend_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimAngular_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Fit_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimAngular_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_Fit_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimAngular_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_HorizontalTextPosition_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GcDimHorizontalJustification *Type);


void __RPC_STUB IGcadDimAngular_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_HorizontalTextPosition_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GcDimHorizontalJustification Type);


void __RPC_STUB IGcadDimAngular_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtensionLineWeight_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDimAngular_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtensionLineWeight_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDimAngular_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimLine1Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAngular_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimLine1Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAngular_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimLine2Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAngular_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimLine2Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAngular_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLine1Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAngular_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLine1Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAngular_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLine2Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimAngular_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLine2Suppress_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimAngular_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimLineInside_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAngular_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimLineInside_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAngular_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_TextInsideAlign_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAngular_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_TextInsideAlign_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAngular_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_TextInside_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAngular_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_TextInside_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAngular_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ForceLineInside_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAngular_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ForceLineInside_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAngular_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_TextOutsideAlign_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimAngular_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_TextOutsideAlign_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimAngular_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_TextPrecision_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GcDimPrecision *precision);


void __RPC_STUB IGcadDimAngular_get_TextPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_TextPrecision_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GcDimPrecision precision);


void __RPC_STUB IGcadDimAngular_put_TextPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtensionLineOffset_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDimAngular_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtensionLineOffset_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDimAngular_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimensionLineWeight_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimAngular_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimensionLineWeight_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimAngular_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ArrowheadSize_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimAngular_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ArrowheadSize_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimAngular_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Arrowhead1Type_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimAngular_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_Arrowhead1Type_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimAngular_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Arrowhead2Type_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimAngular_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_Arrowhead2Type_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimAngular_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Measurement_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ GCAD_ANGLE *bVal);


void __RPC_STUB IGcadDimAngular_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Arrowhead1Block_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimAngular_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_Arrowhead1Block_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimAngular_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_Arrowhead2Block_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimAngular_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_Arrowhead2Block_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimAngular_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimensionLinetype_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAngular_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimensionLinetype_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAngular_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLine1Linetype_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAngular_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLine1Linetype_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAngular_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLine2Linetype_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimAngular_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLine2Linetype_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimAngular_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDimAngular_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDimAngular_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_ExtLineFixedLen_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDimAngular_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_ExtLineFixedLen_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDimAngular_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrForm_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDimAngular_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrForm_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDimAngular_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrReference_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDimAngular_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrReference_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDimAngular_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrName_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDimAngular_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrName_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDimAngular_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrExpression_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDimAngular_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrExpression_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDimAngular_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrValue_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDimAngular_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrValue_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDimAngular_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_get_DimConstrDesc_Proxy( 
    IGcadDimAngular * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDimAngular_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimAngular_put_DimConstrDesc_Proxy( 
    IGcadDimAngular * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDimAngular_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimAngular_INTERFACE_DEFINED__ */


#ifndef __IGcadDimDiametric_INTERFACE_DEFINED__
#define __IGcadDimDiametric_INTERFACE_DEFINED__

/* interface IGcadDimDiametric */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimDiametric;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EF2AD9E2-E9DE-449E-855E-1D9066EFAF76")
    IGcadDimDiametric : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLength( 
            /* [in] */ double rhs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterType( 
            /* [retval][out] */ GcDimCenterType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterType( 
            /* [in] */ GcDimCenterType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterMarkSize( 
            /* [retval][out] */ double *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterMarkSize( 
            /* [in] */ double Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimDiametricVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimDiametric * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimDiametric * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimDiametric * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimDiametric * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimDiametric * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimDiametric * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimDiametric * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimDiametric * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimDiametric * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimDiametric * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimDiametric * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimDiametric * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimDiametric * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimDiametric * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimDiametric * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimDiametric * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimDiametric * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimDiametric * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimDiametric * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLength )( 
            IGcadDimDiametric * This,
            /* [in] */ double rhs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimDiametric * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimDiametric * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterType )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimCenterType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterType )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimCenterType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )( 
            IGcadDimDiametric * This,
            /* [in] */ double Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimDiametric * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimDiametric * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDimDiametric * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDimDiametric * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDimDiametric * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDimDiametric * This,
            /* [in] */ BSTR bstrDescription);
        
        END_INTERFACE
    } IGcadDimDiametricVtbl;

    interface IGcadDimDiametric
    {
        CONST_VTBL struct IGcadDimDiametricVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimDiametric_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimDiametric_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimDiametric_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimDiametric_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimDiametric_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimDiametric_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimDiametric_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimDiametric_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimDiametric_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimDiametric_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimDiametric_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimDiametric_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimDiametric_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimDiametric_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimDiametric_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimDiametric_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimDiametric_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimDiametric_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimDiametric_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimDiametric_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimDiametric_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimDiametric_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimDiametric_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimDiametric_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimDiametric_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimDiametric_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimDiametric_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimDiametric_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimDiametric_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimDiametric_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimDiametric_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimDiametric_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimDiametric_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimDiametric_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimDiametric_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimDiametric_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimDiametric_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimDiametric_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimDiametric_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimDiametric_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimDiametric_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimDiametric_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimDiametric_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimDiametric_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimDiametric_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimDiametric_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimDiametric_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimDiametric_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimDiametric_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimDiametric_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimDiametric_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimDiametric_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimDiametric_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimDiametric_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimDiametric_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimDiametric_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimDiametric_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimDiametric_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimDiametric_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimDiametric_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimDiametric_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimDiametric_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimDiametric_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimDiametric_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimDiametric_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimDiametric_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimDiametric_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimDiametric_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimDiametric_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimDiametric_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimDiametric_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimDiametric_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimDiametric_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimDiametric_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimDiametric_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimDiametric_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimDiametric_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimDiametric_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimDiametric_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimDiametric_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimDiametric_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimDiametric_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimDiametric_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimDiametric_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimDiametric_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimDiametric_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimDiametric_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimDiametric_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimDiametric_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimDiametric_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimDiametric_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimDiametric_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimDiametric_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimDiametric_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimDiametric_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimDiametric_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimDiametric_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimDiametric_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimDiametric_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimDiametric_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimDiametric_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimDiametric_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimDiametric_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimDiametric_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimDiametric_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimDiametric_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimDiametric_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimDiametric_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimDiametric_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimDiametric_put_LeaderLength(This,rhs)	\
    ( (This)->lpVtbl -> put_LeaderLength(This,rhs) ) 

#define IGcadDimDiametric_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimDiametric_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimDiametric_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimDiametric_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimDiametric_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimDiametric_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimDiametric_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimDiametric_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimDiametric_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimDiametric_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimDiametric_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimDiametric_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimDiametric_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimDiametric_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimDiametric_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimDiametric_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimDiametric_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimDiametric_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimDiametric_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimDiametric_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimDiametric_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimDiametric_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimDiametric_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimDiametric_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimDiametric_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimDiametric_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimDiametric_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimDiametric_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimDiametric_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimDiametric_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimDiametric_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimDiametric_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimDiametric_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimDiametric_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimDiametric_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimDiametric_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimDiametric_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimDiametric_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimDiametric_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimDiametric_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimDiametric_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimDiametric_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimDiametric_get_CenterType(This,Type)	\
    ( (This)->lpVtbl -> get_CenterType(This,Type) ) 

#define IGcadDimDiametric_put_CenterType(This,Type)	\
    ( (This)->lpVtbl -> put_CenterType(This,Type) ) 

#define IGcadDimDiametric_get_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> get_CenterMarkSize(This,Type) ) 

#define IGcadDimDiametric_put_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> put_CenterMarkSize(This,Type) ) 

#define IGcadDimDiametric_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimDiametric_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimDiametric_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimDiametric_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimDiametric_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimDiametric_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimDiametric_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimDiametric_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDimDiametric_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDimDiametric_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDimDiametric_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDimDiametric_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimDiametric_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimDiametric_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimDiametric_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimDiametric_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimDiametric_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimDiametric_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimDiametric_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimDiametric_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimDiametric_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDimDiametric_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDimDiametric_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDimDiametric_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDimDiametric_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimDiametric_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimDiametric_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDimDiametric_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDimDiametric_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimDiametric_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltUnitsFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimUnits *Units);


void __RPC_STUB IGcadDimDiametric_get_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltUnitsFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimDiametric_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltTextPrefix_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimDiametric_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltTextPrefix_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimDiametric_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltTextSuffix_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimDiametric_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltTextSuffix_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimDiametric_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimensionLineColor_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimDiametric_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimensionLineColor_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimDiametric_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimDiametric_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimDiametric_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_FractionFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimDiametric_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_FractionFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimDiametric_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Fit_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimDiametric_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_Fit_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimDiametric_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_LinearScaleFactor_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimDiametric_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_LinearScaleFactor_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimDiametric_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_UnitsFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimDiametric_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_UnitsFormat_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimDiametric_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_RoundDistance_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimDiametric_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_RoundDistance_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimDiametric_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimLine1Suppress_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimDiametric_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimLine1Suppress_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimDiametric_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimLine2Suppress_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimDiametric_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimLine2Suppress_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimDiametric_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_TextInsideAlign_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimDiametric_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_TextInsideAlign_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimDiametric_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_TextInside_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimDiametric_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_TextInside_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimDiametric_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_ForceLineInside_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimDiametric_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_ForceLineInside_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimDiametric_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_TextOutsideAlign_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimDiametric_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_TextOutsideAlign_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimDiametric_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_CenterType_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimCenterType *Type);


void __RPC_STUB IGcadDimDiametric_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_CenterType_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimCenterType Type);


void __RPC_STUB IGcadDimDiametric_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_CenterMarkSize_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ double *Type);


void __RPC_STUB IGcadDimDiametric_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_CenterMarkSize_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ double Type);


void __RPC_STUB IGcadDimDiametric_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_SuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_SuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_SuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_SuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimDiametric_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimDiametric_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimensionLineWeight_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimDiametric_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimensionLineWeight_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimDiametric_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_ArrowheadSize_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimDiametric_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_ArrowheadSize_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimDiametric_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Arrowhead1Type_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimDiametric_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_Arrowhead1Type_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimDiametric_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Arrowhead2Type_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimDiametric_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_Arrowhead2Type_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimDiametric_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Measurement_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimDiametric_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Arrowhead1Block_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimDiametric_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_Arrowhead1Block_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimDiametric_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_Arrowhead2Block_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimDiametric_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_Arrowhead2Block_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimDiametric_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimensionLinetype_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimDiametric_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimensionLinetype_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimDiametric_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrForm_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDimDiametric_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrForm_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDimDiametric_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrReference_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDimDiametric_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrReference_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDimDiametric_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrName_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDimDiametric_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrName_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDimDiametric_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrExpression_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDimDiametric_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrExpression_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDimDiametric_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrValue_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDimDiametric_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrValue_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDimDiametric_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_get_DimConstrDesc_Proxy( 
    IGcadDimDiametric * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDimDiametric_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimDiametric_put_DimConstrDesc_Proxy( 
    IGcadDimDiametric * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDimDiametric_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimDiametric_INTERFACE_DEFINED__ */


#ifndef __IGcadDimRotated_INTERFACE_DEFINED__
#define __IGcadDimRotated_INTERFACE_DEFINED__

/* interface IGcadDimRotated */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimRotated;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8189183E-E5DF-4595-9F02-23D45D7E8799")
    IGcadDimRotated : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition( 
            /* [retval][out] */ GcDimHorizontalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition( 
            /* [in] */ GcDimHorizontalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimRotatedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimRotated * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimRotated * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimRotated * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimRotated * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimRotated * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimRotated * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimRotated * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimRotated * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimRotated * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimRotated * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimRotated * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimRotated * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimRotated * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimRotated * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimRotated * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimRotated * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimRotated * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimRotated * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimRotated * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimRotated * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimRotated * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimRotated * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimRotated * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimRotated * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimRotated * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )( 
            IGcadDimRotated * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )( 
            IGcadDimRotated * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimHorizontalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimHorizontalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimRotated * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDimRotated * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimRotated * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimRotated * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDimRotated * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDimRotated * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDimRotated * This,
            /* [in] */ double FixedLen);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDimRotated * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDimRotated * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )( 
            IGcadDimRotated * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )( 
            IGcadDimRotated * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )( 
            IGcadDimRotated * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )( 
            IGcadDimRotated * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )( 
            IGcadDimRotated * This,
            /* [in] */ double factor);
        
        END_INTERFACE
    } IGcadDimRotatedVtbl;

    interface IGcadDimRotated
    {
        CONST_VTBL struct IGcadDimRotatedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimRotated_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimRotated_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimRotated_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimRotated_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimRotated_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimRotated_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimRotated_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimRotated_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimRotated_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimRotated_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimRotated_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimRotated_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimRotated_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimRotated_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimRotated_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimRotated_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimRotated_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimRotated_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimRotated_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimRotated_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimRotated_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimRotated_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimRotated_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimRotated_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimRotated_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimRotated_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimRotated_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimRotated_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimRotated_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimRotated_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimRotated_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimRotated_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimRotated_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimRotated_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimRotated_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimRotated_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimRotated_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimRotated_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimRotated_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimRotated_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimRotated_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimRotated_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimRotated_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimRotated_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimRotated_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimRotated_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimRotated_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRotated_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRotated_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimRotated_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimRotated_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimRotated_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimRotated_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimRotated_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimRotated_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimRotated_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimRotated_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimRotated_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimRotated_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimRotated_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimRotated_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimRotated_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimRotated_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimRotated_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimRotated_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimRotated_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimRotated_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimRotated_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimRotated_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimRotated_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimRotated_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimRotated_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimRotated_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimRotated_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimRotated_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimRotated_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimRotated_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimRotated_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimRotated_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimRotated_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimRotated_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimRotated_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimRotated_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimRotated_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimRotated_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimRotated_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimRotated_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimRotated_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRotated_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRotated_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRotated_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRotated_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimRotated_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimRotated_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimRotated_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimRotated_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimRotated_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimRotated_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRotated_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRotated_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimRotated_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimRotated_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimRotated_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimRotated_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimRotated_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimRotated_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimRotated_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimRotated_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimRotated_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimRotated_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimRotated_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimRotated_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRotated_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRotated_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimRotated_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimRotated_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimRotated_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimRotated_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRotated_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRotated_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimRotated_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimRotated_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimRotated_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimRotated_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimRotated_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimRotated_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimRotated_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimRotated_get_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,Type) ) 

#define IGcadDimRotated_put_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,Type) ) 

#define IGcadDimRotated_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRotated_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRotated_get_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_DimensionLineExtend(This,extend) ) 

#define IGcadDimRotated_put_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_DimensionLineExtend(This,extend) ) 

#define IGcadDimRotated_get_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_ExtensionLineExtend(This,extend) ) 

#define IGcadDimRotated_put_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_ExtensionLineExtend(This,extend) ) 

#define IGcadDimRotated_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimRotated_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimRotated_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimRotated_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimRotated_get_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_HorizontalTextPosition(This,Type) ) 

#define IGcadDimRotated_put_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_HorizontalTextPosition(This,Type) ) 

#define IGcadDimRotated_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimRotated_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimRotated_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimRotated_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimRotated_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimRotated_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimRotated_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimRotated_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimRotated_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimRotated_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimRotated_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimRotated_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimRotated_get_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimRotated_put_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimRotated_get_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimRotated_put_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimRotated_get_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_DimLineInside(This,bInside) ) 

#define IGcadDimRotated_put_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_DimLineInside(This,bInside) ) 

#define IGcadDimRotated_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimRotated_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimRotated_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimRotated_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimRotated_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimRotated_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimRotated_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRotated_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRotated_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimRotated_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimRotated_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRotated_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRotated_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRotated_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRotated_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimRotated_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimRotated_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimRotated_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimRotated_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDimRotated_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDimRotated_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDimRotated_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDimRotated_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimRotated_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimRotated_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimRotated_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimRotated_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimRotated_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimRotated_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimRotated_get_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimRotated_put_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimRotated_get_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimRotated_put_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimRotated_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimRotated_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimRotated_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimRotated_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimRotated_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimRotated_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimRotated_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDimRotated_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDimRotated_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDimRotated_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDimRotated_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimRotated_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimRotated_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDimRotated_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDimRotated_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimRotated_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimRotated_get_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimRotated_put_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimRotated_get_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_SubUnitsFactor(This,factor) ) 

#define IGcadDimRotated_put_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_SubUnitsFactor(This,factor) ) 

#define IGcadDimRotated_get_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimRotated_put_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimRotated_get_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_AltSubUnitsFactor(This,factor) ) 

#define IGcadDimRotated_put_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_AltSubUnitsFactor(This,factor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltUnitsFormat_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimRotated_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltTextPrefix_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRotated_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltTextPrefix_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRotated_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltTextSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRotated_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltTextSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRotated_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimensionLineColor_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimRotated_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimensionLineColor_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimRotated_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtensionLineColor_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimRotated_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtensionLineColor_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimRotated_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimRotated_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimRotated_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimensionLineExtend_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimRotated_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimensionLineExtend_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimRotated_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtensionLineExtend_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimRotated_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtensionLineExtend_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimRotated_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Fit_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimRotated_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_Fit_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimRotated_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_FractionFormat_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimRotated_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_FractionFormat_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimRotated_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_HorizontalTextPosition_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimHorizontalJustification *Type);


void __RPC_STUB IGcadDimRotated_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_HorizontalTextPosition_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimHorizontalJustification Type);


void __RPC_STUB IGcadDimRotated_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_LinearScaleFactor_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimRotated_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_LinearScaleFactor_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimRotated_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_UnitsFormat_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimRotated_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_UnitsFormat_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimRotated_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtensionLineWeight_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDimRotated_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtensionLineWeight_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDimRotated_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_RoundDistance_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimRotated_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_RoundDistance_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimRotated_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimLine1Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRotated_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimLine1Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRotated_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimLine2Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRotated_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimLine2Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRotated_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLine1Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRotated_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLine1Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRotated_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLine2Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRotated_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLine2Suppress_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRotated_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimLineInside_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRotated_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimLineInside_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRotated_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_TextInsideAlign_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRotated_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_TextInsideAlign_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRotated_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_TextInside_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRotated_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_TextInside_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRotated_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ForceLineInside_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRotated_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ForceLineInside_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRotated_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_TextOutsideAlign_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRotated_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_TextOutsideAlign_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRotated_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtensionLineOffset_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDimRotated_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtensionLineOffset_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDimRotated_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_SuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_SuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_SuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_SuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRotated_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRotated_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimensionLineWeight_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimRotated_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimensionLineWeight_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimRotated_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ArrowheadSize_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimRotated_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ArrowheadSize_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimRotated_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Arrowhead1Type_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimRotated_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_Arrowhead1Type_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimRotated_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Arrowhead2Type_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimRotated_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_Arrowhead2Type_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimRotated_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Measurement_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimRotated_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Arrowhead1Block_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimRotated_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_Arrowhead1Block_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimRotated_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_Arrowhead2Block_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimRotated_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_Arrowhead2Block_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimRotated_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimensionLinetype_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimRotated_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimensionLinetype_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimRotated_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLine1Linetype_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimRotated_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLine1Linetype_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimRotated_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLine2Linetype_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimRotated_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLine2Linetype_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimRotated_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDimRotated_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDimRotated_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_ExtLineFixedLen_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDimRotated_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_ExtLineFixedLen_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDimRotated_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrForm_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDimRotated_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrForm_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDimRotated_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrReference_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDimRotated_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrReference_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDimRotated_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrName_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDimRotated_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrName_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDimRotated_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrExpression_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDimRotated_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrExpression_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDimRotated_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrValue_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDimRotated_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrValue_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDimRotated_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_DimConstrDesc_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDimRotated_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_DimConstrDesc_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDimRotated_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_SubUnitsSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimRotated_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_SubUnitsSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimRotated_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_SubUnitsFactor_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimRotated_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_SubUnitsFactor_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimRotated_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSubUnitsSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimRotated_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSubUnitsSuffix_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimRotated_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_get_AltSubUnitsFactor_Proxy( 
    IGcadDimRotated * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimRotated_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRotated_put_AltSubUnitsFactor_Proxy( 
    IGcadDimRotated * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimRotated_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimRotated_INTERFACE_DEFINED__ */


#ifndef __IGcadDimOrdinate_INTERFACE_DEFINED__
#define __IGcadDimOrdinate_INTERFACE_DEFINED__

/* interface IGcadDimOrdinate */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimOrdinate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F4FF0730-5310-46E1-A1C0-A6C188C1E9CE")
    IGcadDimOrdinate : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimOrdinateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimOrdinate * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimOrdinate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimOrdinate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimOrdinate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimOrdinate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimOrdinate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimOrdinate * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimOrdinate * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimOrdinate * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimOrdinate * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimOrdinate * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimOrdinate * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimOrdinate * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimOrdinate * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimOrdinate * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimOrdinate * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimOrdinate * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimOrdinate * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimOrdinate * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimOrdinate * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimOrdinate * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDimOrdinate * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimOrdinate * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDimOrdinate * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimOrdinate * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDimOrdinate * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDimOrdinate * This,
            /* [in] */ double FixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )( 
            IGcadDimOrdinate * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )( 
            IGcadDimOrdinate * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )( 
            IGcadDimOrdinate * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )( 
            IGcadDimOrdinate * This,
            /* [in] */ double factor);
        
        END_INTERFACE
    } IGcadDimOrdinateVtbl;

    interface IGcadDimOrdinate
    {
        CONST_VTBL struct IGcadDimOrdinateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimOrdinate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimOrdinate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimOrdinate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimOrdinate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimOrdinate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimOrdinate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimOrdinate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimOrdinate_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimOrdinate_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimOrdinate_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimOrdinate_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimOrdinate_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimOrdinate_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimOrdinate_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimOrdinate_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimOrdinate_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimOrdinate_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimOrdinate_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimOrdinate_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimOrdinate_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimOrdinate_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimOrdinate_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimOrdinate_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimOrdinate_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimOrdinate_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimOrdinate_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimOrdinate_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimOrdinate_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimOrdinate_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimOrdinate_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimOrdinate_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimOrdinate_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimOrdinate_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimOrdinate_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimOrdinate_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimOrdinate_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimOrdinate_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimOrdinate_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimOrdinate_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimOrdinate_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimOrdinate_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimOrdinate_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimOrdinate_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimOrdinate_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimOrdinate_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimOrdinate_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimOrdinate_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimOrdinate_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimOrdinate_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimOrdinate_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimOrdinate_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimOrdinate_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimOrdinate_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimOrdinate_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimOrdinate_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimOrdinate_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimOrdinate_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimOrdinate_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimOrdinate_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimOrdinate_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimOrdinate_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimOrdinate_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimOrdinate_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimOrdinate_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimOrdinate_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimOrdinate_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimOrdinate_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimOrdinate_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimOrdinate_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimOrdinate_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimOrdinate_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimOrdinate_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimOrdinate_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimOrdinate_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimOrdinate_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimOrdinate_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimOrdinate_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimOrdinate_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimOrdinate_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimOrdinate_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimOrdinate_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimOrdinate_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimOrdinate_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimOrdinate_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimOrdinate_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimOrdinate_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimOrdinate_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimOrdinate_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimOrdinate_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimOrdinate_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimOrdinate_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimOrdinate_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimOrdinate_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimOrdinate_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimOrdinate_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimOrdinate_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimOrdinate_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimOrdinate_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimOrdinate_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimOrdinate_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimOrdinate_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimOrdinate_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimOrdinate_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimOrdinate_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimOrdinate_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimOrdinate_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimOrdinate_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimOrdinate_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimOrdinate_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimOrdinate_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimOrdinate_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimOrdinate_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimOrdinate_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimOrdinate_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimOrdinate_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimOrdinate_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimOrdinate_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimOrdinate_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimOrdinate_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimOrdinate_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimOrdinate_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimOrdinate_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimOrdinate_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimOrdinate_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimOrdinate_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimOrdinate_get_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,Type) ) 

#define IGcadDimOrdinate_put_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,Type) ) 

#define IGcadDimOrdinate_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimOrdinate_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimOrdinate_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimOrdinate_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimOrdinate_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimOrdinate_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimOrdinate_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimOrdinate_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimOrdinate_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimOrdinate_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimOrdinate_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimOrdinate_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimOrdinate_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimOrdinate_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimOrdinate_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimOrdinate_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimOrdinate_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimOrdinate_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimOrdinate_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimOrdinate_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimOrdinate_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimOrdinate_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimOrdinate_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimOrdinate_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimOrdinate_get_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimOrdinate_put_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimOrdinate_get_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_SubUnitsFactor(This,factor) ) 

#define IGcadDimOrdinate_put_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_SubUnitsFactor(This,factor) ) 

#define IGcadDimOrdinate_get_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimOrdinate_put_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimOrdinate_get_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_AltSubUnitsFactor(This,factor) ) 

#define IGcadDimOrdinate_put_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_AltSubUnitsFactor(This,factor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltUnitsFormat_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimOrdinate_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltTextPrefix_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimOrdinate_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltTextPrefix_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimOrdinate_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltTextSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimOrdinate_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltTextSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimOrdinate_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ExtensionLineColor_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimOrdinate_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ExtensionLineColor_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimOrdinate_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimOrdinate_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimOrdinate_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_FractionFormat_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimOrdinate_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_FractionFormat_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimOrdinate_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_LinearScaleFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimOrdinate_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_LinearScaleFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimOrdinate_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_UnitsFormat_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimOrdinate_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_UnitsFormat_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimOrdinate_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ExtensionLineWeight_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDimOrdinate_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ExtensionLineWeight_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDimOrdinate_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_RoundDistance_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimOrdinate_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_RoundDistance_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimOrdinate_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ExtensionLineOffset_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDimOrdinate_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ExtensionLineOffset_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDimOrdinate_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_SuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_SuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_SuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_SuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimOrdinate_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimOrdinate_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ArrowheadSize_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimOrdinate_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ArrowheadSize_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimOrdinate_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_Measurement_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimOrdinate_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDimOrdinate_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDimOrdinate_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_ExtLineFixedLen_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDimOrdinate_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_ExtLineFixedLen_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDimOrdinate_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_SubUnitsSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimOrdinate_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_SubUnitsSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimOrdinate_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_SubUnitsFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimOrdinate_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_SubUnitsFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimOrdinate_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSubUnitsSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimOrdinate_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSubUnitsSuffix_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimOrdinate_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_get_AltSubUnitsFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimOrdinate_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimOrdinate_put_AltSubUnitsFactor_Proxy( 
    IGcadDimOrdinate * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimOrdinate_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimOrdinate_INTERFACE_DEFINED__ */


#ifndef __IGcadDimRadial_INTERFACE_DEFINED__
#define __IGcadDimRadial_INTERFACE_DEFINED__

/* interface IGcadDimRadial */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimRadial;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53C2118B-BC9F-4527-A74E-9E64C1307850")
    IGcadDimRadial : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLength( 
            /* [in] */ double rhs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterType( 
            /* [retval][out] */ GcDimCenterType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterType( 
            /* [in] */ GcDimCenterType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterMarkSize( 
            /* [retval][out] */ double *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterMarkSize( 
            /* [in] */ double Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineSuppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadType( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadType( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadBlock( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadBlock( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimRadialVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimRadial * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimRadial * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimRadial * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimRadial * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimRadial * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimRadial * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimRadial * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimRadial * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimRadial * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimRadial * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimRadial * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimRadial * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimRadial * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimRadial * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimRadial * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimRadial * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimRadial * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimRadial * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimRadial * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimRadial * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimRadial * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimRadial * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimRadial * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimRadial * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLength )( 
            IGcadDimRadial * This,
            /* [in] */ double rhs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimRadial * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterType )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimCenterType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterType )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimCenterType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )( 
            IGcadDimRadial * This,
            /* [in] */ double Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimRadial * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineSuppress )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineSuppress )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimRadial * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimRadial * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )( 
            IGcadDimRadial * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )( 
            IGcadDimRadial * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimRadial * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDimRadial * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDimRadial * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDimRadial * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDimRadial * This,
            /* [in] */ BSTR bstrDescription);
        
        END_INTERFACE
    } IGcadDimRadialVtbl;

    interface IGcadDimRadial
    {
        CONST_VTBL struct IGcadDimRadialVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimRadial_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimRadial_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimRadial_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimRadial_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimRadial_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimRadial_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimRadial_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimRadial_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimRadial_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimRadial_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimRadial_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimRadial_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimRadial_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimRadial_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimRadial_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimRadial_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimRadial_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimRadial_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimRadial_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimRadial_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimRadial_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimRadial_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimRadial_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimRadial_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimRadial_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimRadial_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimRadial_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimRadial_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimRadial_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimRadial_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimRadial_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimRadial_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimRadial_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimRadial_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimRadial_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimRadial_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimRadial_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimRadial_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimRadial_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimRadial_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimRadial_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimRadial_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimRadial_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimRadial_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimRadial_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimRadial_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimRadial_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRadial_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRadial_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimRadial_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimRadial_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimRadial_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimRadial_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimRadial_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimRadial_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimRadial_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimRadial_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimRadial_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimRadial_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimRadial_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimRadial_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimRadial_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimRadial_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimRadial_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimRadial_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimRadial_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimRadial_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimRadial_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimRadial_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimRadial_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimRadial_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimRadial_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimRadial_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimRadial_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimRadial_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimRadial_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimRadial_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimRadial_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimRadial_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimRadial_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimRadial_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimRadial_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimRadial_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimRadial_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimRadial_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimRadial_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimRadial_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimRadial_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRadial_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRadial_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRadial_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRadial_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimRadial_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimRadial_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimRadial_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimRadial_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimRadial_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimRadial_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRadial_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRadial_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimRadial_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimRadial_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimRadial_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimRadial_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimRadial_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimRadial_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimRadial_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimRadial_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimRadial_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimRadial_put_LeaderLength(This,rhs)	\
    ( (This)->lpVtbl -> put_LeaderLength(This,rhs) ) 

#define IGcadDimRadial_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimRadial_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimRadial_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRadial_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRadial_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimRadial_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimRadial_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimRadial_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimRadial_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRadial_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRadial_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimRadial_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimRadial_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimRadial_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimRadial_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimRadial_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimRadial_get_CenterType(This,Type)	\
    ( (This)->lpVtbl -> get_CenterType(This,Type) ) 

#define IGcadDimRadial_put_CenterType(This,Type)	\
    ( (This)->lpVtbl -> put_CenterType(This,Type) ) 

#define IGcadDimRadial_get_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> get_CenterMarkSize(This,Type) ) 

#define IGcadDimRadial_put_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> put_CenterMarkSize(This,Type) ) 

#define IGcadDimRadial_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimRadial_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimRadial_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRadial_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRadial_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimRadial_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimRadial_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimRadial_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimRadial_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimRadial_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimRadial_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimRadial_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimRadial_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimRadial_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimRadial_get_DimLineSuppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLineSuppress(This,bSuppress) ) 

#define IGcadDimRadial_put_DimLineSuppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLineSuppress(This,bSuppress) ) 

#define IGcadDimRadial_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimRadial_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimRadial_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimRadial_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimRadial_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimRadial_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimRadial_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRadial_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRadial_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadial_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadial_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadial_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadial_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimRadial_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimRadial_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimRadial_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimRadial_get_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> get_ArrowheadType(This,Type) ) 

#define IGcadDimRadial_put_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> put_ArrowheadType(This,Type) ) 

#define IGcadDimRadial_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimRadial_get_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> get_ArrowheadBlock(This,BlockName) ) 

#define IGcadDimRadial_put_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> put_ArrowheadBlock(This,BlockName) ) 

#define IGcadDimRadial_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimRadial_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimRadial_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimRadial_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDimRadial_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDimRadial_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDimRadial_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDimRadial_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDimRadial_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimRadial_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDimRadial_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDimRadial_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDimRadial_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDimRadial_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltUnitsFormat_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimUnits *Units);


void __RPC_STUB IGcadDimRadial_get_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltUnitsFormat_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimRadial_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltTextPrefix_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRadial_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltTextPrefix_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRadial_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltTextSuffix_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRadial_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltTextSuffix_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRadial_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_CenterType_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimCenterType *Type);


void __RPC_STUB IGcadDimRadial_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_CenterType_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimCenterType Type);


void __RPC_STUB IGcadDimRadial_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_CenterMarkSize_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ double *Type);


void __RPC_STUB IGcadDimRadial_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_CenterMarkSize_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ double Type);


void __RPC_STUB IGcadDimRadial_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimensionLineColor_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimRadial_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimensionLineColor_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimRadial_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimRadial_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimRadial_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_FractionFormat_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimRadial_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_FractionFormat_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimRadial_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_Fit_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimRadial_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_Fit_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimRadial_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_LinearScaleFactor_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimRadial_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_LinearScaleFactor_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimRadial_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_UnitsFormat_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimRadial_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_UnitsFormat_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimRadial_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_RoundDistance_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimRadial_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_RoundDistance_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimRadial_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimLineSuppress_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRadial_get_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimLineSuppress_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRadial_put_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_TextInsideAlign_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadial_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_TextInsideAlign_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadial_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_TextInside_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadial_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_TextInside_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadial_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ForceLineInside_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadial_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ForceLineInside_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadial_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_TextOutsideAlign_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadial_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_TextOutsideAlign_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadial_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_SuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_SuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_SuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_SuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadial_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadial_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimensionLineWeight_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimRadial_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimensionLineWeight_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimRadial_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ArrowheadSize_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimRadial_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ArrowheadSize_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimRadial_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ArrowheadType_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimRadial_get_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ArrowheadType_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimRadial_put_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_Measurement_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimRadial_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_ArrowheadBlock_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimRadial_get_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_ArrowheadBlock_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimRadial_put_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimensionLinetype_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimRadial_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimensionLinetype_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimRadial_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrForm_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDimRadial_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrForm_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDimRadial_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrReference_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDimRadial_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrReference_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDimRadial_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrName_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDimRadial_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrName_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDimRadial_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrExpression_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDimRadial_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrExpression_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDimRadial_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrValue_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDimRadial_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrValue_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDimRadial_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_get_DimConstrDesc_Proxy( 
    IGcadDimRadial * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDimRadial_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadial_put_DimConstrDesc_Proxy( 
    IGcadDimRadial * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDimRadial_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimRadial_INTERFACE_DEFINED__ */


#ifndef __IGcadEllipse_INTERFACE_DEFINED__
#define __IGcadEllipse_INTERFACE_DEFINED__

/* interface IGcadEllipse */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadEllipse;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("579B69F1-0357-4D49-862F-ACFC174BE440")
    IGcadEllipse : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ VARIANT *StartPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *Center) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT Center) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ VARIANT *EndPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorRadius( 
            /* [retval][out] */ double *MajorRadius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorRadius( 
            /* [in] */ double MajorRadius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorRadius( 
            /* [retval][out] */ double *MinorRadius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinorRadius( 
            /* [in] */ double MinorRadius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RadiusRatio( 
            /* [retval][out] */ double *RadiusRatio) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RadiusRatio( 
            /* [in] */ double RadiusRatio) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartAngle( 
            /* [retval][out] */ GCAD_ANGLE *StartAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartAngle( 
            /* [in] */ GCAD_ANGLE StartAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndAngle( 
            /* [retval][out] */ GCAD_ANGLE *EndAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndAngle( 
            /* [in] */ GCAD_ANGLE EndAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartParameter( 
            /* [retval][out] */ double *StartParameter) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartParameter( 
            /* [in] */ double StartParameter) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndParameter( 
            /* [retval][out] */ double *EndParameter) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndParameter( 
            /* [in] */ double EndParameter) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorAxis( 
            /* [retval][out] */ VARIANT *MajorAxis) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorAxis( 
            /* [in] */ VARIANT MajorAxis) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorAxis( 
            /* [retval][out] */ VARIANT *MinorAxis) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadEllipseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadEllipse * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadEllipse * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadEllipse * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadEllipse * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadEllipse * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadEllipse * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadEllipse * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadEllipse * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadEllipse * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadEllipse * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadEllipse * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadEllipse * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadEllipse * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadEllipse * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadEllipse * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadEllipse * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadEllipse * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadEllipse * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadEllipse * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadEllipse * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadEllipse * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadEllipse * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadEllipse * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadEllipse * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadEllipse * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadEllipse * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadEllipse * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadEllipse * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadEllipse * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadEllipse * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadEllipse * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadEllipse * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadEllipse * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadEllipse * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadEllipse * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadEllipse * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadEllipse * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadEllipse * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadEllipse * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadEllipse * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *StartPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *Center);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT Center);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *EndPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorRadius )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *MajorRadius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorRadius )( 
            IGcadEllipse * This,
            /* [in] */ double MajorRadius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorRadius )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *MinorRadius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinorRadius )( 
            IGcadEllipse * This,
            /* [in] */ double MinorRadius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RadiusRatio )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *RadiusRatio);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RadiusRatio )( 
            IGcadEllipse * This,
            /* [in] */ double RadiusRatio);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartAngle )( 
            IGcadEllipse * This,
            /* [retval][out] */ GCAD_ANGLE *StartAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartAngle )( 
            IGcadEllipse * This,
            /* [in] */ GCAD_ANGLE StartAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndAngle )( 
            IGcadEllipse * This,
            /* [retval][out] */ GCAD_ANGLE *EndAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndAngle )( 
            IGcadEllipse * This,
            /* [in] */ GCAD_ANGLE EndAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartParameter )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *StartParameter);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartParameter )( 
            IGcadEllipse * This,
            /* [in] */ double StartParameter);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndParameter )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *EndParameter);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndParameter )( 
            IGcadEllipse * This,
            /* [in] */ double EndParameter);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorAxis )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *MajorAxis);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorAxis )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT MajorAxis);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorAxis )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *MinorAxis);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadEllipse * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadEllipse * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadEllipse * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadEllipse * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        END_INTERFACE
    } IGcadEllipseVtbl;

    interface IGcadEllipse
    {
        CONST_VTBL struct IGcadEllipseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadEllipse_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadEllipse_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadEllipse_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadEllipse_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadEllipse_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadEllipse_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadEllipse_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadEllipse_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadEllipse_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadEllipse_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadEllipse_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadEllipse_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadEllipse_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadEllipse_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadEllipse_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadEllipse_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadEllipse_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadEllipse_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadEllipse_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadEllipse_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadEllipse_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadEllipse_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadEllipse_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadEllipse_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadEllipse_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadEllipse_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadEllipse_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadEllipse_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadEllipse_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadEllipse_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadEllipse_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadEllipse_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadEllipse_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadEllipse_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadEllipse_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadEllipse_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadEllipse_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadEllipse_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadEllipse_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadEllipse_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadEllipse_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadEllipse_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadEllipse_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadEllipse_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadEllipse_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadEllipse_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadEllipse_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadEllipse_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadEllipse_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadEllipse_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadEllipse_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadEllipse_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadEllipse_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadEllipse_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadEllipse_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadEllipse_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadEllipse_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadEllipse_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadEllipse_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadEllipse_get_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> get_StartPoint(This,StartPoint) ) 

#define IGcadEllipse_get_Center(This,Center)	\
    ( (This)->lpVtbl -> get_Center(This,Center) ) 

#define IGcadEllipse_put_Center(This,Center)	\
    ( (This)->lpVtbl -> put_Center(This,Center) ) 

#define IGcadEllipse_get_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> get_EndPoint(This,EndPoint) ) 

#define IGcadEllipse_get_MajorRadius(This,MajorRadius)	\
    ( (This)->lpVtbl -> get_MajorRadius(This,MajorRadius) ) 

#define IGcadEllipse_put_MajorRadius(This,MajorRadius)	\
    ( (This)->lpVtbl -> put_MajorRadius(This,MajorRadius) ) 

#define IGcadEllipse_get_MinorRadius(This,MinorRadius)	\
    ( (This)->lpVtbl -> get_MinorRadius(This,MinorRadius) ) 

#define IGcadEllipse_put_MinorRadius(This,MinorRadius)	\
    ( (This)->lpVtbl -> put_MinorRadius(This,MinorRadius) ) 

#define IGcadEllipse_get_RadiusRatio(This,RadiusRatio)	\
    ( (This)->lpVtbl -> get_RadiusRatio(This,RadiusRatio) ) 

#define IGcadEllipse_put_RadiusRatio(This,RadiusRatio)	\
    ( (This)->lpVtbl -> put_RadiusRatio(This,RadiusRatio) ) 

#define IGcadEllipse_get_StartAngle(This,StartAngle)	\
    ( (This)->lpVtbl -> get_StartAngle(This,StartAngle) ) 

#define IGcadEllipse_put_StartAngle(This,StartAngle)	\
    ( (This)->lpVtbl -> put_StartAngle(This,StartAngle) ) 

#define IGcadEllipse_get_EndAngle(This,EndAngle)	\
    ( (This)->lpVtbl -> get_EndAngle(This,EndAngle) ) 

#define IGcadEllipse_put_EndAngle(This,EndAngle)	\
    ( (This)->lpVtbl -> put_EndAngle(This,EndAngle) ) 

#define IGcadEllipse_get_StartParameter(This,StartParameter)	\
    ( (This)->lpVtbl -> get_StartParameter(This,StartParameter) ) 

#define IGcadEllipse_put_StartParameter(This,StartParameter)	\
    ( (This)->lpVtbl -> put_StartParameter(This,StartParameter) ) 

#define IGcadEllipse_get_EndParameter(This,EndParameter)	\
    ( (This)->lpVtbl -> get_EndParameter(This,EndParameter) ) 

#define IGcadEllipse_put_EndParameter(This,EndParameter)	\
    ( (This)->lpVtbl -> put_EndParameter(This,EndParameter) ) 

#define IGcadEllipse_get_MajorAxis(This,MajorAxis)	\
    ( (This)->lpVtbl -> get_MajorAxis(This,MajorAxis) ) 

#define IGcadEllipse_put_MajorAxis(This,MajorAxis)	\
    ( (This)->lpVtbl -> put_MajorAxis(This,MajorAxis) ) 

#define IGcadEllipse_get_MinorAxis(This,MinorAxis)	\
    ( (This)->lpVtbl -> get_MinorAxis(This,MinorAxis) ) 

#define IGcadEllipse_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadEllipse_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadEllipse_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadEllipse_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadEllipse_INTERFACE_DEFINED__ */


#ifndef __IGcadLeader_INTERFACE_DEFINED__
#define __IGcadLeader_INTERFACE_DEFINED__

/* interface IGcadLeader */
/* [object][oleautomation][dual][helpstring][uuid] */ 


EXTERN_C const IID IID_IGcadLeader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A6743AA3-3291-481F-B9BC-72CDFF5CB34B")
    IGcadLeader : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ GcLeaderType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ GcLeaderType Type) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Evaluate( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Annotation( 
            /* [retval][out] */ IGcadEntity **pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Annotation( 
            /* [in] */ IGcadEntity *pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadType( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadType( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalTextPosition( 
            /* [retval][out] */ GcDimVerticalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalTextPosition( 
            /* [in] */ GcDimVerticalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGap( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGap( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadBlock( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadBlock( 
            /* [in] */ BSTR BlockName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLeaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLeader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLeader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLeader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLeader * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLeader * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLeader * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLeader * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLeader * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLeader * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLeader * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLeader * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLeader * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLeader * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLeader * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLeader * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLeader * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLeader * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLeader * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLeader * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLeader * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLeader * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLeader * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLeader * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLeader * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLeader * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLeader * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLeader * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLeader * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLeader * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLeader * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLeader * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLeader * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLeader * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLeader * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLeader * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLeader * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLeader * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLeader * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLeader * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLeader * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLeader * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLeader * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLeader * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLeader * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLeader * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadLeader * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadLeader * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadLeader * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadLeader * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IGcadLeader * This,
            /* [retval][out] */ GcLeaderType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IGcadLeader * This,
            /* [in] */ GcLeaderType Type);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Evaluate )( 
            IGcadLeader * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadLeader * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadLeader * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Annotation )( 
            IGcadLeader * This,
            /* [retval][out] */ IGcadEntity **pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Annotation )( 
            IGcadLeader * This,
            /* [in] */ IGcadEntity *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadLeader * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadLeader * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )( 
            IGcadLeader * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )( 
            IGcadLeader * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadLeader * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadLeader * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadLeader * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadLeader * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadLeader * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadLeader * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadLeader * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadLeader * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )( 
            IGcadLeader * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )( 
            IGcadLeader * This,
            /* [in] */ BSTR BlockName);
        
        END_INTERFACE
    } IGcadLeaderVtbl;

    interface IGcadLeader
    {
        CONST_VTBL struct IGcadLeaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLeader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLeader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLeader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLeader_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLeader_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLeader_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLeader_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLeader_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLeader_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLeader_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLeader_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLeader_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLeader_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLeader_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLeader_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLeader_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLeader_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLeader_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLeader_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLeader_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLeader_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLeader_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLeader_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLeader_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLeader_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLeader_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLeader_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLeader_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLeader_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLeader_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLeader_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLeader_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLeader_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLeader_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLeader_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLeader_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLeader_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLeader_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLeader_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLeader_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLeader_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLeader_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLeader_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLeader_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLeader_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLeader_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLeader_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLeader_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLeader_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLeader_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLeader_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLeader_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLeader_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLeader_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLeader_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLeader_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLeader_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLeader_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLeader_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLeader_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcadLeader_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcadLeader_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadLeader_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadLeader_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadLeader_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IGcadLeader_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define IGcadLeader_Evaluate(This)	\
    ( (This)->lpVtbl -> Evaluate(This) ) 

#define IGcadLeader_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadLeader_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadLeader_get_Annotation(This,pVal)	\
    ( (This)->lpVtbl -> get_Annotation(This,pVal) ) 

#define IGcadLeader_put_Annotation(This,pVal)	\
    ( (This)->lpVtbl -> put_Annotation(This,pVal) ) 

#define IGcadLeader_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadLeader_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadLeader_get_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> get_ArrowheadType(This,Type) ) 

#define IGcadLeader_put_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> put_ArrowheadType(This,Type) ) 

#define IGcadLeader_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadLeader_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadLeader_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadLeader_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadLeader_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadLeader_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadLeader_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadLeader_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadLeader_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadLeader_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadLeader_get_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> get_ArrowheadBlock(This,BlockName) ) 

#define IGcadLeader_put_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> put_ArrowheadBlock(This,BlockName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLeader_INTERFACE_DEFINED__ */


#ifndef __IGcadMText_INTERFACE_DEFINED__
#define __IGcadMText_INTERFACE_DEFINED__

/* interface IGcadMText */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadMText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C4246B9D-8CD3-409B-80BA-DA0EB0F62D89")
    IGcadMText : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AttachmentPoint( 
            /* [retval][out] */ GcAttachmentPoint *attPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AttachmentPoint( 
            /* [in] */ GcAttachmentPoint attPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DrawingDirection( 
            /* [retval][out] */ GcDrawingDirection *drawDir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DrawingDirection( 
            /* [in] */ GcDrawingDirection drawDir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingStyle( 
            /* [retval][out] */ GcLineSpacingStyle *style) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingStyle( 
            /* [in] */ GcLineSpacingStyle style) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingDistance( 
            /* [retval][out] */ double *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingDistance( 
            /* [in] */ double Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundFill( 
            /* [retval][out] */ VARIANT_BOOL *bUseBackgroundFill) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundFill( 
            /* [in] */ VARIANT_BOOL bUseBackgroundFill) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FieldCode( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMText * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMText * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMText * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMText * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMText * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMText * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMText * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMText * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMText * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMText * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMText * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMText * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMText * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMText * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMText * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadMText * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadMText * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadMText * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadMText * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadMText * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadMText * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadMText * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadMText * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadMText * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadMText * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadMText * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadMText * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadMText * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadMText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadMText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadMText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadMText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadMText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadMText * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadMText * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadMText * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadMText * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadMText * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadMText * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadMText * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadMText * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadMText * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadMText * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadMText * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadMText * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadMText * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadMText * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadMText * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttachmentPoint )( 
            IGcadMText * This,
            /* [retval][out] */ GcAttachmentPoint *attPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttachmentPoint )( 
            IGcadMText * This,
            /* [in] */ GcAttachmentPoint attPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingDirection )( 
            IGcadMText * This,
            /* [retval][out] */ GcDrawingDirection *drawDir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DrawingDirection )( 
            IGcadMText * This,
            /* [in] */ GcDrawingDirection drawDir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadMText * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadMText * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadMText * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadMText * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadMText * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadMText * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadMText * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadMText * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadMText * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadMText * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingFactor )( 
            IGcadMText * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingFactor )( 
            IGcadMText * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingStyle )( 
            IGcadMText * This,
            /* [retval][out] */ GcLineSpacingStyle *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingStyle )( 
            IGcadMText * This,
            /* [in] */ GcLineSpacingStyle style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingDistance )( 
            IGcadMText * This,
            /* [retval][out] */ double *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingDistance )( 
            IGcadMText * This,
            /* [in] */ double Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundFill )( 
            IGcadMText * This,
            /* [retval][out] */ VARIANT_BOOL *bUseBackgroundFill);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundFill )( 
            IGcadMText * This,
            /* [in] */ VARIANT_BOOL bUseBackgroundFill);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *FieldCode )( 
            IGcadMText * This,
            /* [retval][out] */ BSTR *bstrText);
        
        END_INTERFACE
    } IGcadMTextVtbl;

    interface IGcadMText
    {
        CONST_VTBL struct IGcadMTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMText_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMText_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMText_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMText_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMText_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMText_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMText_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMText_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMText_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMText_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMText_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMText_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMText_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMText_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMText_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMText_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadMText_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadMText_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadMText_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadMText_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadMText_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadMText_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadMText_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadMText_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadMText_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadMText_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadMText_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadMText_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadMText_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadMText_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadMText_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadMText_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadMText_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadMText_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadMText_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadMText_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadMText_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadMText_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadMText_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadMText_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadMText_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadMText_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadMText_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadMText_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadMText_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadMText_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadMText_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadMText_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadMText_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadMText_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadMText_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadMText_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadMText_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadMText_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadMText_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadMText_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadMText_get_AttachmentPoint(This,attPoint)	\
    ( (This)->lpVtbl -> get_AttachmentPoint(This,attPoint) ) 

#define IGcadMText_put_AttachmentPoint(This,attPoint)	\
    ( (This)->lpVtbl -> put_AttachmentPoint(This,attPoint) ) 

#define IGcadMText_get_DrawingDirection(This,drawDir)	\
    ( (This)->lpVtbl -> get_DrawingDirection(This,drawDir) ) 

#define IGcadMText_put_DrawingDirection(This,drawDir)	\
    ( (This)->lpVtbl -> put_DrawingDirection(This,drawDir) ) 

#define IGcadMText_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadMText_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadMText_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadMText_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadMText_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadMText_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadMText_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadMText_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadMText_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadMText_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadMText_get_LineSpacingFactor(This,factor)	\
    ( (This)->lpVtbl -> get_LineSpacingFactor(This,factor) ) 

#define IGcadMText_put_LineSpacingFactor(This,factor)	\
    ( (This)->lpVtbl -> put_LineSpacingFactor(This,factor) ) 

#define IGcadMText_get_LineSpacingStyle(This,style)	\
    ( (This)->lpVtbl -> get_LineSpacingStyle(This,style) ) 

#define IGcadMText_put_LineSpacingStyle(This,style)	\
    ( (This)->lpVtbl -> put_LineSpacingStyle(This,style) ) 

#define IGcadMText_get_LineSpacingDistance(This,Value)	\
    ( (This)->lpVtbl -> get_LineSpacingDistance(This,Value) ) 

#define IGcadMText_put_LineSpacingDistance(This,Value)	\
    ( (This)->lpVtbl -> put_LineSpacingDistance(This,Value) ) 

#define IGcadMText_get_BackgroundFill(This,bUseBackgroundFill)	\
    ( (This)->lpVtbl -> get_BackgroundFill(This,bUseBackgroundFill) ) 

#define IGcadMText_put_BackgroundFill(This,bUseBackgroundFill)	\
    ( (This)->lpVtbl -> put_BackgroundFill(This,bUseBackgroundFill) ) 

#define IGcadMText_FieldCode(This,bstrText)	\
    ( (This)->lpVtbl -> FieldCode(This,bstrText) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMText_INTERFACE_DEFINED__ */


#ifndef __IGcadPoint_INTERFACE_DEFINED__
#define __IGcadPoint_INTERFACE_DEFINED__

/* interface IGcadPoint */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16437D68-5238-44AC-8A9F-5A81851C30F9")
    IGcadPoint : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPoint * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPoint * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPoint * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPoint * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPoint * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPoint * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPoint * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPoint * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPoint * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPoint * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPoint * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPoint * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPoint * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPoint * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadPoint * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadPoint * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadPoint * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadPoint * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadPoint * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadPoint * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadPoint * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadPoint * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadPoint * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadPoint * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadPoint * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadPoint * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadPoint * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadPoint * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadPoint * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadPoint * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadPoint * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadPoint * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadPoint * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadPoint * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadPoint * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadPoint * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadPoint * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadPoint * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadPoint * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadPoint * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadPoint * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadPoint * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadPoint * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadPoint * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadPoint * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadPoint * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadPoint * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadPoint * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadPoint * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadPoint * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadPoint * This,
            /* [in] */ double Thickness);
        
        END_INTERFACE
    } IGcadPointVtbl;

    interface IGcadPoint
    {
        CONST_VTBL struct IGcadPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPoint_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPoint_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPoint_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPoint_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPoint_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPoint_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPoint_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPoint_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPoint_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPoint_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPoint_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPoint_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPoint_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPoint_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPoint_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPoint_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadPoint_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadPoint_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadPoint_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadPoint_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadPoint_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadPoint_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadPoint_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadPoint_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadPoint_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadPoint_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadPoint_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadPoint_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadPoint_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadPoint_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadPoint_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadPoint_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadPoint_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadPoint_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadPoint_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadPoint_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadPoint_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadPoint_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadPoint_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadPoint_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadPoint_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadPoint_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadPoint_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadPoint_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadPoint_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadPoint_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadPoint_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadPoint_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadPoint_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadPoint_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadPoint_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadPoint_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadPoint_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcadPoint_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcadPoint_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadPoint_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadPoint_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadPoint_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPoint_INTERFACE_DEFINED__ */


#ifndef __IGcadLWPolyline_INTERFACE_DEFINED__
#define __IGcadLWPolyline_INTERFACE_DEFINED__

/* interface IGcadLWPolyline */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLWPolyline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F9FFCF6E-1C6E-4459-B816-AFEF3B112FF0")
    IGcadLWPolyline : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddVertex( 
            /* [in] */ int Index,
            /* [in] */ VARIANT vertex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBulge( 
            /* [in] */ int Index,
            /* [retval][out] */ double *bulge) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBulge( 
            /* [in] */ int Index,
            /* [in] */ double bulge) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetWidth( 
            /* [in] */ int Index,
            /* [out] */ double *StartWidth,
            /* [out] */ double *EndWidth) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int Index,
            /* [in] */ double StartWidth,
            /* [in] */ double EndWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConstantWidth( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConstantWidth( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
            /* [retval][out] */ double *Elevation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
            /* [in] */ double Elevation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ VARIANT_BOOL *fClose) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Closed( 
            /* [in] */ VARIANT_BOOL fClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinetypeGeneration( 
            /* [retval][out] */ VARIANT_BOOL *bLinetypeGen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinetypeGeneration( 
            /* [in] */ VARIANT_BOOL bLinetypeGen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ double *Length) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLWPolylineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLWPolyline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLWPolyline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLWPolyline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLWPolyline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLWPolyline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLWPolyline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLWPolyline * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLWPolyline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLWPolyline * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLWPolyline * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLWPolyline * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLWPolyline * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLWPolyline * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLWPolyline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLWPolyline * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLWPolyline * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLWPolyline * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLWPolyline * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLWPolyline * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadLWPolyline * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddVertex )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT vertex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBulge )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [retval][out] */ double *bulge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBulge )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [in] */ double bulge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWidth )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [out] */ double *StartWidth,
            /* [out] */ double *EndWidth);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [in] */ double StartWidth,
            /* [in] */ double EndWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConstantWidth )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConstantWidth )( 
            IGcadLWPolyline * This,
            /* [in] */ double Width);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadLWPolyline * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ double *Elevation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            IGcadLWPolyline * This,
            /* [in] */ double Elevation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadLWPolyline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *fClose);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Closed )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT_BOOL fClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeGeneration )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bLinetypeGen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeGeneration )( 
            IGcadLWPolyline * This,
            /* [in] */ VARIANT_BOOL bLinetypeGen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IGcadLWPolyline * This,
            /* [retval][out] */ double *Length);
        
        END_INTERFACE
    } IGcadLWPolylineVtbl;

    interface IGcadLWPolyline
    {
        CONST_VTBL struct IGcadLWPolylineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLWPolyline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLWPolyline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLWPolyline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLWPolyline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLWPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLWPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLWPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLWPolyline_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLWPolyline_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLWPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLWPolyline_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLWPolyline_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLWPolyline_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLWPolyline_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLWPolyline_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLWPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLWPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLWPolyline_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLWPolyline_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLWPolyline_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLWPolyline_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLWPolyline_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLWPolyline_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLWPolyline_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLWPolyline_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLWPolyline_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLWPolyline_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLWPolyline_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLWPolyline_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLWPolyline_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLWPolyline_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLWPolyline_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLWPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLWPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLWPolyline_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLWPolyline_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLWPolyline_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLWPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLWPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLWPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLWPolyline_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLWPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLWPolyline_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLWPolyline_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLWPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLWPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLWPolyline_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLWPolyline_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLWPolyline_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLWPolyline_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLWPolyline_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLWPolyline_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLWPolyline_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLWPolyline_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLWPolyline_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLWPolyline_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLWPolyline_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLWPolyline_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLWPolyline_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLWPolyline_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcadLWPolyline_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcadLWPolyline_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadLWPolyline_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadLWPolyline_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadLWPolyline_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadLWPolyline_AddVertex(This,Index,vertex)	\
    ( (This)->lpVtbl -> AddVertex(This,Index,vertex) ) 

#define IGcadLWPolyline_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadLWPolyline_GetBulge(This,Index,bulge)	\
    ( (This)->lpVtbl -> GetBulge(This,Index,bulge) ) 

#define IGcadLWPolyline_SetBulge(This,Index,bulge)	\
    ( (This)->lpVtbl -> SetBulge(This,Index,bulge) ) 

#define IGcadLWPolyline_GetWidth(This,Index,StartWidth,EndWidth)	\
    ( (This)->lpVtbl -> GetWidth(This,Index,StartWidth,EndWidth) ) 

#define IGcadLWPolyline_SetWidth(This,Index,StartWidth,EndWidth)	\
    ( (This)->lpVtbl -> SetWidth(This,Index,StartWidth,EndWidth) ) 

#define IGcadLWPolyline_get_ConstantWidth(This,Width)	\
    ( (This)->lpVtbl -> get_ConstantWidth(This,Width) ) 

#define IGcadLWPolyline_put_ConstantWidth(This,Width)	\
    ( (This)->lpVtbl -> put_ConstantWidth(This,Width) ) 

#define IGcadLWPolyline_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#define IGcadLWPolyline_get_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> get_Elevation(This,Elevation) ) 

#define IGcadLWPolyline_put_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> put_Elevation(This,Elevation) ) 

#define IGcadLWPolyline_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadLWPolyline_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadLWPolyline_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadLWPolyline_get_Closed(This,fClose)	\
    ( (This)->lpVtbl -> get_Closed(This,fClose) ) 

#define IGcadLWPolyline_put_Closed(This,fClose)	\
    ( (This)->lpVtbl -> put_Closed(This,fClose) ) 

#define IGcadLWPolyline_get_LinetypeGeneration(This,bLinetypeGen)	\
    ( (This)->lpVtbl -> get_LinetypeGeneration(This,bLinetypeGen) ) 

#define IGcadLWPolyline_put_LinetypeGeneration(This,bLinetypeGen)	\
    ( (This)->lpVtbl -> put_LinetypeGeneration(This,bLinetypeGen) ) 

#define IGcadLWPolyline_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLWPolyline_INTERFACE_DEFINED__ */


#ifndef __IGcadPolyline_INTERFACE_DEFINED__
#define __IGcadPolyline_INTERFACE_DEFINED__

/* interface IGcadPolyline */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPolyline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4314685E-25D6-468D-986B-67FC64CB3475")
    IGcadPolyline : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Coordinates) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Coordinates) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendVertex( 
            /* [in] */ VARIANT vertex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBulge( 
            /* [in] */ int Index,
            /* [retval][out] */ double *bulge) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBulge( 
            /* [in] */ int Index,
            /* [in] */ double bulge) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetWidth( 
            /* [in] */ int Index,
            /* [out] */ double *StartWidth,
            double *EndWidth) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int Index,
            /* [in] */ double StartWidth,
            double EndWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConstantWidth( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConstantWidth( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
            /* [retval][out] */ double *Elevation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
            /* [in] */ double Elevation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ GcPolylineType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ GcPolylineType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ VARIANT_BOOL *fClose) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Closed( 
            /* [in] */ VARIANT_BOOL fClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinetypeGeneration( 
            /* [retval][out] */ VARIANT_BOOL *bLinetypeGen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinetypeGeneration( 
            /* [in] */ VARIANT_BOOL bLinetypeGen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ double *Length) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPolylineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPolyline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPolyline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPolyline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPolyline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPolyline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPolyline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPolyline * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPolyline * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPolyline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPolyline * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPolyline * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPolyline * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPolyline * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPolyline * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPolyline * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPolyline * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPolyline * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPolyline * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadPolyline * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadPolyline * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadPolyline * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadPolyline * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadPolyline * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadPolyline * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadPolyline * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadPolyline * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadPolyline * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadPolyline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadPolyline * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadPolyline * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadPolyline * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadPolyline * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadPolyline * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadPolyline * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadPolyline * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadPolyline * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadPolyline * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadPolyline * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadPolyline * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadPolyline * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT *Coordinates);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT Coordinates);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadPolyline * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadPolyline * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendVertex )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT vertex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBulge )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [retval][out] */ double *bulge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBulge )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [in] */ double bulge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWidth )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [out] */ double *StartWidth,
            double *EndWidth);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [in] */ double StartWidth,
            double EndWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConstantWidth )( 
            IGcadPolyline * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConstantWidth )( 
            IGcadPolyline * This,
            /* [in] */ double Width);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadPolyline * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            IGcadPolyline * This,
            /* [retval][out] */ double *Elevation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            IGcadPolyline * This,
            /* [in] */ double Elevation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IGcadPolyline * This,
            /* [retval][out] */ GcPolylineType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IGcadPolyline * This,
            /* [in] */ GcPolylineType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *fClose);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Closed )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT_BOOL fClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeGeneration )( 
            IGcadPolyline * This,
            /* [retval][out] */ VARIANT_BOOL *bLinetypeGen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeGeneration )( 
            IGcadPolyline * This,
            /* [in] */ VARIANT_BOOL bLinetypeGen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadPolyline * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadPolyline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IGcadPolyline * This,
            /* [retval][out] */ double *Length);
        
        END_INTERFACE
    } IGcadPolylineVtbl;

    interface IGcadPolyline
    {
        CONST_VTBL struct IGcadPolylineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPolyline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPolyline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPolyline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPolyline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPolyline_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPolyline_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPolyline_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPolyline_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPolyline_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPolyline_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPolyline_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPolyline_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPolyline_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPolyline_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPolyline_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPolyline_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPolyline_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadPolyline_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadPolyline_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadPolyline_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadPolyline_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadPolyline_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadPolyline_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadPolyline_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadPolyline_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadPolyline_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadPolyline_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadPolyline_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadPolyline_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadPolyline_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadPolyline_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadPolyline_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadPolyline_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadPolyline_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadPolyline_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadPolyline_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadPolyline_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadPolyline_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadPolyline_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadPolyline_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadPolyline_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadPolyline_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadPolyline_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadPolyline_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadPolyline_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadPolyline_get_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Coordinates) ) 

#define IGcadPolyline_put_Coordinates(This,Coordinates)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Coordinates) ) 

#define IGcadPolyline_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadPolyline_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadPolyline_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadPolyline_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadPolyline_AppendVertex(This,vertex)	\
    ( (This)->lpVtbl -> AppendVertex(This,vertex) ) 

#define IGcadPolyline_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadPolyline_GetBulge(This,Index,bulge)	\
    ( (This)->lpVtbl -> GetBulge(This,Index,bulge) ) 

#define IGcadPolyline_SetBulge(This,Index,bulge)	\
    ( (This)->lpVtbl -> SetBulge(This,Index,bulge) ) 

#define IGcadPolyline_GetWidth(This,Index,StartWidth,EndWidth)	\
    ( (This)->lpVtbl -> GetWidth(This,Index,StartWidth,EndWidth) ) 

#define IGcadPolyline_SetWidth(This,Index,StartWidth,EndWidth)	\
    ( (This)->lpVtbl -> SetWidth(This,Index,StartWidth,EndWidth) ) 

#define IGcadPolyline_get_ConstantWidth(This,Width)	\
    ( (This)->lpVtbl -> get_ConstantWidth(This,Width) ) 

#define IGcadPolyline_put_ConstantWidth(This,Width)	\
    ( (This)->lpVtbl -> put_ConstantWidth(This,Width) ) 

#define IGcadPolyline_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#define IGcadPolyline_get_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> get_Elevation(This,Elevation) ) 

#define IGcadPolyline_put_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> put_Elevation(This,Elevation) ) 

#define IGcadPolyline_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IGcadPolyline_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define IGcadPolyline_get_Closed(This,fClose)	\
    ( (This)->lpVtbl -> get_Closed(This,fClose) ) 

#define IGcadPolyline_put_Closed(This,fClose)	\
    ( (This)->lpVtbl -> put_Closed(This,fClose) ) 

#define IGcadPolyline_get_LinetypeGeneration(This,bLinetypeGen)	\
    ( (This)->lpVtbl -> get_LinetypeGeneration(This,bLinetypeGen) ) 

#define IGcadPolyline_put_LinetypeGeneration(This,bLinetypeGen)	\
    ( (This)->lpVtbl -> put_LinetypeGeneration(This,bLinetypeGen) ) 

#define IGcadPolyline_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadPolyline_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadPolyline_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadPolyline_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPolyline_INTERFACE_DEFINED__ */


#ifndef __IGcadRay_INTERFACE_DEFINED__
#define __IGcadRay_INTERFACE_DEFINED__

/* interface IGcadRay */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadRay;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2164BEEB-C8EA-4569-B82E-267ADC73E750")
    IGcadRay : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BasePoint( 
            /* [retval][out] */ VARIANT *BasePoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BasePoint( 
            /* [in] */ VARIANT BasePoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecondPoint( 
            /* [retval][out] */ VARIANT *SecondPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SecondPoint( 
            /* [in] */ VARIANT SecondPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DirectionVector( 
            /* [retval][out] */ VARIANT *dirVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DirectionVector( 
            /* [in] */ VARIANT dirVector) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadRayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadRay * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadRay * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadRay * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadRay * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadRay * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadRay * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadRay * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadRay * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadRay * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadRay * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadRay * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadRay * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadRay * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadRay * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadRay * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadRay * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadRay * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadRay * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadRay * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadRay * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadRay * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadRay * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadRay * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadRay * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadRay * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadRay * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadRay * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadRay * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadRay * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadRay * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadRay * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadRay * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadRay * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadRay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadRay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadRay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadRay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadRay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadRay * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadRay * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadRay * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadRay * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadRay * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadRay * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadRay * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadRay * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadRay * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadRay * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadRay * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadRay * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadRay * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadRay * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BasePoint )( 
            IGcadRay * This,
            /* [retval][out] */ VARIANT *BasePoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BasePoint )( 
            IGcadRay * This,
            /* [in] */ VARIANT BasePoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecondPoint )( 
            IGcadRay * This,
            /* [retval][out] */ VARIANT *SecondPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SecondPoint )( 
            IGcadRay * This,
            /* [in] */ VARIANT SecondPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )( 
            IGcadRay * This,
            /* [retval][out] */ VARIANT *dirVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )( 
            IGcadRay * This,
            /* [in] */ VARIANT dirVector);
        
        END_INTERFACE
    } IGcadRayVtbl;

    interface IGcadRay
    {
        CONST_VTBL struct IGcadRayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadRay_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadRay_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadRay_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadRay_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadRay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadRay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadRay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadRay_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadRay_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadRay_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadRay_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadRay_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadRay_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadRay_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadRay_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadRay_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadRay_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadRay_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadRay_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadRay_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadRay_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadRay_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadRay_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadRay_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadRay_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadRay_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadRay_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadRay_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadRay_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadRay_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadRay_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadRay_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadRay_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadRay_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadRay_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadRay_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadRay_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadRay_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadRay_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadRay_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadRay_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadRay_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadRay_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadRay_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadRay_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadRay_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadRay_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadRay_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadRay_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadRay_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadRay_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadRay_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadRay_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadRay_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadRay_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadRay_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadRay_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadRay_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadRay_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadRay_get_BasePoint(This,BasePoint)	\
    ( (This)->lpVtbl -> get_BasePoint(This,BasePoint) ) 

#define IGcadRay_put_BasePoint(This,BasePoint)	\
    ( (This)->lpVtbl -> put_BasePoint(This,BasePoint) ) 

#define IGcadRay_get_SecondPoint(This,SecondPoint)	\
    ( (This)->lpVtbl -> get_SecondPoint(This,SecondPoint) ) 

#define IGcadRay_put_SecondPoint(This,SecondPoint)	\
    ( (This)->lpVtbl -> put_SecondPoint(This,SecondPoint) ) 

#define IGcadRay_get_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> get_DirectionVector(This,dirVector) ) 

#define IGcadRay_put_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> put_DirectionVector(This,dirVector) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadRay_INTERFACE_DEFINED__ */


#ifndef __IGcadShape_INTERFACE_DEFINED__
#define __IGcadShape_INTERFACE_DEFINED__

/* interface IGcadShape */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadShape;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DEECFFA3-E10D-4CB6-AAC6-0BB1CB264A26")
    IGcadShape : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *scalFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS scalFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObliqueAngle( 
            /* [retval][out] */ GCAD_ANGLE *obliAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObliqueAngle( 
            /* [in] */ GCAD_ANGLE obliAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadShapeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadShape * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadShape * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadShape * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadShape * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadShape * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadShape * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadShape * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadShape * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadShape * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadShape * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadShape * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadShape * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadShape * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadShape * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadShape * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadShape * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadShape * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadShape * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadShape * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadShape * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadShape * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadShape * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadShape * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadShape * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadShape * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadShape * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadShape * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadShape * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadShape * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadShape * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadShape * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadShape * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadShape * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadShape * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadShape * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadShape * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadShape * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadShape * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadShape * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadShape * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadShape * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadShape * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadShape * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadShape * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadShape * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadShape * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadShape * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadShape * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadShape * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadShape * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadShape * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadShape * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadShape * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadShape * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadShape * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_NOUNITS *scalFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadShape * This,
            /* [in] */ GCAD_NOUNITS scalFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )( 
            IGcadShape * This,
            /* [retval][out] */ GCAD_ANGLE *obliAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )( 
            IGcadShape * This,
            /* [in] */ GCAD_ANGLE obliAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadShape * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadShape * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadShape * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadShape * This,
            /* [in] */ double Thickness);
        
        END_INTERFACE
    } IGcadShapeVtbl;

    interface IGcadShape
    {
        CONST_VTBL struct IGcadShapeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadShape_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadShape_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadShape_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadShape_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadShape_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadShape_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadShape_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadShape_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadShape_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadShape_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadShape_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadShape_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadShape_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadShape_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadShape_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadShape_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadShape_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadShape_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadShape_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadShape_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadShape_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadShape_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadShape_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadShape_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadShape_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadShape_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadShape_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadShape_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadShape_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadShape_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadShape_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadShape_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadShape_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadShape_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadShape_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadShape_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadShape_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadShape_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadShape_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadShape_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadShape_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadShape_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadShape_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadShape_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadShape_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadShape_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadShape_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadShape_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadShape_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadShape_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadShape_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadShape_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadShape_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadShape_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadShape_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadShape_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadShape_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadShape_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadShape_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadShape_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadShape_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadShape_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadShape_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadShape_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadShape_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadShape_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadShape_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadShape_get_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scalFactor) ) 

#define IGcadShape_put_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scalFactor) ) 

#define IGcadShape_get_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> get_ObliqueAngle(This,obliAngle) ) 

#define IGcadShape_put_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> put_ObliqueAngle(This,obliAngle) ) 

#define IGcadShape_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadShape_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadShape_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadShape_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadShape_INTERFACE_DEFINED__ */


#ifndef __IGcadSolid_INTERFACE_DEFINED__
#define __IGcadSolid_INTERFACE_DEFINED__

/* interface IGcadSolid */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSolid;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C8846F33-E2BC-4FD3-9E3C-3EB7CB5BBEFA")
    IGcadSolid : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *corners) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT corners) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSolidVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSolid * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSolid * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSolid * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSolid * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSolid * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSolid * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSolid * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSolid * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSolid * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSolid * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSolid * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSolid * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSolid * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSolid * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSolid * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSolid * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSolid * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSolid * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSolid * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSolid * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSolid * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSolid * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSolid * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSolid * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSolid * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSolid * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSolid * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSolid * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSolid * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSolid * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSolid * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSolid * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSolid * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSolid * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSolid * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSolid * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSolid * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSolid * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSolid * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSolid * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSolid * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSolid * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSolid * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSolid * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSolid * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSolid * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSolid * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSolid * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSolid * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSolid * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadSolid * This,
            /* [retval][out] */ VARIANT *corners);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadSolid * This,
            /* [in] */ VARIANT corners);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadSolid * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadSolid * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadSolid * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadSolid * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadSolid * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadSolid * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        END_INTERFACE
    } IGcadSolidVtbl;

    interface IGcadSolid
    {
        CONST_VTBL struct IGcadSolidVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSolid_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSolid_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSolid_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSolid_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSolid_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSolid_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSolid_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSolid_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSolid_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSolid_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSolid_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSolid_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSolid_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSolid_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSolid_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSolid_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSolid_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSolid_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSolid_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSolid_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSolid_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSolid_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSolid_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSolid_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSolid_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSolid_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSolid_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSolid_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSolid_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSolid_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSolid_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSolid_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSolid_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSolid_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSolid_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSolid_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSolid_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSolid_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSolid_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSolid_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSolid_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSolid_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSolid_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSolid_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSolid_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSolid_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSolid_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSolid_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSolid_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSolid_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSolid_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSolid_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSolid_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSolid_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSolid_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSolid_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSolid_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSolid_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSolid_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSolid_get_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> get_Coordinates(This,corners) ) 

#define IGcadSolid_put_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> put_Coordinates(This,corners) ) 

#define IGcadSolid_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadSolid_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadSolid_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadSolid_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadSolid_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadSolid_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSolid_INTERFACE_DEFINED__ */


#ifndef __IGcadSpline_INTERFACE_DEFINED__
#define __IGcadSpline_INTERFACE_DEFINED__

/* interface IGcadSpline */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSpline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EAC5700E-0AB7-4954-AEB5-94395A0C7093")
    IGcadSpline : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfControlPoints( 
            /* [retval][out] */ long *numCtrlPoints) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ControlPoints( 
            /* [retval][out] */ VARIANT *controlPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ControlPoints( 
            /* [in] */ VARIANT controlPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfFitPoints( 
            /* [retval][out] */ long *numFitPoints) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitPoints( 
            /* [retval][out] */ VARIANT *fitPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitPoints( 
            /* [in] */ VARIANT fitPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Degree( 
            /* [retval][out] */ long *Degree) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ VARIANT_BOOL *fClose) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPlanar( 
            /* [retval][out] */ VARIANT_BOOL *fPlanar) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsRational( 
            /* [retval][out] */ VARIANT_BOOL *fRational) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPeriodic( 
            /* [retval][out] */ VARIANT_BOOL *fPeriodic) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartTangent( 
            /* [retval][out] */ VARIANT *StartTangent) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartTangent( 
            /* [in] */ VARIANT StartTangent) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndTangent( 
            /* [retval][out] */ VARIANT *EndTangent) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndTangent( 
            /* [in] */ VARIANT EndTangent) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitTolerance( 
            /* [retval][out] */ double *fitTol) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitTolerance( 
            /* [in] */ double fitTol) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetControlPoint( 
            /* [in] */ int Index,
            /* [in] */ VARIANT controlPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetControlPoint( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *controlPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetFitPoint( 
            /* [in] */ int Index,
            /* [in] */ VARIANT fitPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetFitPoint( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *fitPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetWeight( 
            /* [in] */ int Index,
            /* [in] */ double weight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetWeight( 
            /* [in] */ int Index,
            /* [retval][out] */ double *weight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddFitPoint( 
            /* [in] */ int Index,
            /* [in] */ VARIANT fitPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteFitPoint( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ElevateOrder( 
            /* [in] */ int Order) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PurgeFitData( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reverse( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Knots( 
            /* [retval][out] */ VARIANT *KnotValues) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Knots( 
            /* [in] */ VARIANT KnotValues) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Weights( 
            /* [retval][out] */ VARIANT *WeightValues) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Weights( 
            /* [in] */ VARIANT WeightValues) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Closed2( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closed2( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSplineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSpline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSpline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSpline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSpline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSpline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSpline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSpline * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSpline * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSpline * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSpline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSpline * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSpline * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSpline * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSpline * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSpline * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSpline * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSpline * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSpline * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSpline * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSpline * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSpline * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSpline * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSpline * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSpline * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSpline * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSpline * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSpline * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSpline * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSpline * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSpline * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSpline * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSpline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSpline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSpline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSpline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSpline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSpline * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSpline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSpline * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSpline * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSpline * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSpline * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSpline * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSpline * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSpline * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSpline * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSpline * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSpline * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSpline * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSpline * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfControlPoints )( 
            IGcadSpline * This,
            /* [retval][out] */ long *numCtrlPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ControlPoints )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *controlPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ControlPoints )( 
            IGcadSpline * This,
            /* [in] */ VARIANT controlPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFitPoints )( 
            IGcadSpline * This,
            /* [retval][out] */ long *numFitPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitPoints )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *fitPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitPoints )( 
            IGcadSpline * This,
            /* [in] */ VARIANT fitPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Degree )( 
            IGcadSpline * This,
            /* [retval][out] */ long *Degree);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *fClose);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPlanar )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *fPlanar);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsRational )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *fRational);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPeriodic )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *fPeriodic);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartTangent )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *StartTangent);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartTangent )( 
            IGcadSpline * This,
            /* [in] */ VARIANT StartTangent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndTangent )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *EndTangent);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndTangent )( 
            IGcadSpline * This,
            /* [in] */ VARIANT EndTangent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitTolerance )( 
            IGcadSpline * This,
            /* [retval][out] */ double *fitTol);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitTolerance )( 
            IGcadSpline * This,
            /* [in] */ double fitTol);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadSpline * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetControlPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT controlPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetControlPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *controlPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetFitPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT fitPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetFitPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *fitPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWeight )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [in] */ double weight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWeight )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [retval][out] */ double *weight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddFitPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT fitPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteFitPoint )( 
            IGcadSpline * This,
            /* [in] */ int Index);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ElevateOrder )( 
            IGcadSpline * This,
            /* [in] */ int Order);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadSpline * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PurgeFitData )( 
            IGcadSpline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reverse )( 
            IGcadSpline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Knots )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *KnotValues);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Knots )( 
            IGcadSpline * This,
            /* [in] */ VARIANT KnotValues);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Weights )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT *WeightValues);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Weights )( 
            IGcadSpline * This,
            /* [in] */ VARIANT WeightValues);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Closed2 )( 
            IGcadSpline * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closed2 )( 
            IGcadSpline * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        END_INTERFACE
    } IGcadSplineVtbl;

    interface IGcadSpline
    {
        CONST_VTBL struct IGcadSplineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSpline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSpline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSpline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSpline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSpline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSpline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSpline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSpline_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSpline_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSpline_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSpline_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSpline_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSpline_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSpline_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSpline_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSpline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSpline_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSpline_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSpline_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSpline_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSpline_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSpline_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSpline_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSpline_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSpline_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSpline_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSpline_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSpline_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSpline_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSpline_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSpline_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSpline_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSpline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSpline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSpline_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSpline_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSpline_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSpline_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSpline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSpline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSpline_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSpline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSpline_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSpline_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSpline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSpline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSpline_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSpline_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSpline_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSpline_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSpline_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSpline_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSpline_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSpline_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSpline_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSpline_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSpline_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSpline_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSpline_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSpline_get_NumberOfControlPoints(This,numCtrlPoints)	\
    ( (This)->lpVtbl -> get_NumberOfControlPoints(This,numCtrlPoints) ) 

#define IGcadSpline_get_ControlPoints(This,controlPoint)	\
    ( (This)->lpVtbl -> get_ControlPoints(This,controlPoint) ) 

#define IGcadSpline_put_ControlPoints(This,controlPoint)	\
    ( (This)->lpVtbl -> put_ControlPoints(This,controlPoint) ) 

#define IGcadSpline_get_NumberOfFitPoints(This,numFitPoints)	\
    ( (This)->lpVtbl -> get_NumberOfFitPoints(This,numFitPoints) ) 

#define IGcadSpline_get_FitPoints(This,fitPoint)	\
    ( (This)->lpVtbl -> get_FitPoints(This,fitPoint) ) 

#define IGcadSpline_put_FitPoints(This,fitPoint)	\
    ( (This)->lpVtbl -> put_FitPoints(This,fitPoint) ) 

#define IGcadSpline_get_Degree(This,Degree)	\
    ( (This)->lpVtbl -> get_Degree(This,Degree) ) 

#define IGcadSpline_get_Closed(This,fClose)	\
    ( (This)->lpVtbl -> get_Closed(This,fClose) ) 

#define IGcadSpline_get_IsPlanar(This,fPlanar)	\
    ( (This)->lpVtbl -> get_IsPlanar(This,fPlanar) ) 

#define IGcadSpline_get_IsRational(This,fRational)	\
    ( (This)->lpVtbl -> get_IsRational(This,fRational) ) 

#define IGcadSpline_get_IsPeriodic(This,fPeriodic)	\
    ( (This)->lpVtbl -> get_IsPeriodic(This,fPeriodic) ) 

#define IGcadSpline_get_StartTangent(This,StartTangent)	\
    ( (This)->lpVtbl -> get_StartTangent(This,StartTangent) ) 

#define IGcadSpline_put_StartTangent(This,StartTangent)	\
    ( (This)->lpVtbl -> put_StartTangent(This,StartTangent) ) 

#define IGcadSpline_get_EndTangent(This,EndTangent)	\
    ( (This)->lpVtbl -> get_EndTangent(This,EndTangent) ) 

#define IGcadSpline_put_EndTangent(This,EndTangent)	\
    ( (This)->lpVtbl -> put_EndTangent(This,EndTangent) ) 

#define IGcadSpline_get_FitTolerance(This,fitTol)	\
    ( (This)->lpVtbl -> get_FitTolerance(This,fitTol) ) 

#define IGcadSpline_put_FitTolerance(This,fitTol)	\
    ( (This)->lpVtbl -> put_FitTolerance(This,fitTol) ) 

#define IGcadSpline_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadSpline_SetControlPoint(This,Index,controlPoint)	\
    ( (This)->lpVtbl -> SetControlPoint(This,Index,controlPoint) ) 

#define IGcadSpline_GetControlPoint(This,Index,controlPoint)	\
    ( (This)->lpVtbl -> GetControlPoint(This,Index,controlPoint) ) 

#define IGcadSpline_SetFitPoint(This,Index,fitPoint)	\
    ( (This)->lpVtbl -> SetFitPoint(This,Index,fitPoint) ) 

#define IGcadSpline_GetFitPoint(This,Index,fitPoint)	\
    ( (This)->lpVtbl -> GetFitPoint(This,Index,fitPoint) ) 

#define IGcadSpline_SetWeight(This,Index,weight)	\
    ( (This)->lpVtbl -> SetWeight(This,Index,weight) ) 

#define IGcadSpline_GetWeight(This,Index,weight)	\
    ( (This)->lpVtbl -> GetWeight(This,Index,weight) ) 

#define IGcadSpline_AddFitPoint(This,Index,fitPoint)	\
    ( (This)->lpVtbl -> AddFitPoint(This,Index,fitPoint) ) 

#define IGcadSpline_DeleteFitPoint(This,Index)	\
    ( (This)->lpVtbl -> DeleteFitPoint(This,Index) ) 

#define IGcadSpline_ElevateOrder(This,Order)	\
    ( (This)->lpVtbl -> ElevateOrder(This,Order) ) 

#define IGcadSpline_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#define IGcadSpline_PurgeFitData(This)	\
    ( (This)->lpVtbl -> PurgeFitData(This) ) 

#define IGcadSpline_Reverse(This)	\
    ( (This)->lpVtbl -> Reverse(This) ) 

#define IGcadSpline_get_Knots(This,KnotValues)	\
    ( (This)->lpVtbl -> get_Knots(This,KnotValues) ) 

#define IGcadSpline_put_Knots(This,KnotValues)	\
    ( (This)->lpVtbl -> put_Knots(This,KnotValues) ) 

#define IGcadSpline_get_Weights(This,WeightValues)	\
    ( (This)->lpVtbl -> get_Weights(This,WeightValues) ) 

#define IGcadSpline_put_Weights(This,WeightValues)	\
    ( (This)->lpVtbl -> put_Weights(This,WeightValues) ) 

#define IGcadSpline_put_Closed2(This,bVal)	\
    ( (This)->lpVtbl -> put_Closed2(This,bVal) ) 

#define IGcadSpline_get_Closed2(This,bVal)	\
    ( (This)->lpVtbl -> get_Closed2(This,bVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSpline_INTERFACE_DEFINED__ */


#ifndef __IGcadText_INTERFACE_DEFINED__
#define __IGcadText_INTERFACE_DEFINED__

/* interface IGcadText */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("36A5A132-E86B-4D4E-86F5-63FBDDBDFCBF")
    IGcadText : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ GcAlignment *align) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ GcAlignment align) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ GcHorizontalAlignment *horizAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ GcHorizontalAlignment horizAlign) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ GcVerticalAlignment *vertiAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ GcVerticalAlignment vertiAlign) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *scalFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS scalFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObliqueAngle( 
            /* [retval][out] */ GCAD_ANGLE *obliAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObliqueAngle( 
            /* [in] */ GCAD_ANGLE obliAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint( 
            /* [retval][out] */ VARIANT *alignPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint( 
            /* [in] */ VARIANT alignPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGenerationFlag( 
            /* [retval][out] */ long *textGenFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGenerationFlag( 
            /* [in] */ long textGenFlag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpsideDown( 
            /* [retval][out] */ VARIANT_BOOL *UpsideDown) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpsideDown( 
            /* [in] */ VARIANT_BOOL UpsideDown) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backward( 
            /* [retval][out] */ VARIANT_BOOL *Backward) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backward( 
            /* [in] */ VARIANT_BOOL Backward) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FieldCode( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadText * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadText * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadText * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadText * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadText * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadText * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadText * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadText * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadText * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadText * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadText * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadText * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadText * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadText * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadText * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadText * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadText * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadText * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadText * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadText * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadText * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadText * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadText * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadText * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadText * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadText * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadText * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadText * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadText * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadText * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadText * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadText * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadText * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadText * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadText * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadText * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadText * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadText * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            IGcadText * This,
            /* [retval][out] */ GcAlignment *align);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            IGcadText * This,
            /* [in] */ GcAlignment align);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            IGcadText * This,
            /* [retval][out] */ GcHorizontalAlignment *horizAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            IGcadText * This,
            /* [in] */ GcHorizontalAlignment horizAlign);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            IGcadText * This,
            /* [retval][out] */ GcVerticalAlignment *vertiAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            IGcadText * This,
            /* [in] */ GcVerticalAlignment vertiAlign);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadText * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadText * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadText * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_NOUNITS *scalFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadText * This,
            /* [in] */ GCAD_NOUNITS scalFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )( 
            IGcadText * This,
            /* [retval][out] */ GCAD_ANGLE *obliAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )( 
            IGcadText * This,
            /* [in] */ GCAD_ANGLE obliAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT *alignPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )( 
            IGcadText * This,
            /* [in] */ VARIANT alignPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadText * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadText * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )( 
            IGcadText * This,
            /* [retval][out] */ long *textGenFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )( 
            IGcadText * This,
            /* [in] */ long textGenFlag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadText * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadText * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT_BOOL *UpsideDown);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )( 
            IGcadText * This,
            /* [in] */ VARIANT_BOOL UpsideDown);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backward )( 
            IGcadText * This,
            /* [retval][out] */ VARIANT_BOOL *Backward);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backward )( 
            IGcadText * This,
            /* [in] */ VARIANT_BOOL Backward);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *FieldCode )( 
            IGcadText * This,
            /* [retval][out] */ BSTR *bstrText);
        
        END_INTERFACE
    } IGcadTextVtbl;

    interface IGcadText
    {
        CONST_VTBL struct IGcadTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadText_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadText_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadText_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadText_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadText_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadText_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadText_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadText_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadText_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadText_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadText_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadText_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadText_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadText_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadText_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadText_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadText_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadText_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadText_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadText_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadText_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadText_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadText_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadText_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadText_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadText_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadText_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadText_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadText_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadText_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadText_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadText_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadText_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadText_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadText_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadText_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadText_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadText_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadText_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadText_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadText_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadText_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadText_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadText_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadText_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadText_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadText_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadText_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadText_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadText_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadText_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadText_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadText_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadText_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadText_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadText_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadText_get_Alignment(This,align)	\
    ( (This)->lpVtbl -> get_Alignment(This,align) ) 

#define IGcadText_put_Alignment(This,align)	\
    ( (This)->lpVtbl -> put_Alignment(This,align) ) 

#define IGcadText_get_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign) ) 

#define IGcadText_put_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign) ) 

#define IGcadText_get_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign) ) 

#define IGcadText_put_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign) ) 

#define IGcadText_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadText_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadText_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadText_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadText_get_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scalFactor) ) 

#define IGcadText_put_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scalFactor) ) 

#define IGcadText_get_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> get_ObliqueAngle(This,obliAngle) ) 

#define IGcadText_put_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> put_ObliqueAngle(This,obliAngle) ) 

#define IGcadText_get_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadText_put_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadText_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadText_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadText_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadText_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadText_get_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadText_put_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadText_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadText_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadText_get_UpsideDown(This,UpsideDown)	\
    ( (This)->lpVtbl -> get_UpsideDown(This,UpsideDown) ) 

#define IGcadText_put_UpsideDown(This,UpsideDown)	\
    ( (This)->lpVtbl -> put_UpsideDown(This,UpsideDown) ) 

#define IGcadText_get_Backward(This,Backward)	\
    ( (This)->lpVtbl -> get_Backward(This,Backward) ) 

#define IGcadText_put_Backward(This,Backward)	\
    ( (This)->lpVtbl -> put_Backward(This,Backward) ) 

#define IGcadText_FieldCode(This,bstrText)	\
    ( (This)->lpVtbl -> FieldCode(This,bstrText) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadText_INTERFACE_DEFINED__ */


#ifndef __IGcadTolerance_INTERFACE_DEFINED__
#define __IGcadTolerance_INTERFACE_DEFINED__

/* interface IGcadTolerance */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadTolerance;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5324F6B7-31B0-4BE8-9538-91A28FA972B1")
    IGcadTolerance : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DirectionVector( 
            /* [retval][out] */ VARIANT *dirVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DirectionVector( 
            /* [in] */ VARIANT dirVector) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextColor( 
            /* [retval][out] */ GCAD_COLOR *color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextColor( 
            /* [in] */ GCAD_COLOR color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyle( 
            /* [retval][out] */ BSTR *style) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextStyle( 
            /* [in] */ BSTR style) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadToleranceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTolerance * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTolerance * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTolerance * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTolerance * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTolerance * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTolerance * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTolerance * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTolerance * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTolerance * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTolerance * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTolerance * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTolerance * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTolerance * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTolerance * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTolerance * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTolerance * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTolerance * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTolerance * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTolerance * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadTolerance * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadTolerance * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadTolerance * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadTolerance * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadTolerance * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadTolerance * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadTolerance * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadTolerance * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadTolerance * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadTolerance * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadTolerance * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadTolerance * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadTolerance * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadTolerance * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadTolerance * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadTolerance * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )( 
            IGcadTolerance * This,
            /* [retval][out] */ VARIANT *dirVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT dirVector);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadTolerance * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadTolerance * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadTolerance * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadTolerance * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadTolerance * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadTolerance * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadTolerance * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadTolerance * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadTolerance * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadTolerance * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadTolerance * This,
            /* [in] */ GCAD_COLOR Type);
        
        END_INTERFACE
    } IGcadToleranceVtbl;

    interface IGcadTolerance
    {
        CONST_VTBL struct IGcadToleranceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTolerance_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTolerance_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTolerance_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTolerance_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTolerance_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTolerance_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTolerance_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTolerance_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTolerance_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTolerance_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTolerance_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTolerance_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTolerance_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTolerance_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTolerance_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTolerance_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTolerance_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTolerance_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTolerance_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTolerance_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTolerance_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTolerance_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTolerance_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadTolerance_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadTolerance_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadTolerance_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadTolerance_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadTolerance_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadTolerance_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadTolerance_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadTolerance_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadTolerance_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadTolerance_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadTolerance_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadTolerance_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadTolerance_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadTolerance_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadTolerance_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadTolerance_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadTolerance_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadTolerance_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadTolerance_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadTolerance_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadTolerance_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadTolerance_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadTolerance_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadTolerance_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadTolerance_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadTolerance_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadTolerance_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadTolerance_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadTolerance_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadTolerance_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadTolerance_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadTolerance_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadTolerance_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadTolerance_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadTolerance_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadTolerance_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadTolerance_get_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> get_DirectionVector(This,dirVector) ) 

#define IGcadTolerance_put_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> put_DirectionVector(This,dirVector) ) 

#define IGcadTolerance_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadTolerance_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadTolerance_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadTolerance_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadTolerance_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadTolerance_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadTolerance_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadTolerance_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadTolerance_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadTolerance_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadTolerance_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadTolerance_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadTolerance_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadTolerance_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadTolerance_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadTolerance_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadTolerance_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadTolerance_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadTolerance_INTERFACE_DEFINED__ */


#ifndef __IGcadTrace_INTERFACE_DEFINED__
#define __IGcadTrace_INTERFACE_DEFINED__

/* interface IGcadTrace */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadTrace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F60E63A7-9514-4312-BA79-37DDD0D84EC8")
    IGcadTrace : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *corners) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT corners) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTraceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTrace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTrace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTrace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTrace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTrace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTrace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTrace * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTrace * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTrace * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTrace * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTrace * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTrace * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTrace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTrace * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTrace * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTrace * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTrace * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTrace * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTrace * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTrace * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadTrace * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadTrace * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadTrace * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadTrace * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadTrace * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadTrace * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadTrace * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadTrace * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadTrace * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadTrace * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadTrace * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadTrace * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadTrace * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadTrace * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadTrace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadTrace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadTrace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadTrace * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadTrace * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadTrace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadTrace * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadTrace * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadTrace * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadTrace * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadTrace * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadTrace * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadTrace * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadTrace * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadTrace * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadTrace * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadTrace * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadTrace * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadTrace * This,
            /* [retval][out] */ VARIANT *corners);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadTrace * This,
            /* [in] */ VARIANT corners);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadTrace * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadTrace * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadTrace * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadTrace * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadTrace * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadTrace * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        END_INTERFACE
    } IGcadTraceVtbl;

    interface IGcadTrace
    {
        CONST_VTBL struct IGcadTraceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTrace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTrace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTrace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTrace_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTrace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTrace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTrace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTrace_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTrace_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTrace_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTrace_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTrace_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTrace_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTrace_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTrace_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTrace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTrace_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTrace_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTrace_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTrace_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTrace_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTrace_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTrace_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadTrace_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadTrace_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadTrace_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadTrace_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadTrace_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadTrace_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadTrace_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadTrace_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadTrace_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadTrace_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadTrace_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadTrace_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadTrace_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadTrace_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadTrace_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadTrace_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadTrace_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadTrace_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadTrace_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadTrace_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadTrace_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadTrace_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadTrace_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadTrace_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadTrace_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadTrace_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadTrace_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadTrace_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadTrace_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadTrace_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadTrace_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadTrace_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadTrace_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadTrace_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadTrace_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadTrace_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadTrace_get_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> get_Coordinates(This,corners) ) 

#define IGcadTrace_put_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> put_Coordinates(This,corners) ) 

#define IGcadTrace_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadTrace_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadTrace_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadTrace_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadTrace_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadTrace_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadTrace_INTERFACE_DEFINED__ */


#ifndef __IGcadXline_INTERFACE_DEFINED__
#define __IGcadXline_INTERFACE_DEFINED__

/* interface IGcadXline */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadXline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A8A86F34-2F22-4C5A-83A8-DE540DE73A93")
    IGcadXline : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BasePoint( 
            /* [retval][out] */ VARIANT *BasePoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BasePoint( 
            /* [in] */ VARIANT BasePoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecondPoint( 
            /* [retval][out] */ VARIANT *SecondPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SecondPoint( 
            /* [in] */ VARIANT SecondPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DirectionVector( 
            /* [retval][out] */ VARIANT *dirVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DirectionVector( 
            /* [in] */ VARIANT dirVector) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadXlineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadXline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadXline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadXline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadXline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadXline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadXline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadXline * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadXline * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadXline * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadXline * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadXline * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadXline * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadXline * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadXline * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadXline * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadXline * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadXline * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadXline * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadXline * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadXline * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadXline * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadXline * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadXline * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadXline * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadXline * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadXline * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadXline * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadXline * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadXline * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadXline * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadXline * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadXline * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadXline * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadXline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadXline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadXline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadXline * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadXline * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadXline * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadXline * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadXline * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadXline * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadXline * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadXline * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadXline * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadXline * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadXline * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadXline * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadXline * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadXline * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadXline * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadXline * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BasePoint )( 
            IGcadXline * This,
            /* [retval][out] */ VARIANT *BasePoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BasePoint )( 
            IGcadXline * This,
            /* [in] */ VARIANT BasePoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecondPoint )( 
            IGcadXline * This,
            /* [retval][out] */ VARIANT *SecondPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SecondPoint )( 
            IGcadXline * This,
            /* [in] */ VARIANT SecondPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )( 
            IGcadXline * This,
            /* [retval][out] */ VARIANT *dirVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )( 
            IGcadXline * This,
            /* [in] */ VARIANT dirVector);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadXline * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        END_INTERFACE
    } IGcadXlineVtbl;

    interface IGcadXline
    {
        CONST_VTBL struct IGcadXlineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadXline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadXline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadXline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadXline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadXline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadXline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadXline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadXline_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadXline_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadXline_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadXline_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadXline_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadXline_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadXline_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadXline_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadXline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadXline_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadXline_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadXline_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadXline_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadXline_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadXline_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadXline_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadXline_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadXline_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadXline_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadXline_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadXline_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadXline_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadXline_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadXline_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadXline_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadXline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadXline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadXline_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadXline_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadXline_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadXline_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadXline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadXline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadXline_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadXline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadXline_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadXline_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadXline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadXline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadXline_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadXline_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadXline_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadXline_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadXline_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadXline_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadXline_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadXline_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadXline_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadXline_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadXline_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadXline_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadXline_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadXline_get_BasePoint(This,BasePoint)	\
    ( (This)->lpVtbl -> get_BasePoint(This,BasePoint) ) 

#define IGcadXline_put_BasePoint(This,BasePoint)	\
    ( (This)->lpVtbl -> put_BasePoint(This,BasePoint) ) 

#define IGcadXline_get_SecondPoint(This,SecondPoint)	\
    ( (This)->lpVtbl -> get_SecondPoint(This,SecondPoint) ) 

#define IGcadXline_put_SecondPoint(This,SecondPoint)	\
    ( (This)->lpVtbl -> put_SecondPoint(This,SecondPoint) ) 

#define IGcadXline_get_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> get_DirectionVector(This,dirVector) ) 

#define IGcadXline_put_DirectionVector(This,dirVector)	\
    ( (This)->lpVtbl -> put_DirectionVector(This,dirVector) ) 

#define IGcadXline_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadXline_INTERFACE_DEFINED__ */


#ifndef __IGcadBlockReference_INTERFACE_DEFINED__
#define __IGcadBlockReference_INTERFACE_DEFINED__

/* interface IGcadBlockReference */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadBlockReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("164F2D64-53FA-4908-B840-29D172722AD0")
    IGcadBlockReference : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_YScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_YScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ZScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Explode( 
            /* [retval][out] */ VARIANT *pArrayObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAttributes( 
            /* [retval][out] */ VARIANT *pAttrObjs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetConstantAttributes( 
            /* [retval][out] */ VARIANT *pAttrObjs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasAttributes( 
            /* [retval][out] */ VARIANT_BOOL *bHas) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EffectiveName( 
            /* [retval][out] */ BSTR *EffectiveName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDynamicBlock( 
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDynamicBlockProperties( 
            /* [retval][out] */ VARIANT *dynamicPropertyArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetBlock( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertToAnonymousBlock( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertToStaticBlock( 
            /* [in] */ BSTR newBlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XEffectiveScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XEffectiveScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_YEffectiveScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_YEffectiveScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZEffectiveScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ZEffectiveScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsUnits( 
            /* [retval][out] */ BSTR *Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadBlockReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadBlockReference * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadBlockReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadBlockReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadBlockReference * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadBlockReference * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadBlockReference * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadBlockReference * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadBlockReference * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadBlockReference * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadBlockReference * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadBlockReference * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadBlockReference * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadBlockReference * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadBlockReference * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadBlockReference * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadBlockReference * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadBlockReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadBlockReference * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadBlockReference * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadBlockReference * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadBlockReference * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadBlockReference * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadBlockReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadBlockReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadBlockReference * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadBlockReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadBlockReference * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadBlockReference * This,
            /* [retval][out] */ double *factor);
        
        END_INTERFACE
    } IGcadBlockReferenceVtbl;

    interface IGcadBlockReference
    {
        CONST_VTBL struct IGcadBlockReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadBlockReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadBlockReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadBlockReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadBlockReference_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadBlockReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadBlockReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadBlockReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadBlockReference_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadBlockReference_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadBlockReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadBlockReference_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadBlockReference_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadBlockReference_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadBlockReference_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadBlockReference_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadBlockReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadBlockReference_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadBlockReference_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadBlockReference_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadBlockReference_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadBlockReference_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadBlockReference_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadBlockReference_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadBlockReference_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadBlockReference_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadBlockReference_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadBlockReference_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadBlockReference_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadBlockReference_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadBlockReference_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadBlockReference_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadBlockReference_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadBlockReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadBlockReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadBlockReference_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadBlockReference_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadBlockReference_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadBlockReference_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadBlockReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadBlockReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadBlockReference_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadBlockReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadBlockReference_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadBlockReference_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadBlockReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadBlockReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadBlockReference_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadBlockReference_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadBlockReference_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadBlockReference_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadBlockReference_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadBlockReference_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadBlockReference_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadBlockReference_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadBlockReference_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadBlockReference_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadBlockReference_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadBlockReference_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadBlockReference_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadBlockReference_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadBlockReference_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadBlockReference_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadBlockReference_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadBlockReference_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadBlockReference_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadBlockReference_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadBlockReference_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadBlockReference_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadBlockReference_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadBlockReference_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadBlockReference_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadBlockReference_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadBlockReference_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadBlockReference_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadBlockReference_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadBlockReference_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadBlockReference_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadBlockReference_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadBlockReference_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadBlockReference_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadBlockReference_INTERFACE_DEFINED__ */


#ifndef __IGcadHatch_INTERFACE_DEFINED__
#define __IGcadHatch_INTERFACE_DEFINED__

/* interface IGcadHatch */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadHatch;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E39B425C-0AA2-4CCD-BC46-9AF511938FDC")
    IGcadHatch : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfLoops( 
            /* [retval][out] */ long *numLoops) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternType( 
            /* [retval][out] */ GcPatternType *PatternType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternAngle( 
            /* [retval][out] */ GCAD_ANGLE *PatternAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternAngle( 
            /* [in] */ GCAD_ANGLE PatternAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternScale( 
            /* [retval][out] */ GCAD_NOUNITS *PatternScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternScale( 
            /* [in] */ GCAD_NOUNITS PatternScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternSpace( 
            /* [retval][out] */ double *PatternSpace) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternSpace( 
            /* [in] */ double PatternSpace) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ISOPenWidth( 
            /* [retval][out] */ GcISOPenWidth *penWidth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ISOPenWidth( 
            /* [in] */ GcISOPenWidth penWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternDouble( 
            /* [retval][out] */ VARIANT_BOOL *bDouble) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternDouble( 
            /* [in] */ VARIANT_BOOL bDouble) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
            /* [retval][out] */ double *Elevation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
            /* [in] */ double Elevation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AssociativeHatch( 
            /* [retval][out] */ VARIANT_BOOL *fAssoc) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AssociativeHatch( 
            /* [in] */ VARIANT_BOOL fAssoc) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HatchStyle( 
            /* [retval][out] */ GcHatchStyle *HatchStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HatchStyle( 
            /* [in] */ GcHatchStyle HatchStyle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetPattern( 
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendOuterLoop( 
            /* [in] */ VARIANT ObjectArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendInnerLoop( 
            /* [in] */ VARIANT ObjectArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertLoopAt( 
            /* [in] */ int Index,
            /* [in] */ GcLoopType LoopType,
            /* [in] */ VARIANT ObjectArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLoopAt( 
            /* [in] */ int Index,
            /* [out] */ VARIANT *ObjectArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Evaluate( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientColor1( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientColor1( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientColor2( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientColor2( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientAngle( 
            /* [retval][out] */ GCAD_ANGLE *GradientAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientAngle( 
            /* [in] */ GCAD_ANGLE GradientAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientCentered( 
            /* [retval][out] */ VARIANT_BOOL *fCentered) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientCentered( 
            /* [in] */ VARIANT_BOOL fCentered) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HatchObjectType( 
            /* [retval][out] */ GcHatchObjectType *hatchType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HatchObjectType( 
            /* [in] */ GcHatchObjectType hatchType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area( 
            /* [retval][out] */ double *Area) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Origin( 
            /* [retval][out] */ VARIANT *Origin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Origin( 
            /* [in] */ VARIANT Origin) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ IGcadAcCmColor **BackgroundColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ IGcadAcCmColor *BackgroundColor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadHatchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadHatch * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadHatch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadHatch * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadHatch * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadHatch * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadHatch * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadHatch * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadHatch * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadHatch * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadHatch * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadHatch * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadHatch * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadHatch * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadHatch * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadHatch * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadHatch * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadHatch * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadHatch * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadHatch * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadHatch * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadHatch * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadHatch * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadHatch * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadHatch * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadHatch * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadHatch * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadHatch * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadHatch * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadHatch * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadHatch * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadHatch * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadHatch * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadHatch * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadHatch * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadHatch * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadHatch * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadHatch * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadHatch * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadHatch * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadHatch * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadHatch * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadHatch * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadHatch * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLoops )( 
            IGcadHatch * This,
            /* [retval][out] */ long *numLoops);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternType )( 
            IGcadHatch * This,
            /* [retval][out] */ GcPatternType *PatternType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternName )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternAngle )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_ANGLE *PatternAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternAngle )( 
            IGcadHatch * This,
            /* [in] */ GCAD_ANGLE PatternAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternScale )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_NOUNITS *PatternScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternScale )( 
            IGcadHatch * This,
            /* [in] */ GCAD_NOUNITS PatternScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternSpace )( 
            IGcadHatch * This,
            /* [retval][out] */ double *PatternSpace);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternSpace )( 
            IGcadHatch * This,
            /* [in] */ double PatternSpace);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ISOPenWidth )( 
            IGcadHatch * This,
            /* [retval][out] */ GcISOPenWidth *penWidth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ISOPenWidth )( 
            IGcadHatch * This,
            /* [in] */ GcISOPenWidth penWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternDouble )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT_BOOL *bDouble);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternDouble )( 
            IGcadHatch * This,
            /* [in] */ VARIANT_BOOL bDouble);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            IGcadHatch * This,
            /* [retval][out] */ double *Elevation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            IGcadHatch * This,
            /* [in] */ double Elevation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AssociativeHatch )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT_BOOL *fAssoc);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AssociativeHatch )( 
            IGcadHatch * This,
            /* [in] */ VARIANT_BOOL fAssoc);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HatchStyle )( 
            IGcadHatch * This,
            /* [retval][out] */ GcHatchStyle *HatchStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HatchStyle )( 
            IGcadHatch * This,
            /* [in] */ GcHatchStyle HatchStyle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetPattern )( 
            IGcadHatch * This,
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendOuterLoop )( 
            IGcadHatch * This,
            /* [in] */ VARIANT ObjectArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendInnerLoop )( 
            IGcadHatch * This,
            /* [in] */ VARIANT ObjectArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertLoopAt )( 
            IGcadHatch * This,
            /* [in] */ int Index,
            /* [in] */ GcLoopType LoopType,
            /* [in] */ VARIANT ObjectArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLoopAt )( 
            IGcadHatch * This,
            /* [in] */ int Index,
            /* [out] */ VARIANT *ObjectArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Evaluate )( 
            IGcadHatch * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientColor1 )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientColor1 )( 
            IGcadHatch * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientColor2 )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientColor2 )( 
            IGcadHatch * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientAngle )( 
            IGcadHatch * This,
            /* [retval][out] */ GCAD_ANGLE *GradientAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientAngle )( 
            IGcadHatch * This,
            /* [in] */ GCAD_ANGLE GradientAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientCentered )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT_BOOL *fCentered);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientCentered )( 
            IGcadHatch * This,
            /* [in] */ VARIANT_BOOL fCentered);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientName )( 
            IGcadHatch * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientName )( 
            IGcadHatch * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HatchObjectType )( 
            IGcadHatch * This,
            /* [retval][out] */ GcHatchObjectType *hatchType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HatchObjectType )( 
            IGcadHatch * This,
            /* [in] */ GcHatchObjectType hatchType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area )( 
            IGcadHatch * This,
            /* [retval][out] */ double *Area);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadHatch * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadHatch * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IGcadHatch * This,
            /* [retval][out] */ IGcadAcCmColor **BackgroundColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IGcadHatch * This,
            /* [in] */ IGcadAcCmColor *BackgroundColor);
        
        END_INTERFACE
    } IGcadHatchVtbl;

    interface IGcadHatch
    {
        CONST_VTBL struct IGcadHatchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadHatch_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadHatch_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadHatch_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadHatch_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadHatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadHatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadHatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadHatch_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadHatch_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadHatch_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadHatch_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadHatch_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadHatch_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadHatch_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadHatch_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadHatch_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadHatch_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadHatch_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadHatch_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadHatch_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadHatch_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadHatch_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadHatch_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadHatch_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadHatch_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadHatch_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadHatch_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadHatch_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadHatch_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadHatch_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadHatch_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadHatch_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadHatch_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadHatch_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadHatch_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadHatch_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadHatch_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadHatch_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadHatch_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadHatch_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadHatch_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadHatch_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadHatch_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadHatch_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadHatch_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadHatch_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadHatch_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadHatch_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadHatch_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadHatch_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadHatch_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadHatch_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadHatch_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadHatch_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadHatch_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadHatch_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadHatch_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadHatch_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadHatch_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadHatch_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadHatch_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadHatch_get_NumberOfLoops(This,numLoops)	\
    ( (This)->lpVtbl -> get_NumberOfLoops(This,numLoops) ) 

#define IGcadHatch_get_PatternType(This,PatternType)	\
    ( (This)->lpVtbl -> get_PatternType(This,PatternType) ) 

#define IGcadHatch_get_PatternName(This,bstrName)	\
    ( (This)->lpVtbl -> get_PatternName(This,bstrName) ) 

#define IGcadHatch_get_PatternAngle(This,PatternAngle)	\
    ( (This)->lpVtbl -> get_PatternAngle(This,PatternAngle) ) 

#define IGcadHatch_put_PatternAngle(This,PatternAngle)	\
    ( (This)->lpVtbl -> put_PatternAngle(This,PatternAngle) ) 

#define IGcadHatch_get_PatternScale(This,PatternScale)	\
    ( (This)->lpVtbl -> get_PatternScale(This,PatternScale) ) 

#define IGcadHatch_put_PatternScale(This,PatternScale)	\
    ( (This)->lpVtbl -> put_PatternScale(This,PatternScale) ) 

#define IGcadHatch_get_PatternSpace(This,PatternSpace)	\
    ( (This)->lpVtbl -> get_PatternSpace(This,PatternSpace) ) 

#define IGcadHatch_put_PatternSpace(This,PatternSpace)	\
    ( (This)->lpVtbl -> put_PatternSpace(This,PatternSpace) ) 

#define IGcadHatch_get_ISOPenWidth(This,penWidth)	\
    ( (This)->lpVtbl -> get_ISOPenWidth(This,penWidth) ) 

#define IGcadHatch_put_ISOPenWidth(This,penWidth)	\
    ( (This)->lpVtbl -> put_ISOPenWidth(This,penWidth) ) 

#define IGcadHatch_get_PatternDouble(This,bDouble)	\
    ( (This)->lpVtbl -> get_PatternDouble(This,bDouble) ) 

#define IGcadHatch_put_PatternDouble(This,bDouble)	\
    ( (This)->lpVtbl -> put_PatternDouble(This,bDouble) ) 

#define IGcadHatch_get_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> get_Elevation(This,Elevation) ) 

#define IGcadHatch_put_Elevation(This,Elevation)	\
    ( (This)->lpVtbl -> put_Elevation(This,Elevation) ) 

#define IGcadHatch_get_AssociativeHatch(This,fAssoc)	\
    ( (This)->lpVtbl -> get_AssociativeHatch(This,fAssoc) ) 

#define IGcadHatch_put_AssociativeHatch(This,fAssoc)	\
    ( (This)->lpVtbl -> put_AssociativeHatch(This,fAssoc) ) 

#define IGcadHatch_get_HatchStyle(This,HatchStyle)	\
    ( (This)->lpVtbl -> get_HatchStyle(This,HatchStyle) ) 

#define IGcadHatch_put_HatchStyle(This,HatchStyle)	\
    ( (This)->lpVtbl -> put_HatchStyle(This,HatchStyle) ) 

#define IGcadHatch_SetPattern(This,PatternType,PatternName)	\
    ( (This)->lpVtbl -> SetPattern(This,PatternType,PatternName) ) 

#define IGcadHatch_AppendOuterLoop(This,ObjectArray)	\
    ( (This)->lpVtbl -> AppendOuterLoop(This,ObjectArray) ) 

#define IGcadHatch_AppendInnerLoop(This,ObjectArray)	\
    ( (This)->lpVtbl -> AppendInnerLoop(This,ObjectArray) ) 

#define IGcadHatch_InsertLoopAt(This,Index,LoopType,ObjectArray)	\
    ( (This)->lpVtbl -> InsertLoopAt(This,Index,LoopType,ObjectArray) ) 

#define IGcadHatch_GetLoopAt(This,Index,ObjectArray)	\
    ( (This)->lpVtbl -> GetLoopAt(This,Index,ObjectArray) ) 

#define IGcadHatch_Evaluate(This)	\
    ( (This)->lpVtbl -> Evaluate(This) ) 

#define IGcadHatch_get_GradientColor1(This,pColor)	\
    ( (This)->lpVtbl -> get_GradientColor1(This,pColor) ) 

#define IGcadHatch_put_GradientColor1(This,pColor)	\
    ( (This)->lpVtbl -> put_GradientColor1(This,pColor) ) 

#define IGcadHatch_get_GradientColor2(This,pColor)	\
    ( (This)->lpVtbl -> get_GradientColor2(This,pColor) ) 

#define IGcadHatch_put_GradientColor2(This,pColor)	\
    ( (This)->lpVtbl -> put_GradientColor2(This,pColor) ) 

#define IGcadHatch_get_GradientAngle(This,GradientAngle)	\
    ( (This)->lpVtbl -> get_GradientAngle(This,GradientAngle) ) 

#define IGcadHatch_put_GradientAngle(This,GradientAngle)	\
    ( (This)->lpVtbl -> put_GradientAngle(This,GradientAngle) ) 

#define IGcadHatch_get_GradientCentered(This,fCentered)	\
    ( (This)->lpVtbl -> get_GradientCentered(This,fCentered) ) 

#define IGcadHatch_put_GradientCentered(This,fCentered)	\
    ( (This)->lpVtbl -> put_GradientCentered(This,fCentered) ) 

#define IGcadHatch_get_GradientName(This,bstrName)	\
    ( (This)->lpVtbl -> get_GradientName(This,bstrName) ) 

#define IGcadHatch_put_GradientName(This,bstrName)	\
    ( (This)->lpVtbl -> put_GradientName(This,bstrName) ) 

#define IGcadHatch_get_HatchObjectType(This,hatchType)	\
    ( (This)->lpVtbl -> get_HatchObjectType(This,hatchType) ) 

#define IGcadHatch_put_HatchObjectType(This,hatchType)	\
    ( (This)->lpVtbl -> put_HatchObjectType(This,hatchType) ) 

#define IGcadHatch_get_Area(This,Area)	\
    ( (This)->lpVtbl -> get_Area(This,Area) ) 

#define IGcadHatch_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadHatch_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadHatch_get_BackgroundColor(This,BackgroundColor)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,BackgroundColor) ) 

#define IGcadHatch_put_BackgroundColor(This,BackgroundColor)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,BackgroundColor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadHatch_INTERFACE_DEFINED__ */


#ifndef __IGcadRasterImage_INTERFACE_DEFINED__
#define __IGcadRasterImage_INTERFACE_DEFINED__

/* interface IGcadRasterImage */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadRasterImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D3D7FA7F-DF69-4961-A895-D5D7199F111D")
    IGcadRasterImage : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Brightness( 
            /* [retval][out] */ long *Brightness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Brightness( 
            /* [in] */ long Brightness) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Contrast( 
            /* [retval][out] */ long *Contrast) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Contrast( 
            /* [in] */ long Contrast) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fade( 
            /* [retval][out] */ long *Fade) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fade( 
            /* [in] */ long Fade) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Origin( 
            /* [retval][out] */ VARIANT *Origin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Origin( 
            /* [in] */ VARIANT Origin) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImageWidth( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ImageWidth( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImageHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ImageHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ImageFile( 
            /* [in] */ BSTR imageFileName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImageFile( 
            /* [retval][out] */ BSTR *imageFileName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImageVisibility( 
            /* [retval][out] */ VARIANT_BOOL *fVisible) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ImageVisibility( 
            /* [in] */ VARIANT_BOOL fVisible) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClippingEnabled( 
            /* [retval][out] */ VARIANT_BOOL *kClip) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClippingEnabled( 
            /* [in] */ VARIANT_BOOL kClip) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ VARIANT_BOOL *bTransp) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ VARIANT_BOOL bTransp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClipBoundary( 
            /* [in] */ VARIANT boundry) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *pixelHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *pixelWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowRotation( 
            /* [retval][out] */ VARIANT_BOOL *bShow) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowRotation( 
            /* [in] */ VARIANT_BOOL bShow) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadRasterImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadRasterImage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadRasterImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadRasterImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadRasterImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadRasterImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadRasterImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadRasterImage * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadRasterImage * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadRasterImage * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadRasterImage * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadRasterImage * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadRasterImage * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadRasterImage * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadRasterImage * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadRasterImage * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadRasterImage * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadRasterImage * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadRasterImage * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadRasterImage * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadRasterImage * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadRasterImage * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadRasterImage * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadRasterImage * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Brightness )( 
            IGcadRasterImage * This,
            /* [retval][out] */ long *Brightness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Brightness )( 
            IGcadRasterImage * This,
            /* [in] */ long Brightness);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            IGcadRasterImage * This,
            /* [retval][out] */ long *Contrast);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            IGcadRasterImage * This,
            /* [in] */ long Contrast);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fade )( 
            IGcadRasterImage * This,
            /* [retval][out] */ long *Fade);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fade )( 
            IGcadRasterImage * This,
            /* [in] */ long Fade);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadRasterImage * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImageWidth )( 
            IGcadRasterImage * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ImageWidth )( 
            IGcadRasterImage * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImageHeight )( 
            IGcadRasterImage * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ImageHeight )( 
            IGcadRasterImage * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ImageFile )( 
            IGcadRasterImage * This,
            /* [in] */ BSTR imageFileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImageFile )( 
            IGcadRasterImage * This,
            /* [retval][out] */ BSTR *imageFileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImageVisibility )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *fVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ImageVisibility )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL fVisible);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClippingEnabled )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *kClip);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClippingEnabled )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL kClip);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *bTransp);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL bTransp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClipBoundary )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT boundry);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadRasterImage * This,
            /* [retval][out] */ double *pixelHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadRasterImage * This,
            /* [retval][out] */ double *pixelWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowRotation )( 
            IGcadRasterImage * This,
            /* [retval][out] */ VARIANT_BOOL *bShow);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowRotation )( 
            IGcadRasterImage * This,
            /* [in] */ VARIANT_BOOL bShow);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadRasterImage * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadRasterImage * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        END_INTERFACE
    } IGcadRasterImageVtbl;

    interface IGcadRasterImage
    {
        CONST_VTBL struct IGcadRasterImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadRasterImage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadRasterImage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadRasterImage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadRasterImage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadRasterImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadRasterImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadRasterImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadRasterImage_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadRasterImage_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadRasterImage_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadRasterImage_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadRasterImage_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadRasterImage_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadRasterImage_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadRasterImage_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadRasterImage_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadRasterImage_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadRasterImage_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadRasterImage_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadRasterImage_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadRasterImage_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadRasterImage_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadRasterImage_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadRasterImage_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadRasterImage_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadRasterImage_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadRasterImage_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadRasterImage_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadRasterImage_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadRasterImage_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadRasterImage_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadRasterImage_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadRasterImage_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadRasterImage_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadRasterImage_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadRasterImage_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadRasterImage_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadRasterImage_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadRasterImage_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadRasterImage_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadRasterImage_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadRasterImage_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadRasterImage_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadRasterImage_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadRasterImage_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadRasterImage_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadRasterImage_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadRasterImage_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadRasterImage_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadRasterImage_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadRasterImage_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadRasterImage_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadRasterImage_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadRasterImage_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadRasterImage_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadRasterImage_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadRasterImage_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadRasterImage_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadRasterImage_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadRasterImage_get_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> get_Brightness(This,Brightness) ) 

#define IGcadRasterImage_put_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> put_Brightness(This,Brightness) ) 

#define IGcadRasterImage_get_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> get_Contrast(This,Contrast) ) 

#define IGcadRasterImage_put_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> put_Contrast(This,Contrast) ) 

#define IGcadRasterImage_get_Fade(This,Fade)	\
    ( (This)->lpVtbl -> get_Fade(This,Fade) ) 

#define IGcadRasterImage_put_Fade(This,Fade)	\
    ( (This)->lpVtbl -> put_Fade(This,Fade) ) 

#define IGcadRasterImage_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadRasterImage_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadRasterImage_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadRasterImage_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadRasterImage_get_ImageWidth(This,Width)	\
    ( (This)->lpVtbl -> get_ImageWidth(This,Width) ) 

#define IGcadRasterImage_put_ImageWidth(This,Width)	\
    ( (This)->lpVtbl -> put_ImageWidth(This,Width) ) 

#define IGcadRasterImage_get_ImageHeight(This,Height)	\
    ( (This)->lpVtbl -> get_ImageHeight(This,Height) ) 

#define IGcadRasterImage_put_ImageHeight(This,Height)	\
    ( (This)->lpVtbl -> put_ImageHeight(This,Height) ) 

#define IGcadRasterImage_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IGcadRasterImage_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IGcadRasterImage_put_ImageFile(This,imageFileName)	\
    ( (This)->lpVtbl -> put_ImageFile(This,imageFileName) ) 

#define IGcadRasterImage_get_ImageFile(This,imageFileName)	\
    ( (This)->lpVtbl -> get_ImageFile(This,imageFileName) ) 

#define IGcadRasterImage_get_ImageVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> get_ImageVisibility(This,fVisible) ) 

#define IGcadRasterImage_put_ImageVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> put_ImageVisibility(This,fVisible) ) 

#define IGcadRasterImage_get_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> get_ClippingEnabled(This,kClip) ) 

#define IGcadRasterImage_put_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> put_ClippingEnabled(This,kClip) ) 

#define IGcadRasterImage_get_Transparency(This,bTransp)	\
    ( (This)->lpVtbl -> get_Transparency(This,bTransp) ) 

#define IGcadRasterImage_put_Transparency(This,bTransp)	\
    ( (This)->lpVtbl -> put_Transparency(This,bTransp) ) 

#define IGcadRasterImage_ClipBoundary(This,boundry)	\
    ( (This)->lpVtbl -> ClipBoundary(This,boundry) ) 

#define IGcadRasterImage_get_Height(This,pixelHeight)	\
    ( (This)->lpVtbl -> get_Height(This,pixelHeight) ) 

#define IGcadRasterImage_get_Width(This,pixelWidth)	\
    ( (This)->lpVtbl -> get_Width(This,pixelWidth) ) 

#define IGcadRasterImage_get_ShowRotation(This,bShow)	\
    ( (This)->lpVtbl -> get_ShowRotation(This,bShow) ) 

#define IGcadRasterImage_put_ShowRotation(This,bShow)	\
    ( (This)->lpVtbl -> put_ShowRotation(This,bShow) ) 

#define IGcadRasterImage_get_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,ScaleFactor) ) 

#define IGcadRasterImage_put_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,ScaleFactor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadRasterImage_INTERFACE_DEFINED__ */


#ifndef __IGcadLine_INTERFACE_DEFINED__
#define __IGcadLine_INTERFACE_DEFINED__

/* interface IGcadLine */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("34EE3F45-DDA9-47CA-8C73-5AABD7B65535")
    IGcadLine : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ VARIANT *StartPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartPoint( 
            /* [in] */ VARIANT StartPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ VARIANT *EndPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndPoint( 
            /* [in] */ VARIANT EndPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offset( 
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Delta( 
            /* [retval][out] */ VARIANT *Delta) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ double *Length) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Angle( 
            /* [retval][out] */ GCAD_ANGLE *Angle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLine * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLine * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLine * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLine * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLine * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLine * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLine * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLine * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLine * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLine * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLine * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLine * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLine * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLine * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLine * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLine * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLine * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLine * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLine * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLine * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLine * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLine * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLine * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLine * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLine * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLine * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLine * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLine * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLine * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLine * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLine * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLine * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLine * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLine * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLine * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLine * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLine * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLine * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLine * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLine * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLine * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLine * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT *StartPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartPoint )( 
            IGcadLine * This,
            /* [in] */ VARIANT StartPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT *EndPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndPoint )( 
            IGcadLine * This,
            /* [in] */ VARIANT EndPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadLine * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadLine * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadLine * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offset )( 
            IGcadLine * This,
            /* [in] */ double Distance,
            /* [retval][out] */ VARIANT *pOffsetCurves);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Delta )( 
            IGcadLine * This,
            /* [retval][out] */ VARIANT *Delta);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IGcadLine * This,
            /* [retval][out] */ double *Length);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            IGcadLine * This,
            /* [retval][out] */ GCAD_ANGLE *Angle);
        
        END_INTERFACE
    } IGcadLineVtbl;

    interface IGcadLine
    {
        CONST_VTBL struct IGcadLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLine_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLine_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLine_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLine_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLine_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLine_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLine_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLine_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLine_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLine_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLine_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLine_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLine_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLine_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLine_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLine_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLine_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLine_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLine_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLine_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLine_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLine_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLine_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLine_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLine_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLine_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLine_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLine_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLine_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLine_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLine_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLine_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLine_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLine_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLine_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLine_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLine_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLine_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLine_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLine_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLine_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLine_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLine_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLine_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLine_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLine_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLine_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLine_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLine_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLine_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLine_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLine_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLine_get_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> get_StartPoint(This,StartPoint) ) 

#define IGcadLine_put_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> put_StartPoint(This,StartPoint) ) 

#define IGcadLine_get_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> get_EndPoint(This,EndPoint) ) 

#define IGcadLine_put_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> put_EndPoint(This,EndPoint) ) 

#define IGcadLine_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadLine_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadLine_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadLine_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadLine_Offset(This,Distance,pOffsetCurves)	\
    ( (This)->lpVtbl -> Offset(This,Distance,pOffsetCurves) ) 

#define IGcadLine_get_Delta(This,Delta)	\
    ( (This)->lpVtbl -> get_Delta(This,Delta) ) 

#define IGcadLine_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#define IGcadLine_get_Angle(This,Angle)	\
    ( (This)->lpVtbl -> get_Angle(This,Angle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLine_INTERFACE_DEFINED__ */


#ifndef __IGcadPlotConfiguration_INTERFACE_DEFINED__
#define __IGcadPlotConfiguration_INTERFACE_DEFINED__

/* interface IGcadPlotConfiguration */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPlotConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8217483C-345B-409D-8C64-F0DA325071DA")
    IGcadPlotConfiguration : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfigName( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanonicalMediaName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CanonicalMediaName( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PaperUnits( 
            /* [retval][out] */ GcPlotPaperUnits *pPaperUnits) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PaperUnits( 
            /* [in] */ GcPlotPaperUnits pPaperUnits) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotViewportBorders( 
            /* [retval][out] */ VARIANT_BOOL *pViewportBorders) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotViewportBorders( 
            /* [in] */ VARIANT_BOOL pViewportBorders) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPlotStyles( 
            /* [retval][out] */ VARIANT_BOOL *pStyles) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPlotStyles( 
            /* [in] */ VARIANT_BOOL pStyles) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotRotation( 
            /* [retval][out] */ GcPlotRotation *pRotation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotRotation( 
            /* [in] */ GcPlotRotation pRotation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterPlot( 
            /* [retval][out] */ VARIANT_BOOL *pCentered) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterPlot( 
            /* [in] */ VARIANT_BOOL pCentered) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotHidden( 
            /* [retval][out] */ VARIANT_BOOL *pHidden) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotHidden( 
            /* [in] */ VARIANT_BOOL pHidden) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotType( 
            /* [retval][out] */ GcPlotType *pType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotType( 
            /* [in] */ GcPlotType pType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewToPlot( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewToPlot( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseStandardScale( 
            /* [retval][out] */ VARIANT_BOOL *pUseStdScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseStandardScale( 
            /* [in] */ VARIANT_BOOL pUseStdScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StandardScale( 
            /* [retval][out] */ GcPlotScale *pStdScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StandardScale( 
            /* [in] */ GcPlotScale pStdScale) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCustomScale( 
            /* [out] */ double *Numerator,
            /* [out] */ double *Denominator) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCustomScale( 
            /* [in] */ double Numerator,
            /* [in] */ double Denominator) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleLineweights( 
            /* [retval][out] */ VARIANT_BOOL *pScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleLineweights( 
            /* [in] */ VARIANT_BOOL pScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotWithLineweights( 
            /* [retval][out] */ VARIANT_BOOL *pPlot) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotWithLineweights( 
            /* [in] */ VARIANT_BOOL pPlot) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotViewportsFirst( 
            /* [retval][out] */ VARIANT_BOOL *pViewportsFirst) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotViewportsFirst( 
            /* [in] */ VARIANT_BOOL pViewportsFirst) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleSheet( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleSheet( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPaperMargins( 
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPaperSize( 
            /* [out] */ double *Width,
            /* [out] */ double *Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotOrigin( 
            /* [retval][out] */ VARIANT *pOrigin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotOrigin( 
            /* [in] */ VARIANT pOrigin) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetWindowToPlot( 
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetWindowToPlot( 
            /* [in] */ VARIANT LowerLeft,
            /* [in] */ VARIANT UpperRight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotWithPlotStyles( 
            /* [retval][out] */ VARIANT_BOOL *pStyles) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotWithPlotStyles( 
            /* [in] */ VARIANT_BOOL pStyles) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ModelType( 
            /* [retval][out] */ VARIANT_BOOL *pType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IGcadPlotConfiguration *pPlotConfig) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCanonicalMediaNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPlotDeviceNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPlotStyleTableNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RefreshPlotDeviceInfo( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLocaleMediaName( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *pLocalName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPlotConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPlotConfiguration * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPlotConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPlotConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPlotConfiguration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPlotConfiguration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPlotConfiguration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPlotConfiguration * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPlotConfiguration * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPlotConfiguration * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigName )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfigName )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanonicalMediaName )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanonicalMediaName )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PaperUnits )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ GcPlotPaperUnits *pPaperUnits);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PaperUnits )( 
            IGcadPlotConfiguration * This,
            /* [in] */ GcPlotPaperUnits pPaperUnits);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotViewportBorders )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pViewportBorders);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotViewportBorders )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pViewportBorders);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPlotStyles )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pStyles);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPlotStyles )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotRotation )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ GcPlotRotation *pRotation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotRotation )( 
            IGcadPlotConfiguration * This,
            /* [in] */ GcPlotRotation pRotation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterPlot )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pCentered);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterPlot )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pCentered);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotHidden )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pHidden);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotHidden )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pHidden);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotType )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ GcPlotType *pType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotType )( 
            IGcadPlotConfiguration * This,
            /* [in] */ GcPlotType pType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewToPlot )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewToPlot )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseStandardScale )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pUseStdScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseStandardScale )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pUseStdScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StandardScale )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ GcPlotScale *pStdScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StandardScale )( 
            IGcadPlotConfiguration * This,
            /* [in] */ GcPlotScale pStdScale);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScale )( 
            IGcadPlotConfiguration * This,
            /* [out] */ double *Numerator,
            /* [out] */ double *Denominator);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCustomScale )( 
            IGcadPlotConfiguration * This,
            /* [in] */ double Numerator,
            /* [in] */ double Denominator);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleLineweights )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleLineweights )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotWithLineweights )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pPlot);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotWithLineweights )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pPlot);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotViewportsFirst )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pViewportsFirst);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotViewportsFirst )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pViewportsFirst);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPaperMargins )( 
            IGcadPlotConfiguration * This,
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPaperSize )( 
            IGcadPlotConfiguration * This,
            /* [out] */ double *Width,
            /* [out] */ double *Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotOrigin )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT *pOrigin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotOrigin )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT pOrigin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWindowToPlot )( 
            IGcadPlotConfiguration * This,
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWindowToPlot )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT LowerLeft,
            /* [in] */ VARIANT UpperRight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotWithPlotStyles )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pStyles);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotWithPlotStyles )( 
            IGcadPlotConfiguration * This,
            /* [in] */ VARIANT_BOOL pStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ModelType )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IGcadPlotConfiguration * This,
            /* [in] */ IGcadPlotConfiguration *pPlotConfig);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCanonicalMediaNames )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPlotDeviceNames )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPlotStyleTableNames )( 
            IGcadPlotConfiguration * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RefreshPlotDeviceInfo )( 
            IGcadPlotConfiguration * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLocaleMediaName )( 
            IGcadPlotConfiguration * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *pLocalName);
        
        END_INTERFACE
    } IGcadPlotConfigurationVtbl;

    interface IGcadPlotConfiguration
    {
        CONST_VTBL struct IGcadPlotConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPlotConfiguration_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPlotConfiguration_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPlotConfiguration_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPlotConfiguration_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPlotConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPlotConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPlotConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPlotConfiguration_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPlotConfiguration_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPlotConfiguration_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPlotConfiguration_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPlotConfiguration_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPlotConfiguration_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPlotConfiguration_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPlotConfiguration_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPlotConfiguration_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPlotConfiguration_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPlotConfiguration_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPlotConfiguration_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPlotConfiguration_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPlotConfiguration_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPlotConfiguration_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPlotConfiguration_get_Name(This,pName)	\
    ( (This)->lpVtbl -> get_Name(This,pName) ) 

#define IGcadPlotConfiguration_put_Name(This,pName)	\
    ( (This)->lpVtbl -> put_Name(This,pName) ) 

#define IGcadPlotConfiguration_get_ConfigName(This,pName)	\
    ( (This)->lpVtbl -> get_ConfigName(This,pName) ) 

#define IGcadPlotConfiguration_put_ConfigName(This,pName)	\
    ( (This)->lpVtbl -> put_ConfigName(This,pName) ) 

#define IGcadPlotConfiguration_get_CanonicalMediaName(This,pName)	\
    ( (This)->lpVtbl -> get_CanonicalMediaName(This,pName) ) 

#define IGcadPlotConfiguration_put_CanonicalMediaName(This,pName)	\
    ( (This)->lpVtbl -> put_CanonicalMediaName(This,pName) ) 

#define IGcadPlotConfiguration_get_PaperUnits(This,pPaperUnits)	\
    ( (This)->lpVtbl -> get_PaperUnits(This,pPaperUnits) ) 

#define IGcadPlotConfiguration_put_PaperUnits(This,pPaperUnits)	\
    ( (This)->lpVtbl -> put_PaperUnits(This,pPaperUnits) ) 

#define IGcadPlotConfiguration_get_PlotViewportBorders(This,pViewportBorders)	\
    ( (This)->lpVtbl -> get_PlotViewportBorders(This,pViewportBorders) ) 

#define IGcadPlotConfiguration_put_PlotViewportBorders(This,pViewportBorders)	\
    ( (This)->lpVtbl -> put_PlotViewportBorders(This,pViewportBorders) ) 

#define IGcadPlotConfiguration_get_ShowPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> get_ShowPlotStyles(This,pStyles) ) 

#define IGcadPlotConfiguration_put_ShowPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> put_ShowPlotStyles(This,pStyles) ) 

#define IGcadPlotConfiguration_get_PlotRotation(This,pRotation)	\
    ( (This)->lpVtbl -> get_PlotRotation(This,pRotation) ) 

#define IGcadPlotConfiguration_put_PlotRotation(This,pRotation)	\
    ( (This)->lpVtbl -> put_PlotRotation(This,pRotation) ) 

#define IGcadPlotConfiguration_get_CenterPlot(This,pCentered)	\
    ( (This)->lpVtbl -> get_CenterPlot(This,pCentered) ) 

#define IGcadPlotConfiguration_put_CenterPlot(This,pCentered)	\
    ( (This)->lpVtbl -> put_CenterPlot(This,pCentered) ) 

#define IGcadPlotConfiguration_get_PlotHidden(This,pHidden)	\
    ( (This)->lpVtbl -> get_PlotHidden(This,pHidden) ) 

#define IGcadPlotConfiguration_put_PlotHidden(This,pHidden)	\
    ( (This)->lpVtbl -> put_PlotHidden(This,pHidden) ) 

#define IGcadPlotConfiguration_get_PlotType(This,pType)	\
    ( (This)->lpVtbl -> get_PlotType(This,pType) ) 

#define IGcadPlotConfiguration_put_PlotType(This,pType)	\
    ( (This)->lpVtbl -> put_PlotType(This,pType) ) 

#define IGcadPlotConfiguration_get_ViewToPlot(This,pName)	\
    ( (This)->lpVtbl -> get_ViewToPlot(This,pName) ) 

#define IGcadPlotConfiguration_put_ViewToPlot(This,pName)	\
    ( (This)->lpVtbl -> put_ViewToPlot(This,pName) ) 

#define IGcadPlotConfiguration_get_UseStandardScale(This,pUseStdScale)	\
    ( (This)->lpVtbl -> get_UseStandardScale(This,pUseStdScale) ) 

#define IGcadPlotConfiguration_put_UseStandardScale(This,pUseStdScale)	\
    ( (This)->lpVtbl -> put_UseStandardScale(This,pUseStdScale) ) 

#define IGcadPlotConfiguration_get_StandardScale(This,pStdScale)	\
    ( (This)->lpVtbl -> get_StandardScale(This,pStdScale) ) 

#define IGcadPlotConfiguration_put_StandardScale(This,pStdScale)	\
    ( (This)->lpVtbl -> put_StandardScale(This,pStdScale) ) 

#define IGcadPlotConfiguration_GetCustomScale(This,Numerator,Denominator)	\
    ( (This)->lpVtbl -> GetCustomScale(This,Numerator,Denominator) ) 

#define IGcadPlotConfiguration_SetCustomScale(This,Numerator,Denominator)	\
    ( (This)->lpVtbl -> SetCustomScale(This,Numerator,Denominator) ) 

#define IGcadPlotConfiguration_get_ScaleLineweights(This,pScale)	\
    ( (This)->lpVtbl -> get_ScaleLineweights(This,pScale) ) 

#define IGcadPlotConfiguration_put_ScaleLineweights(This,pScale)	\
    ( (This)->lpVtbl -> put_ScaleLineweights(This,pScale) ) 

#define IGcadPlotConfiguration_get_PlotWithLineweights(This,pPlot)	\
    ( (This)->lpVtbl -> get_PlotWithLineweights(This,pPlot) ) 

#define IGcadPlotConfiguration_put_PlotWithLineweights(This,pPlot)	\
    ( (This)->lpVtbl -> put_PlotWithLineweights(This,pPlot) ) 

#define IGcadPlotConfiguration_get_PlotViewportsFirst(This,pViewportsFirst)	\
    ( (This)->lpVtbl -> get_PlotViewportsFirst(This,pViewportsFirst) ) 

#define IGcadPlotConfiguration_put_PlotViewportsFirst(This,pViewportsFirst)	\
    ( (This)->lpVtbl -> put_PlotViewportsFirst(This,pViewportsFirst) ) 

#define IGcadPlotConfiguration_get_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> get_StyleSheet(This,pName) ) 

#define IGcadPlotConfiguration_put_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> put_StyleSheet(This,pName) ) 

#define IGcadPlotConfiguration_GetPaperMargins(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> GetPaperMargins(This,LowerLeft,UpperRight) ) 

#define IGcadPlotConfiguration_GetPaperSize(This,Width,Height)	\
    ( (This)->lpVtbl -> GetPaperSize(This,Width,Height) ) 

#define IGcadPlotConfiguration_get_PlotOrigin(This,pOrigin)	\
    ( (This)->lpVtbl -> get_PlotOrigin(This,pOrigin) ) 

#define IGcadPlotConfiguration_put_PlotOrigin(This,pOrigin)	\
    ( (This)->lpVtbl -> put_PlotOrigin(This,pOrigin) ) 

#define IGcadPlotConfiguration_GetWindowToPlot(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> GetWindowToPlot(This,LowerLeft,UpperRight) ) 

#define IGcadPlotConfiguration_SetWindowToPlot(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> SetWindowToPlot(This,LowerLeft,UpperRight) ) 

#define IGcadPlotConfiguration_get_PlotWithPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> get_PlotWithPlotStyles(This,pStyles) ) 

#define IGcadPlotConfiguration_put_PlotWithPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> put_PlotWithPlotStyles(This,pStyles) ) 

#define IGcadPlotConfiguration_get_ModelType(This,pType)	\
    ( (This)->lpVtbl -> get_ModelType(This,pType) ) 

#define IGcadPlotConfiguration_CopyFrom(This,pPlotConfig)	\
    ( (This)->lpVtbl -> CopyFrom(This,pPlotConfig) ) 

#define IGcadPlotConfiguration_GetCanonicalMediaNames(This,pNames)	\
    ( (This)->lpVtbl -> GetCanonicalMediaNames(This,pNames) ) 

#define IGcadPlotConfiguration_GetPlotDeviceNames(This,pNames)	\
    ( (This)->lpVtbl -> GetPlotDeviceNames(This,pNames) ) 

#define IGcadPlotConfiguration_GetPlotStyleTableNames(This,pNames)	\
    ( (This)->lpVtbl -> GetPlotStyleTableNames(This,pNames) ) 

#define IGcadPlotConfiguration_RefreshPlotDeviceInfo(This)	\
    ( (This)->lpVtbl -> RefreshPlotDeviceInfo(This) ) 

#define IGcadPlotConfiguration_GetLocaleMediaName(This,Name,pLocalName)	\
    ( (This)->lpVtbl -> GetLocaleMediaName(This,Name,pLocalName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPlotConfiguration_INTERFACE_DEFINED__ */


#ifndef __IGcadLayout_INTERFACE_DEFINED__
#define __IGcadLayout_INTERFACE_DEFINED__

/* interface IGcadLayout */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7176A54C-0BF7-44E7-939C-29FBBC985D39")
    IGcadLayout : public IGcadPlotConfiguration
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Block( 
            /* [retval][out] */ IGcadBlock **pBlock) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *pOrder) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long pOrder) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLayout * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLayout * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLayout * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLayout * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLayout * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLayout * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLayout * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLayout * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLayout * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLayout * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLayout * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLayout * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLayout * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLayout * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLayout * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLayout * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLayout * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLayout * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigName )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfigName )( 
            IGcadLayout * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanonicalMediaName )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanonicalMediaName )( 
            IGcadLayout * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PaperUnits )( 
            IGcadLayout * This,
            /* [retval][out] */ GcPlotPaperUnits *pPaperUnits);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PaperUnits )( 
            IGcadLayout * This,
            /* [in] */ GcPlotPaperUnits pPaperUnits);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotViewportBorders )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pViewportBorders);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotViewportBorders )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pViewportBorders);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPlotStyles )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pStyles);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPlotStyles )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotRotation )( 
            IGcadLayout * This,
            /* [retval][out] */ GcPlotRotation *pRotation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotRotation )( 
            IGcadLayout * This,
            /* [in] */ GcPlotRotation pRotation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterPlot )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pCentered);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterPlot )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pCentered);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotHidden )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pHidden);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotHidden )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pHidden);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotType )( 
            IGcadLayout * This,
            /* [retval][out] */ GcPlotType *pType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotType )( 
            IGcadLayout * This,
            /* [in] */ GcPlotType pType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewToPlot )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewToPlot )( 
            IGcadLayout * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseStandardScale )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pUseStdScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseStandardScale )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pUseStdScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StandardScale )( 
            IGcadLayout * This,
            /* [retval][out] */ GcPlotScale *pStdScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StandardScale )( 
            IGcadLayout * This,
            /* [in] */ GcPlotScale pStdScale);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomScale )( 
            IGcadLayout * This,
            /* [out] */ double *Numerator,
            /* [out] */ double *Denominator);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCustomScale )( 
            IGcadLayout * This,
            /* [in] */ double Numerator,
            /* [in] */ double Denominator);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleLineweights )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleLineweights )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotWithLineweights )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pPlot);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotWithLineweights )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pPlot);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotViewportsFirst )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pViewportsFirst);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotViewportsFirst )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pViewportsFirst);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )( 
            IGcadLayout * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )( 
            IGcadLayout * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPaperMargins )( 
            IGcadLayout * This,
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPaperSize )( 
            IGcadLayout * This,
            /* [out] */ double *Width,
            /* [out] */ double *Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotOrigin )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT *pOrigin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotOrigin )( 
            IGcadLayout * This,
            /* [in] */ VARIANT pOrigin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetWindowToPlot )( 
            IGcadLayout * This,
            /* [out] */ VARIANT *LowerLeft,
            /* [out] */ VARIANT *UpperRight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetWindowToPlot )( 
            IGcadLayout * This,
            /* [in] */ VARIANT LowerLeft,
            /* [in] */ VARIANT UpperRight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotWithPlotStyles )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pStyles);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotWithPlotStyles )( 
            IGcadLayout * This,
            /* [in] */ VARIANT_BOOL pStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ModelType )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IGcadLayout * This,
            /* [in] */ IGcadPlotConfiguration *pPlotConfig);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCanonicalMediaNames )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPlotDeviceNames )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPlotStyleTableNames )( 
            IGcadLayout * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RefreshPlotDeviceInfo )( 
            IGcadLayout * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLocaleMediaName )( 
            IGcadLayout * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *pLocalName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Block )( 
            IGcadLayout * This,
            /* [retval][out] */ IGcadBlock **pBlock);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            IGcadLayout * This,
            /* [retval][out] */ long *pOrder);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            IGcadLayout * This,
            /* [in] */ long pOrder);
        
        END_INTERFACE
    } IGcadLayoutVtbl;

    interface IGcadLayout
    {
        CONST_VTBL struct IGcadLayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLayout_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLayout_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLayout_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLayout_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLayout_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLayout_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLayout_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLayout_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLayout_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLayout_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLayout_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLayout_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLayout_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLayout_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLayout_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLayout_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLayout_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLayout_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLayout_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLayout_get_Name(This,pName)	\
    ( (This)->lpVtbl -> get_Name(This,pName) ) 

#define IGcadLayout_put_Name(This,pName)	\
    ( (This)->lpVtbl -> put_Name(This,pName) ) 

#define IGcadLayout_get_ConfigName(This,pName)	\
    ( (This)->lpVtbl -> get_ConfigName(This,pName) ) 

#define IGcadLayout_put_ConfigName(This,pName)	\
    ( (This)->lpVtbl -> put_ConfigName(This,pName) ) 

#define IGcadLayout_get_CanonicalMediaName(This,pName)	\
    ( (This)->lpVtbl -> get_CanonicalMediaName(This,pName) ) 

#define IGcadLayout_put_CanonicalMediaName(This,pName)	\
    ( (This)->lpVtbl -> put_CanonicalMediaName(This,pName) ) 

#define IGcadLayout_get_PaperUnits(This,pPaperUnits)	\
    ( (This)->lpVtbl -> get_PaperUnits(This,pPaperUnits) ) 

#define IGcadLayout_put_PaperUnits(This,pPaperUnits)	\
    ( (This)->lpVtbl -> put_PaperUnits(This,pPaperUnits) ) 

#define IGcadLayout_get_PlotViewportBorders(This,pViewportBorders)	\
    ( (This)->lpVtbl -> get_PlotViewportBorders(This,pViewportBorders) ) 

#define IGcadLayout_put_PlotViewportBorders(This,pViewportBorders)	\
    ( (This)->lpVtbl -> put_PlotViewportBorders(This,pViewportBorders) ) 

#define IGcadLayout_get_ShowPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> get_ShowPlotStyles(This,pStyles) ) 

#define IGcadLayout_put_ShowPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> put_ShowPlotStyles(This,pStyles) ) 

#define IGcadLayout_get_PlotRotation(This,pRotation)	\
    ( (This)->lpVtbl -> get_PlotRotation(This,pRotation) ) 

#define IGcadLayout_put_PlotRotation(This,pRotation)	\
    ( (This)->lpVtbl -> put_PlotRotation(This,pRotation) ) 

#define IGcadLayout_get_CenterPlot(This,pCentered)	\
    ( (This)->lpVtbl -> get_CenterPlot(This,pCentered) ) 

#define IGcadLayout_put_CenterPlot(This,pCentered)	\
    ( (This)->lpVtbl -> put_CenterPlot(This,pCentered) ) 

#define IGcadLayout_get_PlotHidden(This,pHidden)	\
    ( (This)->lpVtbl -> get_PlotHidden(This,pHidden) ) 

#define IGcadLayout_put_PlotHidden(This,pHidden)	\
    ( (This)->lpVtbl -> put_PlotHidden(This,pHidden) ) 

#define IGcadLayout_get_PlotType(This,pType)	\
    ( (This)->lpVtbl -> get_PlotType(This,pType) ) 

#define IGcadLayout_put_PlotType(This,pType)	\
    ( (This)->lpVtbl -> put_PlotType(This,pType) ) 

#define IGcadLayout_get_ViewToPlot(This,pName)	\
    ( (This)->lpVtbl -> get_ViewToPlot(This,pName) ) 

#define IGcadLayout_put_ViewToPlot(This,pName)	\
    ( (This)->lpVtbl -> put_ViewToPlot(This,pName) ) 

#define IGcadLayout_get_UseStandardScale(This,pUseStdScale)	\
    ( (This)->lpVtbl -> get_UseStandardScale(This,pUseStdScale) ) 

#define IGcadLayout_put_UseStandardScale(This,pUseStdScale)	\
    ( (This)->lpVtbl -> put_UseStandardScale(This,pUseStdScale) ) 

#define IGcadLayout_get_StandardScale(This,pStdScale)	\
    ( (This)->lpVtbl -> get_StandardScale(This,pStdScale) ) 

#define IGcadLayout_put_StandardScale(This,pStdScale)	\
    ( (This)->lpVtbl -> put_StandardScale(This,pStdScale) ) 

#define IGcadLayout_GetCustomScale(This,Numerator,Denominator)	\
    ( (This)->lpVtbl -> GetCustomScale(This,Numerator,Denominator) ) 

#define IGcadLayout_SetCustomScale(This,Numerator,Denominator)	\
    ( (This)->lpVtbl -> SetCustomScale(This,Numerator,Denominator) ) 

#define IGcadLayout_get_ScaleLineweights(This,pScale)	\
    ( (This)->lpVtbl -> get_ScaleLineweights(This,pScale) ) 

#define IGcadLayout_put_ScaleLineweights(This,pScale)	\
    ( (This)->lpVtbl -> put_ScaleLineweights(This,pScale) ) 

#define IGcadLayout_get_PlotWithLineweights(This,pPlot)	\
    ( (This)->lpVtbl -> get_PlotWithLineweights(This,pPlot) ) 

#define IGcadLayout_put_PlotWithLineweights(This,pPlot)	\
    ( (This)->lpVtbl -> put_PlotWithLineweights(This,pPlot) ) 

#define IGcadLayout_get_PlotViewportsFirst(This,pViewportsFirst)	\
    ( (This)->lpVtbl -> get_PlotViewportsFirst(This,pViewportsFirst) ) 

#define IGcadLayout_put_PlotViewportsFirst(This,pViewportsFirst)	\
    ( (This)->lpVtbl -> put_PlotViewportsFirst(This,pViewportsFirst) ) 

#define IGcadLayout_get_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> get_StyleSheet(This,pName) ) 

#define IGcadLayout_put_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> put_StyleSheet(This,pName) ) 

#define IGcadLayout_GetPaperMargins(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> GetPaperMargins(This,LowerLeft,UpperRight) ) 

#define IGcadLayout_GetPaperSize(This,Width,Height)	\
    ( (This)->lpVtbl -> GetPaperSize(This,Width,Height) ) 

#define IGcadLayout_get_PlotOrigin(This,pOrigin)	\
    ( (This)->lpVtbl -> get_PlotOrigin(This,pOrigin) ) 

#define IGcadLayout_put_PlotOrigin(This,pOrigin)	\
    ( (This)->lpVtbl -> put_PlotOrigin(This,pOrigin) ) 

#define IGcadLayout_GetWindowToPlot(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> GetWindowToPlot(This,LowerLeft,UpperRight) ) 

#define IGcadLayout_SetWindowToPlot(This,LowerLeft,UpperRight)	\
    ( (This)->lpVtbl -> SetWindowToPlot(This,LowerLeft,UpperRight) ) 

#define IGcadLayout_get_PlotWithPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> get_PlotWithPlotStyles(This,pStyles) ) 

#define IGcadLayout_put_PlotWithPlotStyles(This,pStyles)	\
    ( (This)->lpVtbl -> put_PlotWithPlotStyles(This,pStyles) ) 

#define IGcadLayout_get_ModelType(This,pType)	\
    ( (This)->lpVtbl -> get_ModelType(This,pType) ) 

#define IGcadLayout_CopyFrom(This,pPlotConfig)	\
    ( (This)->lpVtbl -> CopyFrom(This,pPlotConfig) ) 

#define IGcadLayout_GetCanonicalMediaNames(This,pNames)	\
    ( (This)->lpVtbl -> GetCanonicalMediaNames(This,pNames) ) 

#define IGcadLayout_GetPlotDeviceNames(This,pNames)	\
    ( (This)->lpVtbl -> GetPlotDeviceNames(This,pNames) ) 

#define IGcadLayout_GetPlotStyleTableNames(This,pNames)	\
    ( (This)->lpVtbl -> GetPlotStyleTableNames(This,pNames) ) 

#define IGcadLayout_RefreshPlotDeviceInfo(This)	\
    ( (This)->lpVtbl -> RefreshPlotDeviceInfo(This) ) 

#define IGcadLayout_GetLocaleMediaName(This,Name,pLocalName)	\
    ( (This)->lpVtbl -> GetLocaleMediaName(This,Name,pLocalName) ) 


#define IGcadLayout_get_Block(This,pBlock)	\
    ( (This)->lpVtbl -> get_Block(This,pBlock) ) 

#define IGcadLayout_get_TabOrder(This,pOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,pOrder) ) 

#define IGcadLayout_put_TabOrder(This,pOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,pOrder) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLayout_INTERFACE_DEFINED__ */


#ifndef __IGcadAttributeReference_INTERFACE_DEFINED__
#define __IGcadAttributeReference_INTERFACE_DEFINED__

/* interface IGcadAttributeReference */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadAttributeReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4DCEF0F2-5C29-471F-8104-26AF43025669")
    IGcadAttributeReference : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ GcHorizontalAlignment *horizAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ GcHorizontalAlignment horizAlign) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *Normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Normal( 
            /* [in] */ VARIANT Normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObliqueAngle( 
            /* [retval][out] */ GCAD_ANGLE *obliAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObliqueAngle( 
            /* [in] */ GCAD_ANGLE obliAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *scalFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS scalFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TagString( 
            /* [retval][out] */ BSTR *bstrTag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TagString( 
            /* [in] */ BSTR bstrTag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint( 
            /* [retval][out] */ VARIANT *alignPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint( 
            /* [in] */ VARIANT alignPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGenerationFlag( 
            /* [retval][out] */ long *textGenFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGenerationFlag( 
            /* [in] */ long textGenFlag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ double *Thickness) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ double Thickness) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ GcVerticalAlignment *vertiAlign) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ GcVerticalAlignment vertiAlign) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldLength( 
            /* [retval][out] */ long *fieldLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FieldLength( 
            /* [in] */ long fieldLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ GcAlignment *align) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ GcAlignment align) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpsideDown( 
            /* [retval][out] */ VARIANT_BOOL *bUpsideDown) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpsideDown( 
            /* [in] */ VARIANT_BOOL bUpsideDown) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backward( 
            /* [retval][out] */ VARIANT_BOOL *bBackward) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backward( 
            /* [in] */ VARIANT_BOOL bBackward) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Invisible( 
            /* [retval][out] */ VARIANT_BOOL *bInvisible) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Invisible( 
            /* [in] */ VARIANT_BOOL bInvisible) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Constant( 
            /* [retval][out] */ VARIANT_BOOL *bConstant) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockPosition( 
            /* [retval][out] */ VARIANT_BOOL *bLockPosition) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAttributeReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAttributeReference * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAttributeReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAttributeReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAttributeReference * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAttributeReference * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAttributeReference * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAttributeReference * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAttributeReference * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadAttributeReference * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadAttributeReference * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadAttributeReference * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadAttributeReference * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadAttributeReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadAttributeReference * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadAttributeReference * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadAttributeReference * This,
            /* [in] */ double Height);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GcHorizontalAlignment *horizAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            IGcadAttributeReference * This,
            /* [in] */ GcHorizontalAlignment horizAlign);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_ANGLE *obliAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_ANGLE obliAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GCAD_NOUNITS *scalFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadAttributeReference * This,
            /* [in] */ GCAD_NOUNITS scalFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TagString )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *bstrTag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TagString )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR bstrTag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT *alignPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT alignPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ long *textGenFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )( 
            IGcadAttributeReference * This,
            /* [in] */ long textGenFlag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadAttributeReference * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ double *Thickness);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IGcadAttributeReference * This,
            /* [in] */ double Thickness);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GcVerticalAlignment *vertiAlign);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            IGcadAttributeReference * This,
            /* [in] */ GcVerticalAlignment vertiAlign);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldLength )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ long *fieldLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FieldLength )( 
            IGcadAttributeReference * This,
            /* [in] */ long fieldLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ GcAlignment *align);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            IGcadAttributeReference * This,
            /* [in] */ GcAlignment align);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bUpsideDown);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT_BOOL bUpsideDown);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backward )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bBackward);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backward )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT_BOOL bBackward);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Invisible )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bInvisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Invisible )( 
            IGcadAttributeReference * This,
            /* [in] */ VARIANT_BOOL bInvisible);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Constant )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bConstant);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockPosition )( 
            IGcadAttributeReference * This,
            /* [retval][out] */ VARIANT_BOOL *bLockPosition);
        
        END_INTERFACE
    } IGcadAttributeReferenceVtbl;

    interface IGcadAttributeReference
    {
        CONST_VTBL struct IGcadAttributeReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAttributeReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAttributeReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAttributeReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAttributeReference_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAttributeReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAttributeReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAttributeReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAttributeReference_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadAttributeReference_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadAttributeReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadAttributeReference_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadAttributeReference_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAttributeReference_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadAttributeReference_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadAttributeReference_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadAttributeReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadAttributeReference_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadAttributeReference_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadAttributeReference_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadAttributeReference_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadAttributeReference_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadAttributeReference_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadAttributeReference_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadAttributeReference_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadAttributeReference_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadAttributeReference_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadAttributeReference_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadAttributeReference_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadAttributeReference_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadAttributeReference_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadAttributeReference_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadAttributeReference_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadAttributeReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadAttributeReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadAttributeReference_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadAttributeReference_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadAttributeReference_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadAttributeReference_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadAttributeReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadAttributeReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadAttributeReference_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadAttributeReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadAttributeReference_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadAttributeReference_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadAttributeReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadAttributeReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadAttributeReference_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadAttributeReference_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadAttributeReference_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadAttributeReference_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadAttributeReference_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadAttributeReference_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadAttributeReference_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadAttributeReference_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadAttributeReference_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadAttributeReference_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadAttributeReference_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadAttributeReference_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadAttributeReference_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadAttributeReference_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadAttributeReference_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadAttributeReference_get_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign) ) 

#define IGcadAttributeReference_put_HorizontalAlignment(This,horizAlign)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign) ) 

#define IGcadAttributeReference_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadAttributeReference_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadAttributeReference_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadAttributeReference_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadAttributeReference_get_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> get_ObliqueAngle(This,obliAngle) ) 

#define IGcadAttributeReference_put_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> put_ObliqueAngle(This,obliAngle) ) 

#define IGcadAttributeReference_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadAttributeReference_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadAttributeReference_get_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scalFactor) ) 

#define IGcadAttributeReference_put_ScaleFactor(This,scalFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scalFactor) ) 

#define IGcadAttributeReference_get_StyleName(This,Name)	\
    ( (This)->lpVtbl -> get_StyleName(This,Name) ) 

#define IGcadAttributeReference_put_StyleName(This,Name)	\
    ( (This)->lpVtbl -> put_StyleName(This,Name) ) 

#define IGcadAttributeReference_get_TagString(This,bstrTag)	\
    ( (This)->lpVtbl -> get_TagString(This,bstrTag) ) 

#define IGcadAttributeReference_put_TagString(This,bstrTag)	\
    ( (This)->lpVtbl -> put_TagString(This,bstrTag) ) 

#define IGcadAttributeReference_get_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadAttributeReference_put_TextAlignmentPoint(This,alignPoint)	\
    ( (This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint) ) 

#define IGcadAttributeReference_get_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadAttributeReference_put_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadAttributeReference_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadAttributeReference_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadAttributeReference_get_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> get_Thickness(This,Thickness) ) 

#define IGcadAttributeReference_put_Thickness(This,Thickness)	\
    ( (This)->lpVtbl -> put_Thickness(This,Thickness) ) 

#define IGcadAttributeReference_get_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign) ) 

#define IGcadAttributeReference_put_VerticalAlignment(This,vertiAlign)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign) ) 

#define IGcadAttributeReference_get_FieldLength(This,fieldLen)	\
    ( (This)->lpVtbl -> get_FieldLength(This,fieldLen) ) 

#define IGcadAttributeReference_put_FieldLength(This,fieldLen)	\
    ( (This)->lpVtbl -> put_FieldLength(This,fieldLen) ) 

#define IGcadAttributeReference_get_Alignment(This,align)	\
    ( (This)->lpVtbl -> get_Alignment(This,align) ) 

#define IGcadAttributeReference_put_Alignment(This,align)	\
    ( (This)->lpVtbl -> put_Alignment(This,align) ) 

#define IGcadAttributeReference_get_UpsideDown(This,bUpsideDown)	\
    ( (This)->lpVtbl -> get_UpsideDown(This,bUpsideDown) ) 

#define IGcadAttributeReference_put_UpsideDown(This,bUpsideDown)	\
    ( (This)->lpVtbl -> put_UpsideDown(This,bUpsideDown) ) 

#define IGcadAttributeReference_get_Backward(This,bBackward)	\
    ( (This)->lpVtbl -> get_Backward(This,bBackward) ) 

#define IGcadAttributeReference_put_Backward(This,bBackward)	\
    ( (This)->lpVtbl -> put_Backward(This,bBackward) ) 

#define IGcadAttributeReference_get_Invisible(This,bInvisible)	\
    ( (This)->lpVtbl -> get_Invisible(This,bInvisible) ) 

#define IGcadAttributeReference_put_Invisible(This,bInvisible)	\
    ( (This)->lpVtbl -> put_Invisible(This,bInvisible) ) 

#define IGcadAttributeReference_get_Constant(This,bConstant)	\
    ( (This)->lpVtbl -> get_Constant(This,bConstant) ) 

#define IGcadAttributeReference_get_LockPosition(This,bLockPosition)	\
    ( (This)->lpVtbl -> get_LockPosition(This,bLockPosition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAttributeReference_INTERFACE_DEFINED__ */


#ifndef __IGcadOle_INTERFACE_DEFINED__
#define __IGcadOle_INTERFACE_DEFINED__

/* interface IGcadOle */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadOle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76F8E2C6-9606-43AD-A8AB-4775E8776774")
    IGcadOle : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rot) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rot) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleWidth( 
            /* [retval][out] */ double *swidth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleWidth( 
            /* [in] */ double swidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleHeight( 
            /* [retval][out] */ double *sheight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleHeight( 
            /* [in] */ double sheight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ VARIANT_BOOL *aspect) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ VARIANT_BOOL aspect) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OleItemType( 
            /* [retval][out] */ GcOleType *pType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OleItemType( 
            /* [in] */ GcOleType pType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OlePlotQuality( 
            /* [retval][out] */ GcOlePlotQuality *pPQuality) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OlePlotQuality( 
            /* [in] */ GcOlePlotQuality pPQuality) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OleSourceApp( 
            /* [retval][out] */ BSTR *srcApp) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OleSourceApp( 
            /* [in] */ BSTR srcApp) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadOleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadOle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadOle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadOle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadOle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadOle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadOle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadOle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadOle * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadOle * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadOle * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadOle * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadOle * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadOle * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadOle * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadOle * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadOle * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadOle * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadOle * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadOle * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadOle * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadOle * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadOle * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadOle * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadOle * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadOle * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadOle * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadOle * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadOle * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadOle * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadOle * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadOle * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadOle * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadOle * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadOle * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadOle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadOle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadOle * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadOle * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadOle * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadOle * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadOle * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadOle * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadOle * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadOle * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadOle * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadOle * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadOle * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadOle * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadOle * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadOle * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadOle * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadOle * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadOle * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadOle * This,
            /* [retval][out] */ GCAD_ANGLE *rot);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadOle * This,
            /* [in] */ GCAD_ANGLE rot);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadOle * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadOle * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadOle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadOle * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleWidth )( 
            IGcadOle * This,
            /* [retval][out] */ double *swidth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleWidth )( 
            IGcadOle * This,
            /* [in] */ double swidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleHeight )( 
            IGcadOle * This,
            /* [retval][out] */ double *sheight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleHeight )( 
            IGcadOle * This,
            /* [in] */ double sheight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            IGcadOle * This,
            /* [retval][out] */ VARIANT_BOOL *aspect);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            IGcadOle * This,
            /* [in] */ VARIANT_BOOL aspect);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OleItemType )( 
            IGcadOle * This,
            /* [retval][out] */ GcOleType *pType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OleItemType )( 
            IGcadOle * This,
            /* [in] */ GcOleType pType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OlePlotQuality )( 
            IGcadOle * This,
            /* [retval][out] */ GcOlePlotQuality *pPQuality);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OlePlotQuality )( 
            IGcadOle * This,
            /* [in] */ GcOlePlotQuality pPQuality);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OleSourceApp )( 
            IGcadOle * This,
            /* [retval][out] */ BSTR *srcApp);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OleSourceApp )( 
            IGcadOle * This,
            /* [in] */ BSTR srcApp);
        
        END_INTERFACE
    } IGcadOleVtbl;

    interface IGcadOle
    {
        CONST_VTBL struct IGcadOleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadOle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadOle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadOle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadOle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadOle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadOle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadOle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadOle_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadOle_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadOle_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadOle_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadOle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadOle_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadOle_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadOle_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadOle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadOle_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadOle_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadOle_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadOle_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadOle_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadOle_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadOle_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadOle_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadOle_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadOle_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadOle_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadOle_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadOle_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadOle_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadOle_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadOle_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadOle_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadOle_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadOle_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadOle_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadOle_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadOle_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadOle_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadOle_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadOle_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadOle_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadOle_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadOle_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadOle_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadOle_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadOle_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadOle_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadOle_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadOle_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadOle_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadOle_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadOle_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadOle_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadOle_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadOle_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadOle_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadOle_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadOle_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadOle_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadOle_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadOle_get_Rotation(This,rot)	\
    ( (This)->lpVtbl -> get_Rotation(This,rot) ) 

#define IGcadOle_put_Rotation(This,rot)	\
    ( (This)->lpVtbl -> put_Rotation(This,rot) ) 

#define IGcadOle_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadOle_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadOle_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadOle_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadOle_get_ScaleWidth(This,swidth)	\
    ( (This)->lpVtbl -> get_ScaleWidth(This,swidth) ) 

#define IGcadOle_put_ScaleWidth(This,swidth)	\
    ( (This)->lpVtbl -> put_ScaleWidth(This,swidth) ) 

#define IGcadOle_get_ScaleHeight(This,sheight)	\
    ( (This)->lpVtbl -> get_ScaleHeight(This,sheight) ) 

#define IGcadOle_put_ScaleHeight(This,sheight)	\
    ( (This)->lpVtbl -> put_ScaleHeight(This,sheight) ) 

#define IGcadOle_get_LockAspectRatio(This,aspect)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,aspect) ) 

#define IGcadOle_put_LockAspectRatio(This,aspect)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,aspect) ) 

#define IGcadOle_get_OleItemType(This,pType)	\
    ( (This)->lpVtbl -> get_OleItemType(This,pType) ) 

#define IGcadOle_put_OleItemType(This,pType)	\
    ( (This)->lpVtbl -> put_OleItemType(This,pType) ) 

#define IGcadOle_get_OlePlotQuality(This,pPQuality)	\
    ( (This)->lpVtbl -> get_OlePlotQuality(This,pPQuality) ) 

#define IGcadOle_put_OlePlotQuality(This,pPQuality)	\
    ( (This)->lpVtbl -> put_OlePlotQuality(This,pPQuality) ) 

#define IGcadOle_get_OleSourceApp(This,srcApp)	\
    ( (This)->lpVtbl -> get_OleSourceApp(This,srcApp) ) 

#define IGcadOle_put_OleSourceApp(This,srcApp)	\
    ( (This)->lpVtbl -> put_OleSourceApp(This,srcApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadOle_INTERFACE_DEFINED__ */


#ifndef __IGcadHelix_INTERFACE_DEFINED__
#define __IGcadHelix_INTERFACE_DEFINED__

/* interface IGcadHelix */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadHelix;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("723AFE1B-DB5D-46E3-A421-B6E15035E5ED")
    IGcadHelix : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ VARIANT *StartPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ VARIANT StartPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Constrain( 
            /* [retval][out] */ GcHelixConstrainType *constrainType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Constrain( 
            /* [in] */ GcHelixConstrainType constrainType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Length) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Length) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Turns( 
            /* [retval][out] */ GCAD_NOUNITS *Turns) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Turns( 
            /* [in] */ GCAD_NOUNITS Turns) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TurnHeight( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TurnHeight( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseRadius( 
            /* [retval][out] */ double *Radius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseRadius( 
            /* [in] */ double Radius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopRadius( 
            /* [retval][out] */ double *Radius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopRadius( 
            /* [in] */ double Radius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Twist( 
            /* [retval][out] */ GcHelixTwistType *twistType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Twist( 
            /* [in] */ GcHelixTwistType twistType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TurnSlope( 
            /* [retval][out] */ GCAD_ANGLE *slopeAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TotalLength( 
            /* [retval][out] */ double *TotalLength) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadHelixVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadHelix * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadHelix * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadHelix * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadHelix * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadHelix * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadHelix * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadHelix * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadHelix * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadHelix * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadHelix * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadHelix * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadHelix * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadHelix * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadHelix * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadHelix * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadHelix * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadHelix * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadHelix * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadHelix * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadHelix * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadHelix * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadHelix * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadHelix * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadHelix * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadHelix * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadHelix * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadHelix * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadHelix * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadHelix * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadHelix * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadHelix * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadHelix * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadHelix * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadHelix * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadHelix * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadHelix * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadHelix * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadHelix * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadHelix * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadHelix * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadHelix * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadHelix * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadHelix * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadHelix * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadHelix * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadHelix * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadHelix * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadHelix * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadHelix * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadHelix * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadHelix * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadHelix * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadHelix * This,
            /* [retval][out] */ VARIANT *StartPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadHelix * This,
            /* [in] */ VARIANT StartPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Constrain )( 
            IGcadHelix * This,
            /* [retval][out] */ GcHelixConstrainType *constrainType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Constrain )( 
            IGcadHelix * This,
            /* [in] */ GcHelixConstrainType constrainType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadHelix * This,
            /* [retval][out] */ double *Length);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadHelix * This,
            /* [in] */ double Length);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Turns )( 
            IGcadHelix * This,
            /* [retval][out] */ GCAD_NOUNITS *Turns);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Turns )( 
            IGcadHelix * This,
            /* [in] */ GCAD_NOUNITS Turns);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TurnHeight )( 
            IGcadHelix * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TurnHeight )( 
            IGcadHelix * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseRadius )( 
            IGcadHelix * This,
            /* [retval][out] */ double *Radius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseRadius )( 
            IGcadHelix * This,
            /* [in] */ double Radius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopRadius )( 
            IGcadHelix * This,
            /* [retval][out] */ double *Radius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopRadius )( 
            IGcadHelix * This,
            /* [in] */ double Radius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Twist )( 
            IGcadHelix * This,
            /* [retval][out] */ GcHelixTwistType *twistType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Twist )( 
            IGcadHelix * This,
            /* [in] */ GcHelixTwistType twistType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TurnSlope )( 
            IGcadHelix * This,
            /* [retval][out] */ GCAD_ANGLE *slopeAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TotalLength )( 
            IGcadHelix * This,
            /* [retval][out] */ double *TotalLength);
        
        END_INTERFACE
    } IGcadHelixVtbl;

    interface IGcadHelix
    {
        CONST_VTBL struct IGcadHelixVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadHelix_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadHelix_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadHelix_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadHelix_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadHelix_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadHelix_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadHelix_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadHelix_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadHelix_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadHelix_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadHelix_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadHelix_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadHelix_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadHelix_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadHelix_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadHelix_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadHelix_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadHelix_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadHelix_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadHelix_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadHelix_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadHelix_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadHelix_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadHelix_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadHelix_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadHelix_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadHelix_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadHelix_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadHelix_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadHelix_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadHelix_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadHelix_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadHelix_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadHelix_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadHelix_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadHelix_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadHelix_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadHelix_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadHelix_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadHelix_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadHelix_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadHelix_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadHelix_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadHelix_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadHelix_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadHelix_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadHelix_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadHelix_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadHelix_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadHelix_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadHelix_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadHelix_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadHelix_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadHelix_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadHelix_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadHelix_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadHelix_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadHelix_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadHelix_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadHelix_get_Position(This,StartPoint)	\
    ( (This)->lpVtbl -> get_Position(This,StartPoint) ) 

#define IGcadHelix_put_Position(This,StartPoint)	\
    ( (This)->lpVtbl -> put_Position(This,StartPoint) ) 

#define IGcadHelix_get_Constrain(This,constrainType)	\
    ( (This)->lpVtbl -> get_Constrain(This,constrainType) ) 

#define IGcadHelix_put_Constrain(This,constrainType)	\
    ( (This)->lpVtbl -> put_Constrain(This,constrainType) ) 

#define IGcadHelix_get_Height(This,Length)	\
    ( (This)->lpVtbl -> get_Height(This,Length) ) 

#define IGcadHelix_put_Height(This,Length)	\
    ( (This)->lpVtbl -> put_Height(This,Length) ) 

#define IGcadHelix_get_Turns(This,Turns)	\
    ( (This)->lpVtbl -> get_Turns(This,Turns) ) 

#define IGcadHelix_put_Turns(This,Turns)	\
    ( (This)->lpVtbl -> put_Turns(This,Turns) ) 

#define IGcadHelix_get_TurnHeight(This,Distance)	\
    ( (This)->lpVtbl -> get_TurnHeight(This,Distance) ) 

#define IGcadHelix_put_TurnHeight(This,Distance)	\
    ( (This)->lpVtbl -> put_TurnHeight(This,Distance) ) 

#define IGcadHelix_get_BaseRadius(This,Radius)	\
    ( (This)->lpVtbl -> get_BaseRadius(This,Radius) ) 

#define IGcadHelix_put_BaseRadius(This,Radius)	\
    ( (This)->lpVtbl -> put_BaseRadius(This,Radius) ) 

#define IGcadHelix_get_TopRadius(This,Radius)	\
    ( (This)->lpVtbl -> get_TopRadius(This,Radius) ) 

#define IGcadHelix_put_TopRadius(This,Radius)	\
    ( (This)->lpVtbl -> put_TopRadius(This,Radius) ) 

#define IGcadHelix_get_Twist(This,twistType)	\
    ( (This)->lpVtbl -> get_Twist(This,twistType) ) 

#define IGcadHelix_put_Twist(This,twistType)	\
    ( (This)->lpVtbl -> put_Twist(This,twistType) ) 

#define IGcadHelix_get_TurnSlope(This,slopeAngle)	\
    ( (This)->lpVtbl -> get_TurnSlope(This,slopeAngle) ) 

#define IGcadHelix_get_TotalLength(This,TotalLength)	\
    ( (This)->lpVtbl -> get_TotalLength(This,TotalLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadHelix_INTERFACE_DEFINED__ */


#ifndef __IGcadSurface_INTERFACE_DEFINED__
#define __IGcadSurface_INTERFACE_DEFINED__

/* interface IGcadSurface */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSurface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7439376B-DF38-4074-8BBB-F365CC5F1CE6")
    IGcadSurface : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SurfaceType( 
            /* [retval][out] */ BSTR *SurfaceType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UIsolineDensity( 
            /* [retval][out] */ long *density) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UIsolineDensity( 
            /* [in] */ long density) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VIsolineDensity( 
            /* [retval][out] */ long *density) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VIsolineDensity( 
            /* [in] */ long density) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_WireframeType( 
            /* [retval][out] */ GcWireframeType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_WireframeType( 
            /* [in] */ GcWireframeType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaintainAssociativity( 
            /* [retval][out] */ int *rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MaintainAssociativity( 
            /* [in] */ int rhs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAssociativity( 
            /* [retval][out] */ VARIANT_BOOL *rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAssociativity( 
            /* [in] */ VARIANT_BOOL rhs) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSurfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSurface * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSurface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSurface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSurface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSurface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSurface * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSurface * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSurface * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSurface * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSurface * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSurface * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSurface * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSurface * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSurface * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSurface * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSurface * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSurface * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSurface * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSurface * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSurface * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSurface * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSurface * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSurface * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSurface * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSurface * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSurface * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSurface * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSurface * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSurface * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSurface * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSurface * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSurface * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSurface * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSurface * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSurface * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSurface * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSurface * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSurface * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSurface * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSurface * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSurface * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSurface * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSurface * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSurface * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSurface * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSurface * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSurface * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSurface * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSurface * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSurface * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )( 
            IGcadSurface * This,
            /* [retval][out] */ BSTR *SurfaceType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )( 
            IGcadSurface * This,
            /* [retval][out] */ long *density);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )( 
            IGcadSurface * This,
            /* [in] */ long density);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )( 
            IGcadSurface * This,
            /* [retval][out] */ long *density);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )( 
            IGcadSurface * This,
            /* [in] */ long density);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WireframeType )( 
            IGcadSurface * This,
            /* [retval][out] */ GcWireframeType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WireframeType )( 
            IGcadSurface * This,
            /* [in] */ GcWireframeType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )( 
            IGcadSurface * This,
            /* [retval][out] */ int *rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )( 
            IGcadSurface * This,
            /* [in] */ int rhs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )( 
            IGcadSurface * This,
            /* [retval][out] */ VARIANT_BOOL *rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )( 
            IGcadSurface * This,
            /* [in] */ VARIANT_BOOL rhs);
        
        END_INTERFACE
    } IGcadSurfaceVtbl;

    interface IGcadSurface
    {
        CONST_VTBL struct IGcadSurfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSurface_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSurface_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSurface_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSurface_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSurface_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSurface_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSurface_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSurface_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSurface_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSurface_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSurface_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSurface_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSurface_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSurface_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSurface_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSurface_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSurface_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSurface_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSurface_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSurface_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSurface_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSurface_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSurface_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSurface_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSurface_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSurface_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSurface_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSurface_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSurface_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSurface_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSurface_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSurface_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSurface_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSurface_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSurface_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSurface_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSurface_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSurface_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSurface_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSurface_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSurface_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSurface_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSurface_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSurface_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSurface_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSurface_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSurface_get_SurfaceType(This,SurfaceType)	\
    ( (This)->lpVtbl -> get_SurfaceType(This,SurfaceType) ) 

#define IGcadSurface_get_UIsolineDensity(This,density)	\
    ( (This)->lpVtbl -> get_UIsolineDensity(This,density) ) 

#define IGcadSurface_put_UIsolineDensity(This,density)	\
    ( (This)->lpVtbl -> put_UIsolineDensity(This,density) ) 

#define IGcadSurface_get_VIsolineDensity(This,density)	\
    ( (This)->lpVtbl -> get_VIsolineDensity(This,density) ) 

#define IGcadSurface_put_VIsolineDensity(This,density)	\
    ( (This)->lpVtbl -> put_VIsolineDensity(This,density) ) 

#define IGcadSurface_get_WireframeType(This,Type)	\
    ( (This)->lpVtbl -> get_WireframeType(This,Type) ) 

#define IGcadSurface_put_WireframeType(This,Type)	\
    ( (This)->lpVtbl -> put_WireframeType(This,Type) ) 

#define IGcadSurface_get_MaintainAssociativity(This,rhs)	\
    ( (This)->lpVtbl -> get_MaintainAssociativity(This,rhs) ) 

#define IGcadSurface_put_MaintainAssociativity(This,rhs)	\
    ( (This)->lpVtbl -> put_MaintainAssociativity(This,rhs) ) 

#define IGcadSurface_get_ShowAssociativity(This,rhs)	\
    ( (This)->lpVtbl -> get_ShowAssociativity(This,rhs) ) 

#define IGcadSurface_put_ShowAssociativity(This,rhs)	\
    ( (This)->lpVtbl -> put_ShowAssociativity(This,rhs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSurface_INTERFACE_DEFINED__ */


#ifndef __IGcadUnderlay_INTERFACE_DEFINED__
#define __IGcadUnderlay_INTERFACE_DEFINED__

/* interface IGcadUnderlay */
/* [unique][oleautomation][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadUnderlay;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("57E60771-6EAB-4701-94E4-681722F6DEF4")
    IGcadUnderlay : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Contrast( 
            /* [retval][out] */ long *Contrast) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Contrast( 
            /* [in] */ long Contrast) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fade( 
            /* [retval][out] */ long *Fade) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fade( 
            /* [in] */ long Fade) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ VARIANT *pos) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ VARIANT pos) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnderlayName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnderlayName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItemName( 
            /* [in] */ BSTR sheetName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemName( 
            /* [retval][out] */ BSTR *sheetName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Monochrome( 
            /* [retval][out] */ VARIANT_BOOL *bMono) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Monochrome( 
            /* [in] */ VARIANT_BOOL bMono) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdjustForBackground( 
            /* [retval][out] */ VARIANT_BOOL *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdjustForBackground( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClipBoundary( 
            /* [in] */ VARIANT boundry) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ GCAD_NOUNITS ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_File( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_File( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnderlayVisibility( 
            /* [retval][out] */ VARIANT_BOOL *fVisible) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnderlayVisibility( 
            /* [in] */ VARIANT_BOOL fVisible) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClippingEnabled( 
            /* [retval][out] */ VARIANT_BOOL *kClip) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClippingEnabled( 
            /* [in] */ VARIANT_BOOL kClip) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnderlayLayerOverrideApplied( 
            /* [retval][out] */ GcUnderlayLayerOverrideType *bOverride) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnderlayLayerOverrideApplied( 
            /* [in] */ GcUnderlayLayerOverrideType bOverride) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadUnderlayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadUnderlay * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadUnderlay * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadUnderlay * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadUnderlay * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadUnderlay * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadUnderlay * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadUnderlay * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadUnderlay * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadUnderlay * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadUnderlay * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadUnderlay * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadUnderlay * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadUnderlay * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadUnderlay * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadUnderlay * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadUnderlay * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadUnderlay * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadUnderlay * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadUnderlay * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadUnderlay * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadUnderlay * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadUnderlay * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadUnderlay * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            IGcadUnderlay * This,
            /* [retval][out] */ long *Contrast);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            IGcadUnderlay * This,
            /* [in] */ long Contrast);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fade )( 
            IGcadUnderlay * This,
            /* [retval][out] */ long *Fade);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fade )( 
            IGcadUnderlay * This,
            /* [in] */ long Fade);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT *pos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT pos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadUnderlay * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadUnderlay * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadUnderlay * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadUnderlay * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadUnderlay * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayName )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayName )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItemName )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR sheetName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemName )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *sheetName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Monochrome )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bMono);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Monochrome )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL bMono);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdjustForBackground )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdjustForBackground )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClipBoundary )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT boundry);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadUnderlay * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_File )( 
            IGcadUnderlay * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_File )( 
            IGcadUnderlay * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayVisibility )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *fVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayVisibility )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL fVisible);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClippingEnabled )( 
            IGcadUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *kClip);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClippingEnabled )( 
            IGcadUnderlay * This,
            /* [in] */ VARIANT_BOOL kClip);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayLayerOverrideApplied )( 
            IGcadUnderlay * This,
            /* [retval][out] */ GcUnderlayLayerOverrideType *bOverride);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayLayerOverrideApplied )( 
            IGcadUnderlay * This,
            /* [in] */ GcUnderlayLayerOverrideType bOverride);
        
        END_INTERFACE
    } IGcadUnderlayVtbl;

    interface IGcadUnderlay
    {
        CONST_VTBL struct IGcadUnderlayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadUnderlay_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadUnderlay_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadUnderlay_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadUnderlay_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadUnderlay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadUnderlay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadUnderlay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadUnderlay_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadUnderlay_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadUnderlay_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadUnderlay_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadUnderlay_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadUnderlay_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadUnderlay_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadUnderlay_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadUnderlay_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadUnderlay_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadUnderlay_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadUnderlay_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadUnderlay_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadUnderlay_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadUnderlay_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadUnderlay_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadUnderlay_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadUnderlay_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadUnderlay_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadUnderlay_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadUnderlay_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadUnderlay_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadUnderlay_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadUnderlay_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadUnderlay_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadUnderlay_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadUnderlay_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadUnderlay_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadUnderlay_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadUnderlay_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadUnderlay_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadUnderlay_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadUnderlay_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadUnderlay_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadUnderlay_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadUnderlay_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadUnderlay_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadUnderlay_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadUnderlay_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadUnderlay_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadUnderlay_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadUnderlay_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadUnderlay_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadUnderlay_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadUnderlay_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadUnderlay_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadUnderlay_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadUnderlay_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadUnderlay_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadUnderlay_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadUnderlay_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadUnderlay_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadUnderlay_get_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> get_Contrast(This,Contrast) ) 

#define IGcadUnderlay_put_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> put_Contrast(This,Contrast) ) 

#define IGcadUnderlay_get_Fade(This,Fade)	\
    ( (This)->lpVtbl -> get_Fade(This,Fade) ) 

#define IGcadUnderlay_put_Fade(This,Fade)	\
    ( (This)->lpVtbl -> put_Fade(This,Fade) ) 

#define IGcadUnderlay_get_Position(This,pos)	\
    ( (This)->lpVtbl -> get_Position(This,pos) ) 

#define IGcadUnderlay_put_Position(This,pos)	\
    ( (This)->lpVtbl -> put_Position(This,pos) ) 

#define IGcadUnderlay_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadUnderlay_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadUnderlay_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadUnderlay_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadUnderlay_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadUnderlay_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadUnderlay_get_UnderlayName(This,Name)	\
    ( (This)->lpVtbl -> get_UnderlayName(This,Name) ) 

#define IGcadUnderlay_put_UnderlayName(This,Name)	\
    ( (This)->lpVtbl -> put_UnderlayName(This,Name) ) 

#define IGcadUnderlay_put_ItemName(This,sheetName)	\
    ( (This)->lpVtbl -> put_ItemName(This,sheetName) ) 

#define IGcadUnderlay_get_ItemName(This,sheetName)	\
    ( (This)->lpVtbl -> get_ItemName(This,sheetName) ) 

#define IGcadUnderlay_get_Monochrome(This,bMono)	\
    ( (This)->lpVtbl -> get_Monochrome(This,bMono) ) 

#define IGcadUnderlay_put_Monochrome(This,bMono)	\
    ( (This)->lpVtbl -> put_Monochrome(This,bMono) ) 

#define IGcadUnderlay_get_AdjustForBackground(This,Value)	\
    ( (This)->lpVtbl -> get_AdjustForBackground(This,Value) ) 

#define IGcadUnderlay_put_AdjustForBackground(This,Value)	\
    ( (This)->lpVtbl -> put_AdjustForBackground(This,Value) ) 

#define IGcadUnderlay_ClipBoundary(This,boundry)	\
    ( (This)->lpVtbl -> ClipBoundary(This,boundry) ) 

#define IGcadUnderlay_get_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,ScaleFactor) ) 

#define IGcadUnderlay_put_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,ScaleFactor) ) 

#define IGcadUnderlay_get_File(This,Name)	\
    ( (This)->lpVtbl -> get_File(This,Name) ) 

#define IGcadUnderlay_put_File(This,Name)	\
    ( (This)->lpVtbl -> put_File(This,Name) ) 

#define IGcadUnderlay_get_UnderlayVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> get_UnderlayVisibility(This,fVisible) ) 

#define IGcadUnderlay_put_UnderlayVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> put_UnderlayVisibility(This,fVisible) ) 

#define IGcadUnderlay_get_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> get_ClippingEnabled(This,kClip) ) 

#define IGcadUnderlay_put_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> put_ClippingEnabled(This,kClip) ) 

#define IGcadUnderlay_get_UnderlayLayerOverrideApplied(This,bOverride)	\
    ( (This)->lpVtbl -> get_UnderlayLayerOverrideApplied(This,bOverride) ) 

#define IGcadUnderlay_put_UnderlayLayerOverrideApplied(This,bOverride)	\
    ( (This)->lpVtbl -> put_UnderlayLayerOverrideApplied(This,bOverride) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadUnderlay_INTERFACE_DEFINED__ */


#ifndef __IGcadDwfUnderlay_INTERFACE_DEFINED__
#define __IGcadDwfUnderlay_INTERFACE_DEFINED__

/* interface IGcadDwfUnderlay */
/* [object][oleautomation][dual][uuid] */ 


EXTERN_C const IID IID_IGcadDwfUnderlay;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70F3692B-E27B-4B61-8017-05A08C3B0B3F")
    IGcadDwfUnderlay : public IGcadUnderlay
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DWFFormat( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DWFFormat( 
            /* [in] */ BSTR Name) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDwfUnderlayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDwfUnderlay * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDwfUnderlay * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDwfUnderlay * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDwfUnderlay * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDwfUnderlay * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDwfUnderlay * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDwfUnderlay * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDwfUnderlay * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDwfUnderlay * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDwfUnderlay * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDwfUnderlay * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDwfUnderlay * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDwfUnderlay * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDwfUnderlay * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDwfUnderlay * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ long *Contrast);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            IGcadDwfUnderlay * This,
            /* [in] */ long Contrast);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fade )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ long *Fade);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fade )( 
            IGcadDwfUnderlay * This,
            /* [in] */ long Fade);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT *pos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT pos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadDwfUnderlay * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadDwfUnderlay * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayName )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayName )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItemName )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR sheetName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemName )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *sheetName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Monochrome )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *bMono);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Monochrome )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL bMono);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdjustForBackground )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdjustForBackground )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClipBoundary )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT boundry);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_File )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_File )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayVisibility )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *fVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayVisibility )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL fVisible);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClippingEnabled )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ VARIANT_BOOL *kClip);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClippingEnabled )( 
            IGcadDwfUnderlay * This,
            /* [in] */ VARIANT_BOOL kClip);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlayLayerOverrideApplied )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ GcUnderlayLayerOverrideType *bOverride);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlayLayerOverrideApplied )( 
            IGcadDwfUnderlay * This,
            /* [in] */ GcUnderlayLayerOverrideType bOverride);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DWFFormat )( 
            IGcadDwfUnderlay * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DWFFormat )( 
            IGcadDwfUnderlay * This,
            /* [in] */ BSTR Name);
        
        END_INTERFACE
    } IGcadDwfUnderlayVtbl;

    interface IGcadDwfUnderlay
    {
        CONST_VTBL struct IGcadDwfUnderlayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDwfUnderlay_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDwfUnderlay_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDwfUnderlay_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDwfUnderlay_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDwfUnderlay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDwfUnderlay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDwfUnderlay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDwfUnderlay_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDwfUnderlay_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDwfUnderlay_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDwfUnderlay_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDwfUnderlay_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDwfUnderlay_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDwfUnderlay_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDwfUnderlay_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDwfUnderlay_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDwfUnderlay_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDwfUnderlay_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDwfUnderlay_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDwfUnderlay_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDwfUnderlay_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDwfUnderlay_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDwfUnderlay_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDwfUnderlay_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDwfUnderlay_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDwfUnderlay_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDwfUnderlay_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDwfUnderlay_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDwfUnderlay_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDwfUnderlay_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDwfUnderlay_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDwfUnderlay_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDwfUnderlay_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDwfUnderlay_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDwfUnderlay_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDwfUnderlay_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDwfUnderlay_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDwfUnderlay_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDwfUnderlay_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDwfUnderlay_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDwfUnderlay_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDwfUnderlay_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDwfUnderlay_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDwfUnderlay_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDwfUnderlay_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDwfUnderlay_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDwfUnderlay_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDwfUnderlay_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDwfUnderlay_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDwfUnderlay_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDwfUnderlay_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDwfUnderlay_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDwfUnderlay_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDwfUnderlay_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDwfUnderlay_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDwfUnderlay_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDwfUnderlay_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDwfUnderlay_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDwfUnderlay_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDwfUnderlay_get_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> get_Contrast(This,Contrast) ) 

#define IGcadDwfUnderlay_put_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> put_Contrast(This,Contrast) ) 

#define IGcadDwfUnderlay_get_Fade(This,Fade)	\
    ( (This)->lpVtbl -> get_Fade(This,Fade) ) 

#define IGcadDwfUnderlay_put_Fade(This,Fade)	\
    ( (This)->lpVtbl -> put_Fade(This,Fade) ) 

#define IGcadDwfUnderlay_get_Position(This,pos)	\
    ( (This)->lpVtbl -> get_Position(This,pos) ) 

#define IGcadDwfUnderlay_put_Position(This,pos)	\
    ( (This)->lpVtbl -> put_Position(This,pos) ) 

#define IGcadDwfUnderlay_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDwfUnderlay_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDwfUnderlay_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadDwfUnderlay_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadDwfUnderlay_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadDwfUnderlay_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadDwfUnderlay_get_UnderlayName(This,Name)	\
    ( (This)->lpVtbl -> get_UnderlayName(This,Name) ) 

#define IGcadDwfUnderlay_put_UnderlayName(This,Name)	\
    ( (This)->lpVtbl -> put_UnderlayName(This,Name) ) 

#define IGcadDwfUnderlay_put_ItemName(This,sheetName)	\
    ( (This)->lpVtbl -> put_ItemName(This,sheetName) ) 

#define IGcadDwfUnderlay_get_ItemName(This,sheetName)	\
    ( (This)->lpVtbl -> get_ItemName(This,sheetName) ) 

#define IGcadDwfUnderlay_get_Monochrome(This,bMono)	\
    ( (This)->lpVtbl -> get_Monochrome(This,bMono) ) 

#define IGcadDwfUnderlay_put_Monochrome(This,bMono)	\
    ( (This)->lpVtbl -> put_Monochrome(This,bMono) ) 

#define IGcadDwfUnderlay_get_AdjustForBackground(This,Value)	\
    ( (This)->lpVtbl -> get_AdjustForBackground(This,Value) ) 

#define IGcadDwfUnderlay_put_AdjustForBackground(This,Value)	\
    ( (This)->lpVtbl -> put_AdjustForBackground(This,Value) ) 

#define IGcadDwfUnderlay_ClipBoundary(This,boundry)	\
    ( (This)->lpVtbl -> ClipBoundary(This,boundry) ) 

#define IGcadDwfUnderlay_get_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,ScaleFactor) ) 

#define IGcadDwfUnderlay_put_ScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,ScaleFactor) ) 

#define IGcadDwfUnderlay_get_File(This,Name)	\
    ( (This)->lpVtbl -> get_File(This,Name) ) 

#define IGcadDwfUnderlay_put_File(This,Name)	\
    ( (This)->lpVtbl -> put_File(This,Name) ) 

#define IGcadDwfUnderlay_get_UnderlayVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> get_UnderlayVisibility(This,fVisible) ) 

#define IGcadDwfUnderlay_put_UnderlayVisibility(This,fVisible)	\
    ( (This)->lpVtbl -> put_UnderlayVisibility(This,fVisible) ) 

#define IGcadDwfUnderlay_get_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> get_ClippingEnabled(This,kClip) ) 

#define IGcadDwfUnderlay_put_ClippingEnabled(This,kClip)	\
    ( (This)->lpVtbl -> put_ClippingEnabled(This,kClip) ) 

#define IGcadDwfUnderlay_get_UnderlayLayerOverrideApplied(This,bOverride)	\
    ( (This)->lpVtbl -> get_UnderlayLayerOverrideApplied(This,bOverride) ) 

#define IGcadDwfUnderlay_put_UnderlayLayerOverrideApplied(This,bOverride)	\
    ( (This)->lpVtbl -> put_UnderlayLayerOverrideApplied(This,bOverride) ) 


#define IGcadDwfUnderlay_get_DWFFormat(This,Name)	\
    ( (This)->lpVtbl -> get_DWFFormat(This,Name) ) 

#define IGcadDwfUnderlay_put_DWFFormat(This,Name)	\
    ( (This)->lpVtbl -> put_DWFFormat(This,Name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDwfUnderlay_INTERFACE_DEFINED__ */


#ifndef __IGcadMInsertBlock_INTERFACE_DEFINED__
#define __IGcadMInsertBlock_INTERFACE_DEFINED__

/* interface IGcadMInsertBlock */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadMInsertBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22CDC655-9EF9-4B98-B06A-A31AAC95AE2B")
    IGcadMInsertBlock : public IGcadBlockReference
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Columns( 
            /* [in] */ long NumColumns) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ long *NumColumns) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnSpacing( 
            /* [in] */ double Spacing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnSpacing( 
            /* [retval][out] */ double *Spacing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rows( 
            /* [in] */ long NumRows) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ long *NumRows) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowSpacing( 
            /* [in] */ double Spacing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowSpacing( 
            /* [retval][out] */ double *Spacing) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMInsertBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMInsertBlock * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMInsertBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMInsertBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMInsertBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMInsertBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMInsertBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMInsertBlock * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMInsertBlock * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMInsertBlock * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadMInsertBlock * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadMInsertBlock * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadMInsertBlock * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadMInsertBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadMInsertBlock * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadMInsertBlock * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadMInsertBlock * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadMInsertBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadMInsertBlock * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadMInsertBlock * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadMInsertBlock * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Columns )( 
            IGcadMInsertBlock * This,
            /* [in] */ long NumColumns);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ long *NumColumns);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnSpacing )( 
            IGcadMInsertBlock * This,
            /* [in] */ double Spacing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnSpacing )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ double *Spacing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rows )( 
            IGcadMInsertBlock * This,
            /* [in] */ long NumRows);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ long *NumRows);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowSpacing )( 
            IGcadMInsertBlock * This,
            /* [in] */ double Spacing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowSpacing )( 
            IGcadMInsertBlock * This,
            /* [retval][out] */ double *Spacing);
        
        END_INTERFACE
    } IGcadMInsertBlockVtbl;

    interface IGcadMInsertBlock
    {
        CONST_VTBL struct IGcadMInsertBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMInsertBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMInsertBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMInsertBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMInsertBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMInsertBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMInsertBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMInsertBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMInsertBlock_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMInsertBlock_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMInsertBlock_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMInsertBlock_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMInsertBlock_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMInsertBlock_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMInsertBlock_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMInsertBlock_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMInsertBlock_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMInsertBlock_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMInsertBlock_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMInsertBlock_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMInsertBlock_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMInsertBlock_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMInsertBlock_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMInsertBlock_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadMInsertBlock_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadMInsertBlock_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadMInsertBlock_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadMInsertBlock_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadMInsertBlock_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadMInsertBlock_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadMInsertBlock_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadMInsertBlock_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadMInsertBlock_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadMInsertBlock_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadMInsertBlock_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadMInsertBlock_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadMInsertBlock_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadMInsertBlock_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadMInsertBlock_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadMInsertBlock_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadMInsertBlock_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadMInsertBlock_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadMInsertBlock_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadMInsertBlock_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadMInsertBlock_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadMInsertBlock_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadMInsertBlock_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadMInsertBlock_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadMInsertBlock_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadMInsertBlock_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadMInsertBlock_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadMInsertBlock_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadMInsertBlock_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadMInsertBlock_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadMInsertBlock_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadMInsertBlock_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadMInsertBlock_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadMInsertBlock_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadMInsertBlock_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadMInsertBlock_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadMInsertBlock_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadMInsertBlock_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadMInsertBlock_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadMInsertBlock_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadMInsertBlock_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadMInsertBlock_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadMInsertBlock_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadMInsertBlock_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadMInsertBlock_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadMInsertBlock_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadMInsertBlock_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadMInsertBlock_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadMInsertBlock_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadMInsertBlock_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadMInsertBlock_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadMInsertBlock_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadMInsertBlock_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadMInsertBlock_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadMInsertBlock_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadMInsertBlock_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadMInsertBlock_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 


#define IGcadMInsertBlock_put_Columns(This,NumColumns)	\
    ( (This)->lpVtbl -> put_Columns(This,NumColumns) ) 

#define IGcadMInsertBlock_get_Columns(This,NumColumns)	\
    ( (This)->lpVtbl -> get_Columns(This,NumColumns) ) 

#define IGcadMInsertBlock_put_ColumnSpacing(This,Spacing)	\
    ( (This)->lpVtbl -> put_ColumnSpacing(This,Spacing) ) 

#define IGcadMInsertBlock_get_ColumnSpacing(This,Spacing)	\
    ( (This)->lpVtbl -> get_ColumnSpacing(This,Spacing) ) 

#define IGcadMInsertBlock_put_Rows(This,NumRows)	\
    ( (This)->lpVtbl -> put_Rows(This,NumRows) ) 

#define IGcadMInsertBlock_get_Rows(This,NumRows)	\
    ( (This)->lpVtbl -> get_Rows(This,NumRows) ) 

#define IGcadMInsertBlock_put_RowSpacing(This,Spacing)	\
    ( (This)->lpVtbl -> put_RowSpacing(This,Spacing) ) 

#define IGcadMInsertBlock_get_RowSpacing(This,Spacing)	\
    ( (This)->lpVtbl -> get_RowSpacing(This,Spacing) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMInsertBlock_INTERFACE_DEFINED__ */


#ifndef __IGcadPolyfaceMesh_INTERFACE_DEFINED__
#define __IGcadPolyfaceMesh_INTERFACE_DEFINED__

/* interface IGcadPolyfaceMesh */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPolyfaceMesh;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7110AB7-61F0-4519-BE4E-A5C52C424FDB")
    IGcadPolyfaceMesh : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Vertices) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Vertices) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfVertices( 
            /* [retval][out] */ long *NumVertices) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfFaces( 
            /* [retval][out] */ long *NumFaces) = 0;
        
        virtual /* [hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Faces( 
            /* [in] */ VARIANT rhs) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPolyfaceMeshVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPolyfaceMesh * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPolyfaceMesh * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPolyfaceMesh * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPolyfaceMesh * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPolyfaceMesh * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPolyfaceMesh * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadPolyfaceMesh * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadPolyfaceMesh * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT Vertices);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ VARIANT *Vertices);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfVertices )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ long *NumVertices);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFaces )( 
            IGcadPolyfaceMesh * This,
            /* [retval][out] */ long *NumFaces);
        
        /* [hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Faces )( 
            IGcadPolyfaceMesh * This,
            /* [in] */ VARIANT rhs);
        
        END_INTERFACE
    } IGcadPolyfaceMeshVtbl;

    interface IGcadPolyfaceMesh
    {
        CONST_VTBL struct IGcadPolyfaceMeshVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPolyfaceMesh_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPolyfaceMesh_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPolyfaceMesh_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPolyfaceMesh_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPolyfaceMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPolyfaceMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPolyfaceMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPolyfaceMesh_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPolyfaceMesh_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPolyfaceMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPolyfaceMesh_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPolyfaceMesh_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPolyfaceMesh_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPolyfaceMesh_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPolyfaceMesh_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPolyfaceMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPolyfaceMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPolyfaceMesh_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPolyfaceMesh_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPolyfaceMesh_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPolyfaceMesh_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPolyfaceMesh_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPolyfaceMesh_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadPolyfaceMesh_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadPolyfaceMesh_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadPolyfaceMesh_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadPolyfaceMesh_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadPolyfaceMesh_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadPolyfaceMesh_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadPolyfaceMesh_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadPolyfaceMesh_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadPolyfaceMesh_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadPolyfaceMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadPolyfaceMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadPolyfaceMesh_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadPolyfaceMesh_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadPolyfaceMesh_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadPolyfaceMesh_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadPolyfaceMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadPolyfaceMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadPolyfaceMesh_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadPolyfaceMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadPolyfaceMesh_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadPolyfaceMesh_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadPolyfaceMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadPolyfaceMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadPolyfaceMesh_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadPolyfaceMesh_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadPolyfaceMesh_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadPolyfaceMesh_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadPolyfaceMesh_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadPolyfaceMesh_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadPolyfaceMesh_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadPolyfaceMesh_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadPolyfaceMesh_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadPolyfaceMesh_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadPolyfaceMesh_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadPolyfaceMesh_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadPolyfaceMesh_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadPolyfaceMesh_put_Coordinates(This,Vertices)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Vertices) ) 

#define IGcadPolyfaceMesh_get_Coordinates(This,Vertices)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Vertices) ) 

#define IGcadPolyfaceMesh_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadPolyfaceMesh_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadPolyfaceMesh_get_NumberOfVertices(This,NumVertices)	\
    ( (This)->lpVtbl -> get_NumberOfVertices(This,NumVertices) ) 

#define IGcadPolyfaceMesh_get_NumberOfFaces(This,NumFaces)	\
    ( (This)->lpVtbl -> get_NumberOfFaces(This,NumFaces) ) 

#define IGcadPolyfaceMesh_put_Faces(This,rhs)	\
    ( (This)->lpVtbl -> put_Faces(This,rhs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPolyfaceMesh_INTERFACE_DEFINED__ */


#ifndef __IGcadMLine_INTERFACE_DEFINED__
#define __IGcadMLine_INTERFACE_DEFINED__

/* interface IGcadMLine */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadMLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7828DCDD-59C3-4571-A096-E9129F3EA8AD")
    IGcadMLine : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *Vertices) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT Vertices) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Justification( 
            /* [retval][out] */ GcMLineJustification *Justification) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Justification( 
            /* [in] */ GcMLineJustification Justification) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MLineScale( 
            /* [retval][out] */ double *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MLineScale( 
            /* [in] */ double scale) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMLine * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMLine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMLine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMLine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMLine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMLine * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMLine * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMLine * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMLine * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMLine * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMLine * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMLine * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMLine * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMLine * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMLine * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMLine * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMLine * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMLine * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMLine * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadMLine * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadMLine * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadMLine * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadMLine * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadMLine * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadMLine * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadMLine * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadMLine * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadMLine * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadMLine * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadMLine * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadMLine * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadMLine * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadMLine * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadMLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadMLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadMLine * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadMLine * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadMLine * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadMLine * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadMLine * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadMLine * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadMLine * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadMLine * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadMLine * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadMLine * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadMLine * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadMLine * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadMLine * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadMLine * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadMLine * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadMLine * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadMLine * This,
            /* [retval][out] */ VARIANT *Vertices);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadMLine * This,
            /* [in] */ VARIANT Vertices);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Justification )( 
            IGcadMLine * This,
            /* [retval][out] */ GcMLineJustification *Justification);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Justification )( 
            IGcadMLine * This,
            /* [in] */ GcMLineJustification Justification);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MLineScale )( 
            IGcadMLine * This,
            /* [retval][out] */ double *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MLineScale )( 
            IGcadMLine * This,
            /* [in] */ double scale);
        
        END_INTERFACE
    } IGcadMLineVtbl;

    interface IGcadMLine
    {
        CONST_VTBL struct IGcadMLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMLine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMLine_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMLine_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMLine_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMLine_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMLine_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMLine_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMLine_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMLine_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMLine_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMLine_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMLine_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMLine_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMLine_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMLine_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMLine_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMLine_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadMLine_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadMLine_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadMLine_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadMLine_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadMLine_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadMLine_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadMLine_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadMLine_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadMLine_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadMLine_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadMLine_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadMLine_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadMLine_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadMLine_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadMLine_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadMLine_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadMLine_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadMLine_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadMLine_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadMLine_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadMLine_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadMLine_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadMLine_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadMLine_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadMLine_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadMLine_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadMLine_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadMLine_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadMLine_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadMLine_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadMLine_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadMLine_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadMLine_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadMLine_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadMLine_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadMLine_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadMLine_get_StyleName(This,Name)	\
    ( (This)->lpVtbl -> get_StyleName(This,Name) ) 

#define IGcadMLine_get_Coordinates(This,Vertices)	\
    ( (This)->lpVtbl -> get_Coordinates(This,Vertices) ) 

#define IGcadMLine_put_Coordinates(This,Vertices)	\
    ( (This)->lpVtbl -> put_Coordinates(This,Vertices) ) 

#define IGcadMLine_get_Justification(This,Justification)	\
    ( (This)->lpVtbl -> get_Justification(This,Justification) ) 

#define IGcadMLine_put_Justification(This,Justification)	\
    ( (This)->lpVtbl -> put_Justification(This,Justification) ) 

#define IGcadMLine_get_MLineScale(This,scale)	\
    ( (This)->lpVtbl -> get_MLineScale(This,scale) ) 

#define IGcadMLine_put_MLineScale(This,scale)	\
    ( (This)->lpVtbl -> put_MLineScale(This,scale) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMLine_INTERFACE_DEFINED__ */


#ifndef __IGcadDim3PointAngular_INTERFACE_DEFINED__
#define __IGcadDim3PointAngular_INTERFACE_DEFINED__

/* interface IGcadDim3PointAngular */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDim3PointAngular;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61BF64F5-5096-4F74-82EA-B14C62CE8758")
    IGcadDim3PointAngular : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1EndPoint( 
            /* [retval][out] */ VARIANT *xLine1Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1EndPoint( 
            /* [in] */ VARIANT xLine1Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2EndPoint( 
            /* [retval][out] */ VARIANT *xLine2Point) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2EndPoint( 
            /* [in] */ VARIANT xLine2Point) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AngleVertex( 
            /* [retval][out] */ VARIANT *AngleVertex) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AngleVertex( 
            /* [in] */ VARIANT AngleVertex) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPrecision( 
            /* [retval][out] */ GcDimPrecision *AngleVertex) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextPrecision( 
            /* [in] */ GcDimPrecision AngleVertex) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AngleFormat( 
            /* [retval][out] */ GcAngleUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AngleFormat( 
            /* [in] */ GcAngleUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition( 
            /* [retval][out] */ GcDimHorizontalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition( 
            /* [in] */ GcDimHorizontalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ GCAD_ANGLE *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrForm( 
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrForm( 
            /* [in] */ VARIANT_BOOL bIsDynamic) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrReference( 
            /* [retval][out] */ VARIANT_BOOL *bIsReference) = 0;
        
        virtual /* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrReference( 
            /* [in] */ VARIANT_BOOL bIsReference) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrExpression( 
            /* [retval][out] */ BSTR *bstrExpression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrExpression( 
            /* [in] */ BSTR bstrExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrValue( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrValue( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimConstrDesc( 
            /* [retval][out] */ BSTR *bstrDescription) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimConstrDesc( 
            /* [in] */ BSTR bstrDescription) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDim3PointAngularVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDim3PointAngular * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDim3PointAngular * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDim3PointAngular * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDim3PointAngular * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDim3PointAngular * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDim3PointAngular * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDim3PointAngular * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDim3PointAngular * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDim3PointAngular * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDim3PointAngular * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDim3PointAngular * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDim3PointAngular * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDim3PointAngular * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDim3PointAngular * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1EndPoint )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT *xLine1Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1EndPoint )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT xLine1Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2EndPoint )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT *xLine2Point);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2EndPoint )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT xLine2Point);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AngleVertex )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT *AngleVertex);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AngleVertex )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT AngleVertex);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrecision )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimPrecision *AngleVertex);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrecision )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimPrecision AngleVertex);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AngleFormat )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcAngleUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AngleFormat )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcAngleUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimHorizontalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimHorizontalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDim3PointAngular * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ GCAD_ANGLE *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDim3PointAngular * This,
            /* [in] */ double FixedLen);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bIsDynamic);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bIsDynamic);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ VARIANT_BOOL *bIsReference);
        
        /* [helpcontext][helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )( 
            IGcadDim3PointAngular * This,
            /* [in] */ VARIANT_BOOL bIsReference);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *bstrExpression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR bstrExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )( 
            IGcadDim3PointAngular * This,
            /* [retval][out] */ BSTR *bstrDescription);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )( 
            IGcadDim3PointAngular * This,
            /* [in] */ BSTR bstrDescription);
        
        END_INTERFACE
    } IGcadDim3PointAngularVtbl;

    interface IGcadDim3PointAngular
    {
        CONST_VTBL struct IGcadDim3PointAngularVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDim3PointAngular_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDim3PointAngular_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDim3PointAngular_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDim3PointAngular_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDim3PointAngular_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDim3PointAngular_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDim3PointAngular_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDim3PointAngular_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDim3PointAngular_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDim3PointAngular_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDim3PointAngular_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDim3PointAngular_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDim3PointAngular_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDim3PointAngular_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDim3PointAngular_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDim3PointAngular_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDim3PointAngular_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDim3PointAngular_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDim3PointAngular_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDim3PointAngular_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDim3PointAngular_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDim3PointAngular_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDim3PointAngular_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDim3PointAngular_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDim3PointAngular_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDim3PointAngular_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDim3PointAngular_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDim3PointAngular_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDim3PointAngular_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDim3PointAngular_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDim3PointAngular_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDim3PointAngular_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDim3PointAngular_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDim3PointAngular_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDim3PointAngular_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDim3PointAngular_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDim3PointAngular_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDim3PointAngular_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDim3PointAngular_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDim3PointAngular_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDim3PointAngular_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDim3PointAngular_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDim3PointAngular_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDim3PointAngular_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDim3PointAngular_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDim3PointAngular_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDim3PointAngular_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDim3PointAngular_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDim3PointAngular_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDim3PointAngular_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDim3PointAngular_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDim3PointAngular_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDim3PointAngular_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDim3PointAngular_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDim3PointAngular_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDim3PointAngular_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDim3PointAngular_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDim3PointAngular_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDim3PointAngular_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDim3PointAngular_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDim3PointAngular_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDim3PointAngular_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDim3PointAngular_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDim3PointAngular_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDim3PointAngular_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDim3PointAngular_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDim3PointAngular_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDim3PointAngular_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDim3PointAngular_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDim3PointAngular_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDim3PointAngular_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDim3PointAngular_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDim3PointAngular_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDim3PointAngular_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDim3PointAngular_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDim3PointAngular_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDim3PointAngular_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDim3PointAngular_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDim3PointAngular_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDim3PointAngular_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDim3PointAngular_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDim3PointAngular_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDim3PointAngular_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDim3PointAngular_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDim3PointAngular_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDim3PointAngular_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDim3PointAngular_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDim3PointAngular_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDim3PointAngular_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDim3PointAngular_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDim3PointAngular_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDim3PointAngular_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDim3PointAngular_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDim3PointAngular_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDim3PointAngular_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDim3PointAngular_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDim3PointAngular_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDim3PointAngular_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDim3PointAngular_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDim3PointAngular_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDim3PointAngular_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDim3PointAngular_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDim3PointAngular_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDim3PointAngular_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDim3PointAngular_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDim3PointAngular_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDim3PointAngular_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDim3PointAngular_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDim3PointAngular_get_ExtLine1EndPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> get_ExtLine1EndPoint(This,xLine1Point) ) 

#define IGcadDim3PointAngular_put_ExtLine1EndPoint(This,xLine1Point)	\
    ( (This)->lpVtbl -> put_ExtLine1EndPoint(This,xLine1Point) ) 

#define IGcadDim3PointAngular_get_ExtLine2EndPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> get_ExtLine2EndPoint(This,xLine2Point) ) 

#define IGcadDim3PointAngular_put_ExtLine2EndPoint(This,xLine2Point)	\
    ( (This)->lpVtbl -> put_ExtLine2EndPoint(This,xLine2Point) ) 

#define IGcadDim3PointAngular_get_AngleVertex(This,AngleVertex)	\
    ( (This)->lpVtbl -> get_AngleVertex(This,AngleVertex) ) 

#define IGcadDim3PointAngular_put_AngleVertex(This,AngleVertex)	\
    ( (This)->lpVtbl -> put_AngleVertex(This,AngleVertex) ) 

#define IGcadDim3PointAngular_get_TextPrecision(This,AngleVertex)	\
    ( (This)->lpVtbl -> get_TextPrecision(This,AngleVertex) ) 

#define IGcadDim3PointAngular_put_TextPrecision(This,AngleVertex)	\
    ( (This)->lpVtbl -> put_TextPrecision(This,AngleVertex) ) 

#define IGcadDim3PointAngular_get_AngleFormat(This,format)	\
    ( (This)->lpVtbl -> get_AngleFormat(This,format) ) 

#define IGcadDim3PointAngular_put_AngleFormat(This,format)	\
    ( (This)->lpVtbl -> put_AngleFormat(This,format) ) 

#define IGcadDim3PointAngular_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDim3PointAngular_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDim3PointAngular_get_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,Type) ) 

#define IGcadDim3PointAngular_put_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,Type) ) 

#define IGcadDim3PointAngular_get_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_ExtensionLineExtend(This,extend) ) 

#define IGcadDim3PointAngular_put_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_ExtensionLineExtend(This,extend) ) 

#define IGcadDim3PointAngular_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDim3PointAngular_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDim3PointAngular_get_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_HorizontalTextPosition(This,Type) ) 

#define IGcadDim3PointAngular_put_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_HorizontalTextPosition(This,Type) ) 

#define IGcadDim3PointAngular_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDim3PointAngular_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDim3PointAngular_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_get_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_put_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_get_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_put_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDim3PointAngular_get_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_DimLineInside(This,bInside) ) 

#define IGcadDim3PointAngular_put_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_DimLineInside(This,bInside) ) 

#define IGcadDim3PointAngular_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDim3PointAngular_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDim3PointAngular_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDim3PointAngular_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDim3PointAngular_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDim3PointAngular_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDim3PointAngular_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDim3PointAngular_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDim3PointAngular_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDim3PointAngular_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDim3PointAngular_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDim3PointAngular_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDim3PointAngular_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDim3PointAngular_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDim3PointAngular_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDim3PointAngular_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDim3PointAngular_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDim3PointAngular_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDim3PointAngular_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDim3PointAngular_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDim3PointAngular_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDim3PointAngular_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDim3PointAngular_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDim3PointAngular_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDim3PointAngular_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDim3PointAngular_get_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_put_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_get_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_put_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDim3PointAngular_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDim3PointAngular_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDim3PointAngular_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDim3PointAngular_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDim3PointAngular_get_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDim3PointAngular_put_DimConstrForm(This,bIsDynamic)	\
    ( (This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic) ) 

#define IGcadDim3PointAngular_get_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> get_DimConstrReference(This,bIsReference) ) 

#define IGcadDim3PointAngular_put_DimConstrReference(This,bIsReference)	\
    ( (This)->lpVtbl -> put_DimConstrReference(This,bIsReference) ) 

#define IGcadDim3PointAngular_get_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> get_DimConstrName(This,bstrName) ) 

#define IGcadDim3PointAngular_put_DimConstrName(This,bstrName)	\
    ( (This)->lpVtbl -> put_DimConstrName(This,bstrName) ) 

#define IGcadDim3PointAngular_get_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDim3PointAngular_put_DimConstrExpression(This,bstrExpression)	\
    ( (This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression) ) 

#define IGcadDim3PointAngular_get_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> get_DimConstrValue(This,Value) ) 

#define IGcadDim3PointAngular_put_DimConstrValue(This,Value)	\
    ( (This)->lpVtbl -> put_DimConstrValue(This,Value) ) 

#define IGcadDim3PointAngular_get_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription) ) 

#define IGcadDim3PointAngular_put_DimConstrDesc(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimensionLineColor_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDim3PointAngular_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtensionLineColor_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDim3PointAngular_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtensionLineColor_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDim3PointAngular_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtensionLineExtend_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDim3PointAngular_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtensionLineExtend_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDim3PointAngular_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Fit_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDim3PointAngular_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_Fit_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDim3PointAngular_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_HorizontalTextPosition_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GcDimHorizontalJustification *Type);


void __RPC_STUB IGcadDim3PointAngular_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_HorizontalTextPosition_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GcDimHorizontalJustification Type);


void __RPC_STUB IGcadDim3PointAngular_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtensionLineWeight_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDim3PointAngular_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtensionLineWeight_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDim3PointAngular_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimLine1Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDim3PointAngular_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimLine1Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDim3PointAngular_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimLine2Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDim3PointAngular_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimLine2Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDim3PointAngular_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLine1Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLine1Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLine2Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLine2Suppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimLineInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDim3PointAngular_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimLineInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDim3PointAngular_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_TextInsideAlign_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDim3PointAngular_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_TextInsideAlign_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDim3PointAngular_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_TextInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDim3PointAngular_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_TextInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDim3PointAngular_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ForceLineInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDim3PointAngular_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ForceLineInside_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDim3PointAngular_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_TextOutsideAlign_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDim3PointAngular_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_TextOutsideAlign_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDim3PointAngular_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtensionLineOffset_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDim3PointAngular_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtensionLineOffset_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDim3PointAngular_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimensionLineWeight_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDim3PointAngular_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimensionLineWeight_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDim3PointAngular_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ArrowheadSize_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDim3PointAngular_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ArrowheadSize_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDim3PointAngular_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Arrowhead1Type_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDim3PointAngular_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_Arrowhead1Type_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDim3PointAngular_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Arrowhead2Type_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDim3PointAngular_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_Arrowhead2Type_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDim3PointAngular_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Measurement_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ GCAD_ANGLE *bVal);


void __RPC_STUB IGcadDim3PointAngular_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Arrowhead1Block_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDim3PointAngular_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_Arrowhead1Block_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDim3PointAngular_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_Arrowhead2Block_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDim3PointAngular_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_Arrowhead2Block_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDim3PointAngular_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimensionLinetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDim3PointAngular_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimensionLinetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDim3PointAngular_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLine1Linetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLine1Linetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLine2Linetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLine2Linetype_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_ExtLineFixedLen_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDim3PointAngular_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_ExtLineFixedLen_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDim3PointAngular_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrForm_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bIsDynamic);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrForm_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bIsDynamic);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrReference_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ VARIANT_BOOL *bIsReference);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrReference_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ VARIANT_BOOL bIsReference);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrName_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrName_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrExpression_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *bstrExpression);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrExpression_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR bstrExpression);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrValue_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrValue_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_get_DimConstrDesc_Proxy( 
    IGcadDim3PointAngular * This,
    /* [retval][out] */ BSTR *bstrDescription);


void __RPC_STUB IGcadDim3PointAngular_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDim3PointAngular_put_DimConstrDesc_Proxy( 
    IGcadDim3PointAngular * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IGcadDim3PointAngular_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDim3PointAngular_INTERFACE_DEFINED__ */


#ifndef __IGcadAssocArrayPath_INTERFACE_DEFINED__
#define __IGcadAssocArrayPath_INTERFACE_DEFINED__

/* interface IGcadAssocArrayPath */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadAssocArrayPath;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("166772A4-A974-4070-8DF1-AAA7EEE52CA5")
    IGcadAssocArrayPath : public IGcadBlockReference
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BasePoint( 
            /* [retval][out] */ VARIANT *ptBasePoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BasePoint( 
            /* [in] */ VARIANT ptBasePoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowElevation( 
            /* [retval][out] */ double *dElev) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowElevation( 
            /* [in] */ double dElev) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItemCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItemSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartOffset( 
            /* [retval][out] */ double *dOffset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartOffset( 
            /* [in] */ double dOffset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndOffset( 
            /* [retval][out] */ double *dOffset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndOffset( 
            /* [in] */ double dOffset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Method( 
            /* [retval][out] */ int *nMethod) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Method( 
            /* [in] */ int nMethod) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FillPath( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FillPath( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlignItems( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlignItems( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ double *dLength) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAssocArrayPathVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAssocArrayPath * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAssocArrayPath * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAssocArrayPath * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAssocArrayPath * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAssocArrayPath * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAssocArrayPath * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAssocArrayPath * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAssocArrayPath * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadAssocArrayPath * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadAssocArrayPath * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadAssocArrayPath * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadAssocArrayPath * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadAssocArrayPath * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadAssocArrayPath * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadAssocArrayPath * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadAssocArrayPath * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BasePoint )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT *ptBasePoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BasePoint )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT ptBasePoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowCount )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowCount )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowSpacing )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowSpacing )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowElevation )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dElev);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowElevation )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dElev);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelCount )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelCount )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelSpacing )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelSpacing )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemCount )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItemCount )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemSpacing )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItemSpacing )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartOffset )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dOffset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartOffset )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dOffset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndOffset )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dOffset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndOffset )( 
            IGcadAssocArrayPath * This,
            /* [in] */ double dOffset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Method )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ int *nMethod);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Method )( 
            IGcadAssocArrayPath * This,
            /* [in] */ int nMethod);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FillPath )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FillPath )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlignItems )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlignItems )( 
            IGcadAssocArrayPath * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IGcadAssocArrayPath * This,
            /* [retval][out] */ double *dLength);
        
        END_INTERFACE
    } IGcadAssocArrayPathVtbl;

    interface IGcadAssocArrayPath
    {
        CONST_VTBL struct IGcadAssocArrayPathVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAssocArrayPath_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAssocArrayPath_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAssocArrayPath_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAssocArrayPath_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAssocArrayPath_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAssocArrayPath_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAssocArrayPath_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAssocArrayPath_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadAssocArrayPath_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadAssocArrayPath_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadAssocArrayPath_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadAssocArrayPath_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAssocArrayPath_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadAssocArrayPath_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadAssocArrayPath_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadAssocArrayPath_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadAssocArrayPath_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadAssocArrayPath_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadAssocArrayPath_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadAssocArrayPath_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadAssocArrayPath_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadAssocArrayPath_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadAssocArrayPath_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadAssocArrayPath_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadAssocArrayPath_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadAssocArrayPath_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadAssocArrayPath_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadAssocArrayPath_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadAssocArrayPath_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayPath_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayPath_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadAssocArrayPath_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadAssocArrayPath_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadAssocArrayPath_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadAssocArrayPath_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadAssocArrayPath_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadAssocArrayPath_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadAssocArrayPath_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadAssocArrayPath_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadAssocArrayPath_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadAssocArrayPath_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadAssocArrayPath_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadAssocArrayPath_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadAssocArrayPath_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadAssocArrayPath_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadAssocArrayPath_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadAssocArrayPath_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayPath_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayPath_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayPath_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayPath_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayPath_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayPath_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadAssocArrayPath_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadAssocArrayPath_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadAssocArrayPath_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadAssocArrayPath_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadAssocArrayPath_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadAssocArrayPath_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadAssocArrayPath_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayPath_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayPath_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadAssocArrayPath_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadAssocArrayPath_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadAssocArrayPath_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadAssocArrayPath_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayPath_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayPath_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadAssocArrayPath_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayPath_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayPath_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadAssocArrayPath_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadAssocArrayPath_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadAssocArrayPath_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadAssocArrayPath_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadAssocArrayPath_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadAssocArrayPath_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadAssocArrayPath_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPath_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadAssocArrayPath_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 


#define IGcadAssocArrayPath_get_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> get_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayPath_put_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> put_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayPath_get_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_RowCount(This,nCnt) ) 

#define IGcadAssocArrayPath_put_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_RowCount(This,nCnt) ) 

#define IGcadAssocArrayPath_get_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_put_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_get_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> get_RowElevation(This,dElev) ) 

#define IGcadAssocArrayPath_put_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> put_RowElevation(This,dElev) ) 

#define IGcadAssocArrayPath_get_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayPath_put_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayPath_get_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_put_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_get_ItemCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_ItemCount(This,nCnt) ) 

#define IGcadAssocArrayPath_put_ItemCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_ItemCount(This,nCnt) ) 

#define IGcadAssocArrayPath_get_ItemSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_ItemSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_put_ItemSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_ItemSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPath_get_StartOffset(This,dOffset)	\
    ( (This)->lpVtbl -> get_StartOffset(This,dOffset) ) 

#define IGcadAssocArrayPath_put_StartOffset(This,dOffset)	\
    ( (This)->lpVtbl -> put_StartOffset(This,dOffset) ) 

#define IGcadAssocArrayPath_get_EndOffset(This,dOffset)	\
    ( (This)->lpVtbl -> get_EndOffset(This,dOffset) ) 

#define IGcadAssocArrayPath_put_EndOffset(This,dOffset)	\
    ( (This)->lpVtbl -> put_EndOffset(This,dOffset) ) 

#define IGcadAssocArrayPath_get_Method(This,nMethod)	\
    ( (This)->lpVtbl -> get_Method(This,nMethod) ) 

#define IGcadAssocArrayPath_put_Method(This,nMethod)	\
    ( (This)->lpVtbl -> put_Method(This,nMethod) ) 

#define IGcadAssocArrayPath_get_FillPath(This,bValue)	\
    ( (This)->lpVtbl -> get_FillPath(This,bValue) ) 

#define IGcadAssocArrayPath_put_FillPath(This,bValue)	\
    ( (This)->lpVtbl -> put_FillPath(This,bValue) ) 

#define IGcadAssocArrayPath_get_AlignItems(This,bValue)	\
    ( (This)->lpVtbl -> get_AlignItems(This,bValue) ) 

#define IGcadAssocArrayPath_put_AlignItems(This,bValue)	\
    ( (This)->lpVtbl -> put_AlignItems(This,bValue) ) 

#define IGcadAssocArrayPath_get_Length(This,dLength)	\
    ( (This)->lpVtbl -> get_Length(This,dLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAssocArrayPath_INTERFACE_DEFINED__ */


#ifndef __IGcadAssocArrayPolar_INTERFACE_DEFINED__
#define __IGcadAssocArrayPolar_INTERFACE_DEFINED__

/* interface IGcadAssocArrayPolar */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadAssocArrayPolar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("828316D5-A70A-4B8C-977C-60BE4E72FA46")
    IGcadAssocArrayPolar : public IGcadBlockReference
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BasePoint( 
            /* [retval][out] */ VARIANT *ptBasePoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BasePoint( 
            /* [in] */ VARIANT ptBasePoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowElevation( 
            /* [retval][out] */ double *dElev) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowElevation( 
            /* [in] */ double dElev) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItemCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ int *bClockwise) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ int bClockwise) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotateItems( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotateItems( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Origin( 
            /* [retval][out] */ VARIANT *ptOrigin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Origin( 
            /* [in] */ VARIANT ptOrigin) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Radius( 
            /* [retval][out] */ double *dRadius) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Radius( 
            /* [in] */ double dRadius) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AngleBetweenItems( 
            /* [retval][out] */ double *dAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AngleBetweenItems( 
            /* [in] */ double dAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FillAngle( 
            /* [retval][out] */ double *dAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FillAngle( 
            /* [in] */ double dAngle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAssocArrayPolarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAssocArrayPolar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAssocArrayPolar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAssocArrayPolar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAssocArrayPolar * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAssocArrayPolar * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadAssocArrayPolar * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadAssocArrayPolar * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadAssocArrayPolar * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadAssocArrayPolar * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadAssocArrayPolar * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BasePoint )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *ptBasePoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BasePoint )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT ptBasePoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowCount )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowCount )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowSpacing )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowSpacing )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowElevation )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dElev);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowElevation )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dElev);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelCount )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelCount )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelSpacing )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelSpacing )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemCount )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItemCount )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ int *bClockwise);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ int bClockwise);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotateItems )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotateItems )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ VARIANT *ptOrigin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ VARIANT ptOrigin);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Radius )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dRadius);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Radius )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dRadius);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AngleBetweenItems )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AngleBetweenItems )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FillAngle )( 
            IGcadAssocArrayPolar * This,
            /* [retval][out] */ double *dAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FillAngle )( 
            IGcadAssocArrayPolar * This,
            /* [in] */ double dAngle);
        
        END_INTERFACE
    } IGcadAssocArrayPolarVtbl;

    interface IGcadAssocArrayPolar
    {
        CONST_VTBL struct IGcadAssocArrayPolarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAssocArrayPolar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAssocArrayPolar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAssocArrayPolar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAssocArrayPolar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAssocArrayPolar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAssocArrayPolar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAssocArrayPolar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAssocArrayPolar_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadAssocArrayPolar_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadAssocArrayPolar_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadAssocArrayPolar_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadAssocArrayPolar_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAssocArrayPolar_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadAssocArrayPolar_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadAssocArrayPolar_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadAssocArrayPolar_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadAssocArrayPolar_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadAssocArrayPolar_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadAssocArrayPolar_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadAssocArrayPolar_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadAssocArrayPolar_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadAssocArrayPolar_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadAssocArrayPolar_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadAssocArrayPolar_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadAssocArrayPolar_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadAssocArrayPolar_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadAssocArrayPolar_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadAssocArrayPolar_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadAssocArrayPolar_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayPolar_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayPolar_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadAssocArrayPolar_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadAssocArrayPolar_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadAssocArrayPolar_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadAssocArrayPolar_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadAssocArrayPolar_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadAssocArrayPolar_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadAssocArrayPolar_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadAssocArrayPolar_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadAssocArrayPolar_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadAssocArrayPolar_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadAssocArrayPolar_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadAssocArrayPolar_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadAssocArrayPolar_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadAssocArrayPolar_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadAssocArrayPolar_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadAssocArrayPolar_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayPolar_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayPolar_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayPolar_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayPolar_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayPolar_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayPolar_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadAssocArrayPolar_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadAssocArrayPolar_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadAssocArrayPolar_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadAssocArrayPolar_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadAssocArrayPolar_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadAssocArrayPolar_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadAssocArrayPolar_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayPolar_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayPolar_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadAssocArrayPolar_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadAssocArrayPolar_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadAssocArrayPolar_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadAssocArrayPolar_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayPolar_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayPolar_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadAssocArrayPolar_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayPolar_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayPolar_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadAssocArrayPolar_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadAssocArrayPolar_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadAssocArrayPolar_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadAssocArrayPolar_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadAssocArrayPolar_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadAssocArrayPolar_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadAssocArrayPolar_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayPolar_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadAssocArrayPolar_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 


#define IGcadAssocArrayPolar_get_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> get_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayPolar_put_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> put_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayPolar_get_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_RowCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_put_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_RowCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_get_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPolar_put_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPolar_get_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> get_RowElevation(This,dElev) ) 

#define IGcadAssocArrayPolar_put_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> put_RowElevation(This,dElev) ) 

#define IGcadAssocArrayPolar_get_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_put_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_get_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPolar_put_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayPolar_get_ItemCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_ItemCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_put_ItemCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_ItemCount(This,nCnt) ) 

#define IGcadAssocArrayPolar_get_Direction(This,bClockwise)	\
    ( (This)->lpVtbl -> get_Direction(This,bClockwise) ) 

#define IGcadAssocArrayPolar_put_Direction(This,bClockwise)	\
    ( (This)->lpVtbl -> put_Direction(This,bClockwise) ) 

#define IGcadAssocArrayPolar_get_RotateItems(This,bValue)	\
    ( (This)->lpVtbl -> get_RotateItems(This,bValue) ) 

#define IGcadAssocArrayPolar_put_RotateItems(This,bValue)	\
    ( (This)->lpVtbl -> put_RotateItems(This,bValue) ) 

#define IGcadAssocArrayPolar_get_Origin(This,ptOrigin)	\
    ( (This)->lpVtbl -> get_Origin(This,ptOrigin) ) 

#define IGcadAssocArrayPolar_put_Origin(This,ptOrigin)	\
    ( (This)->lpVtbl -> put_Origin(This,ptOrigin) ) 

#define IGcadAssocArrayPolar_get_Radius(This,dRadius)	\
    ( (This)->lpVtbl -> get_Radius(This,dRadius) ) 

#define IGcadAssocArrayPolar_put_Radius(This,dRadius)	\
    ( (This)->lpVtbl -> put_Radius(This,dRadius) ) 

#define IGcadAssocArrayPolar_get_AngleBetweenItems(This,dAngle)	\
    ( (This)->lpVtbl -> get_AngleBetweenItems(This,dAngle) ) 

#define IGcadAssocArrayPolar_put_AngleBetweenItems(This,dAngle)	\
    ( (This)->lpVtbl -> put_AngleBetweenItems(This,dAngle) ) 

#define IGcadAssocArrayPolar_get_FillAngle(This,dAngle)	\
    ( (This)->lpVtbl -> get_FillAngle(This,dAngle) ) 

#define IGcadAssocArrayPolar_put_FillAngle(This,dAngle)	\
    ( (This)->lpVtbl -> put_FillAngle(This,dAngle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAssocArrayPolar_INTERFACE_DEFINED__ */


#ifndef __IGcadAssocArrayRectangular_INTERFACE_DEFINED__
#define __IGcadAssocArrayRectangular_INTERFACE_DEFINED__

/* interface IGcadAssocArrayRectangular */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadAssocArrayRectangular;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41128637-98DF-4A6A-88A4-6D5670E2C980")
    IGcadAssocArrayRectangular : public IGcadBlockReference
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BasePoint( 
            /* [retval][out] */ VARIANT *ptBasePoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BasePoint( 
            /* [in] */ VARIANT ptBasePoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowElevation( 
            /* [retval][out] */ double *dElev) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowElevation( 
            /* [in] */ double dElev) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LevelSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LevelSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisDirection( 
            /* [retval][out] */ VARIANT *normal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AxisDirection( 
            /* [in] */ VARIANT normal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnCount( 
            /* [retval][out] */ int *nCnt) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnCount( 
            /* [in] */ int nCnt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnSpacing( 
            /* [retval][out] */ double *dSpaceing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnSpacing( 
            /* [in] */ double dSpaceing) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxesAngle( 
            /* [retval][out] */ double *dAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AxesAngle( 
            /* [in] */ double dAngle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadAssocArrayRectangularVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadAssocArrayRectangular * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadAssocArrayRectangular * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadAssocArrayRectangular * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadAssocArrayRectangular * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadAssocArrayRectangular * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadAssocArrayRectangular * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadAssocArrayRectangular * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadAssocArrayRectangular * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadAssocArrayRectangular * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadAssocArrayRectangular * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BasePoint )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *ptBasePoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BasePoint )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT ptBasePoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowCount )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowCount )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowElevation )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *dElev);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowElevation )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ double dElev);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelCount )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelCount )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LevelSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LevelSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisDirection )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ VARIANT *normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AxisDirection )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ VARIANT normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnCount )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ int *nCnt);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnCount )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ int nCnt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *dSpaceing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnSpacing )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ double dSpaceing);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxesAngle )( 
            IGcadAssocArrayRectangular * This,
            /* [retval][out] */ double *dAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AxesAngle )( 
            IGcadAssocArrayRectangular * This,
            /* [in] */ double dAngle);
        
        END_INTERFACE
    } IGcadAssocArrayRectangularVtbl;

    interface IGcadAssocArrayRectangular
    {
        CONST_VTBL struct IGcadAssocArrayRectangularVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadAssocArrayRectangular_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadAssocArrayRectangular_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadAssocArrayRectangular_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadAssocArrayRectangular_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadAssocArrayRectangular_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadAssocArrayRectangular_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadAssocArrayRectangular_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadAssocArrayRectangular_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadAssocArrayRectangular_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadAssocArrayRectangular_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadAssocArrayRectangular_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadAssocArrayRectangular_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadAssocArrayRectangular_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadAssocArrayRectangular_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadAssocArrayRectangular_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadAssocArrayRectangular_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadAssocArrayRectangular_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadAssocArrayRectangular_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadAssocArrayRectangular_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadAssocArrayRectangular_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadAssocArrayRectangular_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadAssocArrayRectangular_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadAssocArrayRectangular_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadAssocArrayRectangular_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadAssocArrayRectangular_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadAssocArrayRectangular_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadAssocArrayRectangular_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadAssocArrayRectangular_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadAssocArrayRectangular_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayRectangular_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadAssocArrayRectangular_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadAssocArrayRectangular_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadAssocArrayRectangular_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadAssocArrayRectangular_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadAssocArrayRectangular_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadAssocArrayRectangular_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadAssocArrayRectangular_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadAssocArrayRectangular_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadAssocArrayRectangular_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadAssocArrayRectangular_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadAssocArrayRectangular_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadAssocArrayRectangular_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadAssocArrayRectangular_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadAssocArrayRectangular_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadAssocArrayRectangular_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadAssocArrayRectangular_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayRectangular_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadAssocArrayRectangular_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayRectangular_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadAssocArrayRectangular_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayRectangular_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadAssocArrayRectangular_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadAssocArrayRectangular_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadAssocArrayRectangular_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadAssocArrayRectangular_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadAssocArrayRectangular_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadAssocArrayRectangular_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadAssocArrayRectangular_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadAssocArrayRectangular_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayRectangular_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadAssocArrayRectangular_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadAssocArrayRectangular_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadAssocArrayRectangular_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadAssocArrayRectangular_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadAssocArrayRectangular_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayRectangular_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadAssocArrayRectangular_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadAssocArrayRectangular_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayRectangular_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadAssocArrayRectangular_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadAssocArrayRectangular_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadAssocArrayRectangular_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadAssocArrayRectangular_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadAssocArrayRectangular_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadAssocArrayRectangular_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadAssocArrayRectangular_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadAssocArrayRectangular_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadAssocArrayRectangular_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadAssocArrayRectangular_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 


#define IGcadAssocArrayRectangular_get_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> get_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayRectangular_put_BasePoint(This,ptBasePoint)	\
    ( (This)->lpVtbl -> put_BasePoint(This,ptBasePoint) ) 

#define IGcadAssocArrayRectangular_get_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_RowCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_put_RowCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_RowCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_get_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_put_RowSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_RowSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_get_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> get_RowElevation(This,dElev) ) 

#define IGcadAssocArrayRectangular_put_RowElevation(This,dElev)	\
    ( (This)->lpVtbl -> put_RowElevation(This,dElev) ) 

#define IGcadAssocArrayRectangular_get_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_put_LevelCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_LevelCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_get_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_put_LevelSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_LevelSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_get_AxisDirection(This,normal)	\
    ( (This)->lpVtbl -> get_AxisDirection(This,normal) ) 

#define IGcadAssocArrayRectangular_put_AxisDirection(This,normal)	\
    ( (This)->lpVtbl -> put_AxisDirection(This,normal) ) 

#define IGcadAssocArrayRectangular_get_ColumnCount(This,nCnt)	\
    ( (This)->lpVtbl -> get_ColumnCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_put_ColumnCount(This,nCnt)	\
    ( (This)->lpVtbl -> put_ColumnCount(This,nCnt) ) 

#define IGcadAssocArrayRectangular_get_ColumnSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> get_ColumnSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_put_ColumnSpacing(This,dSpaceing)	\
    ( (This)->lpVtbl -> put_ColumnSpacing(This,dSpaceing) ) 

#define IGcadAssocArrayRectangular_get_AxesAngle(This,dAngle)	\
    ( (This)->lpVtbl -> get_AxesAngle(This,dAngle) ) 

#define IGcadAssocArrayRectangular_put_AxesAngle(This,dAngle)	\
    ( (This)->lpVtbl -> put_AxesAngle(This,dAngle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadAssocArrayRectangular_INTERFACE_DEFINED__ */


#ifndef __IGcadExternalReference_INTERFACE_DEFINED__
#define __IGcadExternalReference_INTERFACE_DEFINED__

/* interface IGcadExternalReference */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadExternalReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5A16D26D-FDE1-48F4-8E27-08D577083A55")
    IGcadExternalReference : public IGcadBlockReference
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR bstrName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadExternalReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadExternalReference * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadExternalReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadExternalReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadExternalReference * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadExternalReference * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadExternalReference * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadExternalReference * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadExternalReference * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadExternalReference * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadExternalReference * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadExternalReference * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadExternalReference * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadExternalReference * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadExternalReference * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadExternalReference * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadExternalReference * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadExternalReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadExternalReference * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadExternalReference * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadExternalReference * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadExternalReference * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Explode )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *pAttrObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT_BOOL *bHas);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *EffectiveName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )( 
            IGcadExternalReference * This,
            /* [retval][out] */ VARIANT *dynamicPropertyArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetBlock )( 
            IGcadExternalReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )( 
            IGcadExternalReference * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR newBlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ GCAD_NOUNITS *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )( 
            IGcadExternalReference * This,
            /* [in] */ GCAD_NOUNITS ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnits )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )( 
            IGcadExternalReference * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IGcadExternalReference * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IGcadExternalReference * This,
            /* [in] */ BSTR bstrName);
        
        END_INTERFACE
    } IGcadExternalReferenceVtbl;

    interface IGcadExternalReference
    {
        CONST_VTBL struct IGcadExternalReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadExternalReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadExternalReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadExternalReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadExternalReference_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadExternalReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadExternalReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadExternalReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadExternalReference_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadExternalReference_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadExternalReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadExternalReference_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadExternalReference_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadExternalReference_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadExternalReference_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadExternalReference_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadExternalReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadExternalReference_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadExternalReference_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadExternalReference_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadExternalReference_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadExternalReference_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadExternalReference_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadExternalReference_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadExternalReference_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadExternalReference_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadExternalReference_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadExternalReference_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadExternalReference_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadExternalReference_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadExternalReference_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadExternalReference_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadExternalReference_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadExternalReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadExternalReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadExternalReference_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadExternalReference_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadExternalReference_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadExternalReference_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadExternalReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadExternalReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadExternalReference_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadExternalReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadExternalReference_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadExternalReference_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadExternalReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadExternalReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadExternalReference_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadExternalReference_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadExternalReference_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadExternalReference_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadExternalReference_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadExternalReference_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadExternalReference_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadExternalReference_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadExternalReference_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadExternalReference_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadExternalReference_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadExternalReference_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadExternalReference_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadExternalReference_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadExternalReference_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadExternalReference_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadExternalReference_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadExternalReference_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadExternalReference_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadExternalReference_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadExternalReference_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadExternalReference_get_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_XScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_get_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_YScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_get_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_ZScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_Explode(This,pArrayObjs)	\
    ( (This)->lpVtbl -> Explode(This,pArrayObjs) ) 

#define IGcadExternalReference_GetAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetAttributes(This,pAttrObjs) ) 

#define IGcadExternalReference_GetConstantAttributes(This,pAttrObjs)	\
    ( (This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs) ) 

#define IGcadExternalReference_get_HasAttributes(This,bHas)	\
    ( (This)->lpVtbl -> get_HasAttributes(This,bHas) ) 

#define IGcadExternalReference_get_EffectiveName(This,EffectiveName)	\
    ( (This)->lpVtbl -> get_EffectiveName(This,EffectiveName) ) 

#define IGcadExternalReference_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadExternalReference_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ( (This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray) ) 

#define IGcadExternalReference_ResetBlock(This)	\
    ( (This)->lpVtbl -> ResetBlock(This) ) 

#define IGcadExternalReference_ConvertToAnonymousBlock(This)	\
    ( (This)->lpVtbl -> ConvertToAnonymousBlock(This) ) 

#define IGcadExternalReference_ConvertToStaticBlock(This,newBlockName)	\
    ( (This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName) ) 

#define IGcadExternalReference_get_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_XEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_XEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_get_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_YEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_YEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_get_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_put_ZEffectiveScaleFactor(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_ZEffectiveScaleFactor(This,ScaleFactor) ) 

#define IGcadExternalReference_get_InsUnits(This,Units)	\
    ( (This)->lpVtbl -> get_InsUnits(This,Units) ) 

#define IGcadExternalReference_get_InsUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_InsUnitsFactor(This,factor) ) 


#define IGcadExternalReference_get_Path(This,bstrName)	\
    ( (This)->lpVtbl -> get_Path(This,bstrName) ) 

#define IGcadExternalReference_put_Path(This,bstrName)	\
    ( (This)->lpVtbl -> put_Path(This,bstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadExternalReference_INTERFACE_DEFINED__ */


#ifndef __IGcadTable_INTERFACE_DEFINED__
#define __IGcadTable_INTERFACE_DEFINED__

/* interface IGcadTable */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("67654774-1ADF-4E8C-B7BE-30A82F1F1832")
    IGcadTable : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ int *pRows) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rows( 
            /* [in] */ int pRows) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ int *pColumns) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Columns( 
            /* [in] */ int pColumns) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FlowDirection( 
            /* [retval][out] */ GcTableDirection *pFlow) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FlowDirection( 
            /* [in] */ GcTableDirection pFlow) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *pWidth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double pWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *pHeight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double pHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VertCellMargin( 
            /* [retval][out] */ double *pGap) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VertCellMargin( 
            /* [in] */ double pGap) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorzCellMargin( 
            /* [retval][out] */ double *pGap) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorzCellMargin( 
            /* [in] */ double pGap) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertionPoint( 
            /* [retval][out] */ VARIANT *insPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertionPoint( 
            /* [in] */ VARIANT insPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetColumnWidth( 
            /* [in] */ int col,
            /* [retval][out] */ double *pWidth) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetColumnWidth( 
            /* [in] */ int col,
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnWidth( 
            /* [in] */ double rhs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetRowHeight( 
            /* [in] */ int row,
            /* [retval][out] */ double *pHeight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetRowHeight( 
            /* [in] */ int row,
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowHeight( 
            /* [in] */ double rhs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetMinimumColumnWidth( 
            /* [in] */ int col,
            /* [retval][out] */ double *pWidth) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetMinimumRowHeight( 
            /* [in] */ int row,
            /* [retval][out] */ double *pHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumTableWidth( 
            /* [retval][out] */ double *pWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumTableHeight( 
            /* [retval][out] */ double *pHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ VARIANT *DirectionVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ VARIANT DirectionVector) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TitleSuppressed( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TitleSuppressed( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeaderSuppressed( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeaderSuppressed( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAlignment( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ GcCellAlignment *pCellAlignment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetAlignment( 
            /* [in] */ int rowTypes,
            /* [in] */ GcCellAlignment cellAlignment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBackgroundColorNone( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBackgroundColorNone( 
            /* [in] */ int rowTypes,
            /* [in] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBackgroundColor( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBackgroundColor( 
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetContentColor( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetContentColor( 
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTextStyle( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetTextStyle( 
            /* [in] */ int rowTypes,
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTextHeight( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ double *pTextHeight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetTextHeight( 
            /* [in] */ int rowTypes,
            /* [in] */ double TextHeight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGridLineWeight( 
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGridLineWeight( 
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGridColor( 
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGridColor( 
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGridVisibility( 
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGridVisibility( 
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableStyleOverrides( 
            /* [retval][out] */ VARIANT *pIntArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClearTableStyleOverrides( 
            /* [in] */ int flag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellType( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcCellType *pCellType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellType( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellType CellType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellExtents( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL bOuterCell,
            /* [retval][out] */ VARIANT *pPts) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAttachmentPoint( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pAttachmentPoint) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellAlignment( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcCellAlignment *pCellAlignment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellAlignment( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellAlignment cellAlignment) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellBackgroundColorNone( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellBackgroundColorNone( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellBackgroundColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellBackgroundColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellContentColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellContentColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellStyleOverrides( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pIntArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteCellContent( 
            /* [in] */ int row,
            /* [in] */ int col) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetRowType( 
            /* [in] */ int row,
            /* [retval][out] */ GcRowType *pRowType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *pStr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetText( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR pStr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellTextStyle( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellTextStyle( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellTextHeight( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *pTextHeight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellTextHeight( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double TextHeight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTextRotation( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcRotationAngle *TextRotation) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetTextRotation( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcRotationAngle TextRotation) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAutoScale( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetAutoScale( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBlockTableRecordId( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ LONG_PTR *blkId) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBlockTableRecordId( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR blkId,
            /* [in] */ VARIANT_BOOL bAutoFit) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBlockScale( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *blkScale) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBlockScale( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double blkScale) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBlockRotation( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *blkRotation) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBlockRotation( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double blkRotation) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBlockAttributeValue( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR attdefId,
            /* [retval][out] */ BSTR *bstrValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBlockAttributeValue( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR attdefId,
            /* [in] */ BSTR bstrValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellGridLineWeight( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ GCAD_LWEIGHT *plineweight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellGridLineWeight( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellGridColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellGridColor( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellGridVisibility( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellGridVisibility( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertColumns( 
            /* [in] */ int col,
            /* [in] */ double Width,
            /* [in] */ int cols) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteColumns( 
            /* [in] */ int col,
            /* [in] */ int cols) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertRows( 
            /* [in] */ int row,
            /* [in] */ double Height,
            /* [in] */ int Rows) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteRows( 
            /* [in] */ int row,
            /* [in] */ int Rows) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE MergeCells( 
            /* [in] */ int minRow,
            /* [in] */ int maxRow,
            /* [in] */ int minCol,
            /* [in] */ int maxCol) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnmergeCells( 
            /* [in] */ int minRow,
            /* [in] */ int maxRow,
            /* [in] */ int minCol,
            /* [in] */ int maxCol) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IsMergedCell( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [out] */ int *minRow,
            /* [out] */ int *maxRow,
            /* [out] */ int *minCol,
            /* [out] */ int *maxCol,
            /* [retval][out] */ VARIANT_BOOL *pbValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetFieldId( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ LONG_PTR *fieldId) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetFieldId( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR fieldId) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateLayout( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RecomputeTableBlock( 
            /* [in] */ VARIANT_BOOL bForceUpdate) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE HitTest( 
            /* [in] */ VARIANT wpt,
            /* [in] */ VARIANT wviewVec,
            /* [out] */ int *resultRowIndex,
            /* [out] */ int *resultColumnIndex,
            /* [retval][out] */ VARIANT_BOOL *bReturn) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [in] */ VARIANT wpt,
            /* [in] */ VARIANT wvwVec,
            /* [in] */ VARIANT wvwxVec,
            /* [in] */ double wxaper,
            /* [in] */ double wyaper,
            /* [in] */ VARIANT_BOOL allowOutside,
            /* [out] */ int *resultRowIndex,
            /* [out] */ int *resultColumnIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SelectSubRegion( 
            /* [in] */ VARIANT wpt1,
            /* [in] */ VARIANT wpt2,
            /* [in] */ VARIANT wvwVec,
            /* [in] */ VARIANT wvwxVec,
            /* [in] */ GcSelectType seltype,
            /* [in] */ VARIANT_BOOL bIncludeCurrentSelection,
            /* [out] */ int *rowMin,
            /* [out] */ int *rowMax,
            /* [out] */ int *colMin,
            /* [out] */ int *colMax) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ReselectSubRegion( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSubSelection( 
            /* [out] */ int *rowMin,
            /* [out] */ int *rowMax,
            /* [out] */ int *colMin,
            /* [out] */ int *colMax) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSubSelection( 
            /* [in] */ int rowMin,
            /* [in] */ int rowMax,
            /* [in] */ int colMin,
            /* [in] */ int colMax) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ClearSubSelection( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSubSelection( 
            /* [retval][out] */ VARIANT_BOOL *pbValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RegenerateTableSuppressed( 
            /* [retval][out] */ VARIANT_BOOL *bValue) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RegenerateTableSuppressed( 
            /* [in] */ VARIANT_BOOL bValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDataType( 
            /* [in] */ GcRowType rowType,
            /* [out] */ GcValueDataType *pDataType,
            /* [out] */ GcValueUnitType *pUnitType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetDataType( 
            /* [in] */ int rowTypes,
            /* [in] */ GcValueDataType dataType,
            /* [in] */ GcValueUnitType unitType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetFormat( 
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ BSTR *pFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetFormat( 
            /* [in] */ int rowTypes,
            BSTR pFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FormatValue( 
            /* [in] */ int row,
            /* [in] */ int col,
            GcFormatOption nOption,
            BSTR *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellDataType( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [out] */ GcValueDataType *pDataType,
            /* [out] */ GcValueUnitType *pUnitType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellDataType( 
            /* [in] */ int row,
            /* [in] */ int col,
            GcValueDataType dataType,
            GcValueUnitType unitType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellFormat( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *pFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellFormat( 
            /* [in] */ int row,
            /* [in] */ int col,
            BSTR pFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCellValue( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellValue( 
            /* [in] */ int row,
            /* [in] */ int col,
            VARIANT val) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCellValueFromText( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR val,
            /* [in] */ GcParseOption nOption) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetCellValue( 
            /* [in] */ int row,
            /* [in] */ int col) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockTableRecordId32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ long *blkId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetBlockTableRecordId32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long blkId,
            /* [in] */ VARIANT_BOOL bAutoFit) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockAttributeValue32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long attdefId,
            /* [retval][out] */ BSTR *bstrValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetBlockAttributeValue32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long attdefId,
            /* [in] */ BSTR bstrValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetFieldId32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ long *fieldId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetFieldId32( 
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long fieldId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetFieldId232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [retval][out] */ long *pAcDbObjectId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetFieldId232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long acDbObjectId,
            /* [in] */ GcCellOption nflag) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockTableRecordId232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [retval][out] */ long *pAcDbObjectId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetBlockTableRecordId232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [in] */ VARIANT_BOOL autoFit) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockAttributeValue232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetBlockAttributeValue232( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetGridLinetype32( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ GcGridLineType nGridLineType,
            /* [retval][out] */ long *pacDbObjId) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetGridLinetype32( 
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ GcGridLineType nGridLineType,
            /* [in] */ long idLinetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BreaksEnabled( 
            /* [retval][out] */ VARIANT_BOOL *bEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BreaksEnabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RepeatTopLabels( 
            /* [retval][out] */ VARIANT_BOOL *bEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RepeatTopLabels( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RepeatBottomLabels( 
            /* [retval][out] */ VARIANT_BOOL *bEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RepeatBottomLabels( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableBreakFlowDirection( 
            /* [retval][out] */ GcTableFlowDirection *pDir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableBreakFlowDirection( 
            /* [in] */ GcTableFlowDirection pDir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowManualPositions( 
            /* [retval][out] */ VARIANT_BOOL *bEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowManualPositions( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowManualHeights( 
            /* [retval][out] */ VARIANT_BOOL *bEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowManualHeights( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableBreakHeight( 
            /* [retval][out] */ double *pHeight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableBreakHeight( 
            /* [in] */ double pHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BreakSpacing( 
            /* [retval][out] */ double *pSpacing) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BreakSpacing( 
            /* [in] */ double pSpacing) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTable * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTable * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTable * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTable * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTable * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTable * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTable * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTable * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTable * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTable * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTable * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTable * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTable * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadTable * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadTable * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadTable * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadTable * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadTable * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadTable * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadTable * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadTable * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadTable * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadTable * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadTable * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadTable * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadTable * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadTable * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadTable * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadTable * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadTable * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadTable * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadTable * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadTable * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadTable * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadTable * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadTable * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadTable * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadTable * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadTable * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadTable * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadTable * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadTable * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadTable * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            IGcadTable * This,
            /* [retval][out] */ int *pRows);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rows )( 
            IGcadTable * This,
            /* [in] */ int pRows);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            IGcadTable * This,
            /* [retval][out] */ int *pColumns);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Columns )( 
            IGcadTable * This,
            /* [in] */ int pColumns);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FlowDirection )( 
            IGcadTable * This,
            /* [retval][out] */ GcTableDirection *pFlow);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FlowDirection )( 
            IGcadTable * This,
            /* [in] */ GcTableDirection pFlow);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadTable * This,
            /* [retval][out] */ double *pWidth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadTable * This,
            /* [in] */ double pWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadTable * This,
            /* [retval][out] */ double *pHeight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadTable * This,
            /* [in] */ double pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VertCellMargin )( 
            IGcadTable * This,
            /* [retval][out] */ double *pGap);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VertCellMargin )( 
            IGcadTable * This,
            /* [in] */ double pGap);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorzCellMargin )( 
            IGcadTable * This,
            /* [retval][out] */ double *pGap);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorzCellMargin )( 
            IGcadTable * This,
            /* [in] */ double pGap);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT *insPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )( 
            IGcadTable * This,
            /* [in] */ VARIANT insPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetColumnWidth )( 
            IGcadTable * This,
            /* [in] */ int col,
            /* [retval][out] */ double *pWidth);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetColumnWidth )( 
            IGcadTable * This,
            /* [in] */ int col,
            /* [in] */ double Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnWidth )( 
            IGcadTable * This,
            /* [in] */ double rhs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetRowHeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [retval][out] */ double *pHeight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetRowHeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ double Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowHeight )( 
            IGcadTable * This,
            /* [in] */ double rhs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetMinimumColumnWidth )( 
            IGcadTable * This,
            /* [in] */ int col,
            /* [retval][out] */ double *pWidth);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetMinimumRowHeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [retval][out] */ double *pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumTableWidth )( 
            IGcadTable * This,
            /* [retval][out] */ double *pWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumTableHeight )( 
            IGcadTable * This,
            /* [retval][out] */ double *pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT *DirectionVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            IGcadTable * This,
            /* [in] */ VARIANT DirectionVector);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TitleSuppressed )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TitleSuppressed )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderSuppressed )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderSuppressed )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAlignment )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ GcCellAlignment *pCellAlignment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetAlignment )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ GcCellAlignment cellAlignment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBackgroundColorNone )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBackgroundColorNone )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBackgroundColor )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBackgroundColor )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetContentColor )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetContentColor )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTextStyle )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetTextStyle )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTextHeight )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ double *pTextHeight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetTextHeight )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ double TextHeight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGridLineWeight )( 
            IGcadTable * This,
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGridLineWeight )( 
            IGcadTable * This,
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGridColor )( 
            IGcadTable * This,
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGridColor )( 
            IGcadTable * This,
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGridVisibility )( 
            IGcadTable * This,
            /* [in] */ GcGridLineType gridLineType,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGridVisibility )( 
            IGcadTable * This,
            /* [in] */ int gridLineTypes,
            /* [in] */ int rowTypes,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableStyleOverrides )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT *pIntArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClearTableStyleOverrides )( 
            IGcadTable * This,
            /* [in] */ int flag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellType )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcCellType *pCellType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellType )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellType CellType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellExtents )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL bOuterCell,
            /* [retval][out] */ VARIANT *pPts);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttachmentPoint )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pAttachmentPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellAlignment )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcCellAlignment *pCellAlignment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellAlignment )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellAlignment cellAlignment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellBackgroundColorNone )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellBackgroundColorNone )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellBackgroundColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellBackgroundColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellContentColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellContentColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellStyleOverrides )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pIntArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteCellContent )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetRowType )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [retval][out] */ GcRowType *pRowType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetText )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *pStr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetText )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR pStr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellTextStyle )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellTextStyle )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellTextHeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *pTextHeight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellTextHeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double TextHeight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTextRotation )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ GcRotationAngle *TextRotation);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetTextRotation )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcRotationAngle TextRotation);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAutoScale )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetAutoScale )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockTableRecordId )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ LONG_PTR *blkId);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockTableRecordId )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR blkId,
            /* [in] */ VARIANT_BOOL bAutoFit);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockScale )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *blkScale);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockScale )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double blkScale);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockRotation )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ double *blkRotation);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockRotation )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ double blkRotation);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR attdefId,
            /* [retval][out] */ BSTR *bstrValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR attdefId,
            /* [in] */ BSTR bstrValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellGridLineWeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ GCAD_LWEIGHT *plineweight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellGridLineWeight )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellGridColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellGridColor )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellGridVisibility )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ GcCellEdgeMask edge,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellGridVisibility )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ int edges,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertColumns )( 
            IGcadTable * This,
            /* [in] */ int col,
            /* [in] */ double Width,
            /* [in] */ int cols);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteColumns )( 
            IGcadTable * This,
            /* [in] */ int col,
            /* [in] */ int cols);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertRows )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ double Height,
            /* [in] */ int Rows);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteRows )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int Rows);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MergeCells )( 
            IGcadTable * This,
            /* [in] */ int minRow,
            /* [in] */ int maxRow,
            /* [in] */ int minCol,
            /* [in] */ int maxCol);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnmergeCells )( 
            IGcadTable * This,
            /* [in] */ int minRow,
            /* [in] */ int maxRow,
            /* [in] */ int minCol,
            /* [in] */ int maxCol);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsMergedCell )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [out] */ int *minRow,
            /* [out] */ int *maxRow,
            /* [out] */ int *minCol,
            /* [out] */ int *maxCol,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetFieldId )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ LONG_PTR *fieldId);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetFieldId )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ LONG_PTR fieldId);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateLayout )( 
            IGcadTable * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RecomputeTableBlock )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bForceUpdate);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            IGcadTable * This,
            /* [in] */ VARIANT wpt,
            /* [in] */ VARIANT wviewVec,
            /* [out] */ int *resultRowIndex,
            /* [out] */ int *resultColumnIndex,
            /* [retval][out] */ VARIANT_BOOL *bReturn);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            IGcadTable * This,
            /* [in] */ VARIANT wpt,
            /* [in] */ VARIANT wvwVec,
            /* [in] */ VARIANT wvwxVec,
            /* [in] */ double wxaper,
            /* [in] */ double wyaper,
            /* [in] */ VARIANT_BOOL allowOutside,
            /* [out] */ int *resultRowIndex,
            /* [out] */ int *resultColumnIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SelectSubRegion )( 
            IGcadTable * This,
            /* [in] */ VARIANT wpt1,
            /* [in] */ VARIANT wpt2,
            /* [in] */ VARIANT wvwVec,
            /* [in] */ VARIANT wvwxVec,
            /* [in] */ GcSelectType seltype,
            /* [in] */ VARIANT_BOOL bIncludeCurrentSelection,
            /* [out] */ int *rowMin,
            /* [out] */ int *rowMax,
            /* [out] */ int *colMin,
            /* [out] */ int *colMax);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ReselectSubRegion )( 
            IGcadTable * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSubSelection )( 
            IGcadTable * This,
            /* [out] */ int *rowMin,
            /* [out] */ int *rowMax,
            /* [out] */ int *colMin,
            /* [out] */ int *colMax);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSubSelection )( 
            IGcadTable * This,
            /* [in] */ int rowMin,
            /* [in] */ int rowMax,
            /* [in] */ int colMin,
            /* [in] */ int colMax);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ClearSubSelection )( 
            IGcadTable * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSubSelection )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *pbValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RegenerateTableSuppressed )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bValue);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RegenerateTableSuppressed )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDataType )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [out] */ GcValueDataType *pDataType,
            /* [out] */ GcValueUnitType *pUnitType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDataType )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            /* [in] */ GcValueDataType dataType,
            /* [in] */ GcValueUnitType unitType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetFormat )( 
            IGcadTable * This,
            /* [in] */ GcRowType rowType,
            /* [retval][out] */ BSTR *pFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetFormat )( 
            IGcadTable * This,
            /* [in] */ int rowTypes,
            BSTR pFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *FormatValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            GcFormatOption nOption,
            BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellDataType )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [out] */ GcValueDataType *pDataType,
            /* [out] */ GcValueUnitType *pUnitType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellDataType )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            GcValueDataType dataType,
            GcValueUnitType unitType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellFormat )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ BSTR *pFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellFormat )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            BSTR pFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            VARIANT val);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCellValueFromText )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ BSTR val,
            /* [in] */ GcParseOption nOption);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetCellValue )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockTableRecordId32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ long *blkId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockTableRecordId32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long blkId,
            /* [in] */ VARIANT_BOOL bAutoFit);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long attdefId,
            /* [retval][out] */ BSTR *bstrValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long attdefId,
            /* [in] */ BSTR bstrValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetFieldId32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [retval][out] */ long *fieldId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetFieldId32 )( 
            IGcadTable * This,
            /* [in] */ int row,
            /* [in] */ int col,
            /* [in] */ long fieldId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetFieldId232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [retval][out] */ long *pAcDbObjectId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetFieldId232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long acDbObjectId,
            /* [in] */ GcCellOption nflag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockTableRecordId232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [retval][out] */ long *pAcDbObjectId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockTableRecordId232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [in] */ VARIANT_BOOL autoFit);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [retval][out] */ BSTR *Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue232 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ int nContent,
            /* [in] */ long blkId,
            /* [in] */ BSTR Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetGridLinetype32 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ GcGridLineType nGridLineType,
            /* [retval][out] */ long *pacDbObjId);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetGridLinetype32 )( 
            IGcadTable * This,
            /* [in] */ int nRow,
            /* [in] */ int nCol,
            /* [in] */ GcGridLineType nGridLineType,
            /* [in] */ long idLinetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BreaksEnabled )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BreaksEnabled )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatTopLabels )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatTopLabels )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatBottomLabels )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatBottomLabels )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableBreakFlowDirection )( 
            IGcadTable * This,
            /* [retval][out] */ GcTableFlowDirection *pDir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableBreakFlowDirection )( 
            IGcadTable * This,
            /* [in] */ GcTableFlowDirection pDir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowManualPositions )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowManualPositions )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowManualHeights )( 
            IGcadTable * This,
            /* [retval][out] */ VARIANT_BOOL *bEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowManualHeights )( 
            IGcadTable * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableBreakHeight )( 
            IGcadTable * This,
            /* [retval][out] */ double *pHeight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableBreakHeight )( 
            IGcadTable * This,
            /* [in] */ double pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BreakSpacing )( 
            IGcadTable * This,
            /* [retval][out] */ double *pSpacing);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BreakSpacing )( 
            IGcadTable * This,
            /* [in] */ double pSpacing);
        
        END_INTERFACE
    } IGcadTableVtbl;

    interface IGcadTable
    {
        CONST_VTBL struct IGcadTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTable_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTable_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTable_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTable_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTable_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTable_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTable_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTable_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTable_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTable_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTable_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTable_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTable_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTable_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTable_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTable_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadTable_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadTable_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadTable_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadTable_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadTable_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadTable_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadTable_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadTable_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadTable_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadTable_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadTable_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadTable_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadTable_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadTable_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadTable_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadTable_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadTable_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadTable_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadTable_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadTable_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadTable_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadTable_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadTable_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadTable_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadTable_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadTable_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadTable_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadTable_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadTable_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadTable_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadTable_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadTable_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadTable_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadTable_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadTable_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadTable_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadTable_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadTable_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadTable_get_Rows(This,pRows)	\
    ( (This)->lpVtbl -> get_Rows(This,pRows) ) 

#define IGcadTable_put_Rows(This,pRows)	\
    ( (This)->lpVtbl -> put_Rows(This,pRows) ) 

#define IGcadTable_get_Columns(This,pColumns)	\
    ( (This)->lpVtbl -> get_Columns(This,pColumns) ) 

#define IGcadTable_put_Columns(This,pColumns)	\
    ( (This)->lpVtbl -> put_Columns(This,pColumns) ) 

#define IGcadTable_get_FlowDirection(This,pFlow)	\
    ( (This)->lpVtbl -> get_FlowDirection(This,pFlow) ) 

#define IGcadTable_put_FlowDirection(This,pFlow)	\
    ( (This)->lpVtbl -> put_FlowDirection(This,pFlow) ) 

#define IGcadTable_get_Width(This,pWidth)	\
    ( (This)->lpVtbl -> get_Width(This,pWidth) ) 

#define IGcadTable_put_Width(This,pWidth)	\
    ( (This)->lpVtbl -> put_Width(This,pWidth) ) 

#define IGcadTable_get_Height(This,pHeight)	\
    ( (This)->lpVtbl -> get_Height(This,pHeight) ) 

#define IGcadTable_put_Height(This,pHeight)	\
    ( (This)->lpVtbl -> put_Height(This,pHeight) ) 

#define IGcadTable_get_VertCellMargin(This,pGap)	\
    ( (This)->lpVtbl -> get_VertCellMargin(This,pGap) ) 

#define IGcadTable_put_VertCellMargin(This,pGap)	\
    ( (This)->lpVtbl -> put_VertCellMargin(This,pGap) ) 

#define IGcadTable_get_HorzCellMargin(This,pGap)	\
    ( (This)->lpVtbl -> get_HorzCellMargin(This,pGap) ) 

#define IGcadTable_put_HorzCellMargin(This,pGap)	\
    ( (This)->lpVtbl -> put_HorzCellMargin(This,pGap) ) 

#define IGcadTable_get_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> get_InsertionPoint(This,insPoint) ) 

#define IGcadTable_put_InsertionPoint(This,insPoint)	\
    ( (This)->lpVtbl -> put_InsertionPoint(This,insPoint) ) 

#define IGcadTable_GetColumnWidth(This,col,pWidth)	\
    ( (This)->lpVtbl -> GetColumnWidth(This,col,pWidth) ) 

#define IGcadTable_SetColumnWidth(This,col,Width)	\
    ( (This)->lpVtbl -> SetColumnWidth(This,col,Width) ) 

#define IGcadTable_put_ColumnWidth(This,rhs)	\
    ( (This)->lpVtbl -> put_ColumnWidth(This,rhs) ) 

#define IGcadTable_GetRowHeight(This,row,pHeight)	\
    ( (This)->lpVtbl -> GetRowHeight(This,row,pHeight) ) 

#define IGcadTable_SetRowHeight(This,row,Height)	\
    ( (This)->lpVtbl -> SetRowHeight(This,row,Height) ) 

#define IGcadTable_put_RowHeight(This,rhs)	\
    ( (This)->lpVtbl -> put_RowHeight(This,rhs) ) 

#define IGcadTable_GetMinimumColumnWidth(This,col,pWidth)	\
    ( (This)->lpVtbl -> GetMinimumColumnWidth(This,col,pWidth) ) 

#define IGcadTable_GetMinimumRowHeight(This,row,pHeight)	\
    ( (This)->lpVtbl -> GetMinimumRowHeight(This,row,pHeight) ) 

#define IGcadTable_get_MinimumTableWidth(This,pWidth)	\
    ( (This)->lpVtbl -> get_MinimumTableWidth(This,pWidth) ) 

#define IGcadTable_get_MinimumTableHeight(This,pHeight)	\
    ( (This)->lpVtbl -> get_MinimumTableHeight(This,pHeight) ) 

#define IGcadTable_get_Direction(This,DirectionVector)	\
    ( (This)->lpVtbl -> get_Direction(This,DirectionVector) ) 

#define IGcadTable_put_Direction(This,DirectionVector)	\
    ( (This)->lpVtbl -> put_Direction(This,DirectionVector) ) 

#define IGcadTable_get_TitleSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> get_TitleSuppressed(This,bValue) ) 

#define IGcadTable_put_TitleSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> put_TitleSuppressed(This,bValue) ) 

#define IGcadTable_get_HeaderSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> get_HeaderSuppressed(This,bValue) ) 

#define IGcadTable_put_HeaderSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> put_HeaderSuppressed(This,bValue) ) 

#define IGcadTable_GetAlignment(This,rowType,pCellAlignment)	\
    ( (This)->lpVtbl -> GetAlignment(This,rowType,pCellAlignment) ) 

#define IGcadTable_SetAlignment(This,rowTypes,cellAlignment)	\
    ( (This)->lpVtbl -> SetAlignment(This,rowTypes,cellAlignment) ) 

#define IGcadTable_GetBackgroundColorNone(This,rowType,bValue)	\
    ( (This)->lpVtbl -> GetBackgroundColorNone(This,rowType,bValue) ) 

#define IGcadTable_SetBackgroundColorNone(This,rowTypes,bValue)	\
    ( (This)->lpVtbl -> SetBackgroundColorNone(This,rowTypes,bValue) ) 

#define IGcadTable_GetBackgroundColor(This,rowType,pColor)	\
    ( (This)->lpVtbl -> GetBackgroundColor(This,rowType,pColor) ) 

#define IGcadTable_SetBackgroundColor(This,rowTypes,pColor)	\
    ( (This)->lpVtbl -> SetBackgroundColor(This,rowTypes,pColor) ) 

#define IGcadTable_GetContentColor(This,rowType,pColor)	\
    ( (This)->lpVtbl -> GetContentColor(This,rowType,pColor) ) 

#define IGcadTable_SetContentColor(This,rowTypes,pColor)	\
    ( (This)->lpVtbl -> SetContentColor(This,rowTypes,pColor) ) 

#define IGcadTable_GetTextStyle(This,rowType,bstrName)	\
    ( (This)->lpVtbl -> GetTextStyle(This,rowType,bstrName) ) 

#define IGcadTable_SetTextStyle(This,rowTypes,bstrName)	\
    ( (This)->lpVtbl -> SetTextStyle(This,rowTypes,bstrName) ) 

#define IGcadTable_GetTextHeight(This,rowType,pTextHeight)	\
    ( (This)->lpVtbl -> GetTextHeight(This,rowType,pTextHeight) ) 

#define IGcadTable_SetTextHeight(This,rowTypes,TextHeight)	\
    ( (This)->lpVtbl -> SetTextHeight(This,rowTypes,TextHeight) ) 

#define IGcadTable_GetGridLineWeight(This,gridLineType,rowType,Lineweight)	\
    ( (This)->lpVtbl -> GetGridLineWeight(This,gridLineType,rowType,Lineweight) ) 

#define IGcadTable_SetGridLineWeight(This,gridLineTypes,rowTypes,Lineweight)	\
    ( (This)->lpVtbl -> SetGridLineWeight(This,gridLineTypes,rowTypes,Lineweight) ) 

#define IGcadTable_GetGridColor(This,gridLineType,rowType,pColor)	\
    ( (This)->lpVtbl -> GetGridColor(This,gridLineType,rowType,pColor) ) 

#define IGcadTable_SetGridColor(This,gridLineTypes,rowTypes,pColor)	\
    ( (This)->lpVtbl -> SetGridColor(This,gridLineTypes,rowTypes,pColor) ) 

#define IGcadTable_GetGridVisibility(This,gridLineType,rowType,bValue)	\
    ( (This)->lpVtbl -> GetGridVisibility(This,gridLineType,rowType,bValue) ) 

#define IGcadTable_SetGridVisibility(This,gridLineTypes,rowTypes,bValue)	\
    ( (This)->lpVtbl -> SetGridVisibility(This,gridLineTypes,rowTypes,bValue) ) 

#define IGcadTable_get_TableStyleOverrides(This,pIntArray)	\
    ( (This)->lpVtbl -> get_TableStyleOverrides(This,pIntArray) ) 

#define IGcadTable_ClearTableStyleOverrides(This,flag)	\
    ( (This)->lpVtbl -> ClearTableStyleOverrides(This,flag) ) 

#define IGcadTable_GetCellType(This,row,col,pCellType)	\
    ( (This)->lpVtbl -> GetCellType(This,row,col,pCellType) ) 

#define IGcadTable_SetCellType(This,row,col,CellType)	\
    ( (This)->lpVtbl -> SetCellType(This,row,col,CellType) ) 

#define IGcadTable_GetCellExtents(This,row,col,bOuterCell,pPts)	\
    ( (This)->lpVtbl -> GetCellExtents(This,row,col,bOuterCell,pPts) ) 

#define IGcadTable_GetAttachmentPoint(This,row,col,pAttachmentPoint)	\
    ( (This)->lpVtbl -> GetAttachmentPoint(This,row,col,pAttachmentPoint) ) 

#define IGcadTable_GetCellAlignment(This,row,col,pCellAlignment)	\
    ( (This)->lpVtbl -> GetCellAlignment(This,row,col,pCellAlignment) ) 

#define IGcadTable_SetCellAlignment(This,row,col,cellAlignment)	\
    ( (This)->lpVtbl -> SetCellAlignment(This,row,col,cellAlignment) ) 

#define IGcadTable_GetCellBackgroundColorNone(This,row,col,bValue)	\
    ( (This)->lpVtbl -> GetCellBackgroundColorNone(This,row,col,bValue) ) 

#define IGcadTable_SetCellBackgroundColorNone(This,row,col,bValue)	\
    ( (This)->lpVtbl -> SetCellBackgroundColorNone(This,row,col,bValue) ) 

#define IGcadTable_GetCellBackgroundColor(This,row,col,pColor)	\
    ( (This)->lpVtbl -> GetCellBackgroundColor(This,row,col,pColor) ) 

#define IGcadTable_SetCellBackgroundColor(This,row,col,pColor)	\
    ( (This)->lpVtbl -> SetCellBackgroundColor(This,row,col,pColor) ) 

#define IGcadTable_GetCellContentColor(This,row,col,pColor)	\
    ( (This)->lpVtbl -> GetCellContentColor(This,row,col,pColor) ) 

#define IGcadTable_SetCellContentColor(This,row,col,pColor)	\
    ( (This)->lpVtbl -> SetCellContentColor(This,row,col,pColor) ) 

#define IGcadTable_GetCellStyleOverrides(This,row,col,pIntArray)	\
    ( (This)->lpVtbl -> GetCellStyleOverrides(This,row,col,pIntArray) ) 

#define IGcadTable_DeleteCellContent(This,row,col)	\
    ( (This)->lpVtbl -> DeleteCellContent(This,row,col) ) 

#define IGcadTable_GetRowType(This,row,pRowType)	\
    ( (This)->lpVtbl -> GetRowType(This,row,pRowType) ) 

#define IGcadTable_GetText(This,row,col,pStr)	\
    ( (This)->lpVtbl -> GetText(This,row,col,pStr) ) 

#define IGcadTable_SetText(This,row,col,pStr)	\
    ( (This)->lpVtbl -> SetText(This,row,col,pStr) ) 

#define IGcadTable_GetCellTextStyle(This,row,col,bstrName)	\
    ( (This)->lpVtbl -> GetCellTextStyle(This,row,col,bstrName) ) 

#define IGcadTable_SetCellTextStyle(This,row,col,bstrName)	\
    ( (This)->lpVtbl -> SetCellTextStyle(This,row,col,bstrName) ) 

#define IGcadTable_GetCellTextHeight(This,row,col,pTextHeight)	\
    ( (This)->lpVtbl -> GetCellTextHeight(This,row,col,pTextHeight) ) 

#define IGcadTable_SetCellTextHeight(This,row,col,TextHeight)	\
    ( (This)->lpVtbl -> SetCellTextHeight(This,row,col,TextHeight) ) 

#define IGcadTable_GetTextRotation(This,row,col,TextRotation)	\
    ( (This)->lpVtbl -> GetTextRotation(This,row,col,TextRotation) ) 

#define IGcadTable_SetTextRotation(This,row,col,TextRotation)	\
    ( (This)->lpVtbl -> SetTextRotation(This,row,col,TextRotation) ) 

#define IGcadTable_GetAutoScale(This,row,col,bValue)	\
    ( (This)->lpVtbl -> GetAutoScale(This,row,col,bValue) ) 

#define IGcadTable_SetAutoScale(This,row,col,bValue)	\
    ( (This)->lpVtbl -> SetAutoScale(This,row,col,bValue) ) 

#define IGcadTable_GetBlockTableRecordId(This,row,col,blkId)	\
    ( (This)->lpVtbl -> GetBlockTableRecordId(This,row,col,blkId) ) 

#define IGcadTable_SetBlockTableRecordId(This,row,col,blkId,bAutoFit)	\
    ( (This)->lpVtbl -> SetBlockTableRecordId(This,row,col,blkId,bAutoFit) ) 

#define IGcadTable_GetBlockScale(This,row,col,blkScale)	\
    ( (This)->lpVtbl -> GetBlockScale(This,row,col,blkScale) ) 

#define IGcadTable_SetBlockScale(This,row,col,blkScale)	\
    ( (This)->lpVtbl -> SetBlockScale(This,row,col,blkScale) ) 

#define IGcadTable_GetBlockRotation(This,row,col,blkRotation)	\
    ( (This)->lpVtbl -> GetBlockRotation(This,row,col,blkRotation) ) 

#define IGcadTable_SetBlockRotation(This,row,col,blkRotation)	\
    ( (This)->lpVtbl -> SetBlockRotation(This,row,col,blkRotation) ) 

#define IGcadTable_GetBlockAttributeValue(This,row,col,attdefId,bstrValue)	\
    ( (This)->lpVtbl -> GetBlockAttributeValue(This,row,col,attdefId,bstrValue) ) 

#define IGcadTable_SetBlockAttributeValue(This,row,col,attdefId,bstrValue)	\
    ( (This)->lpVtbl -> SetBlockAttributeValue(This,row,col,attdefId,bstrValue) ) 

#define IGcadTable_GetCellGridLineWeight(This,row,col,edge,plineweight)	\
    ( (This)->lpVtbl -> GetCellGridLineWeight(This,row,col,edge,plineweight) ) 

#define IGcadTable_SetCellGridLineWeight(This,row,col,edges,Lineweight)	\
    ( (This)->lpVtbl -> SetCellGridLineWeight(This,row,col,edges,Lineweight) ) 

#define IGcadTable_GetCellGridColor(This,row,col,edge,pColor)	\
    ( (This)->lpVtbl -> GetCellGridColor(This,row,col,edge,pColor) ) 

#define IGcadTable_SetCellGridColor(This,row,col,edges,pColor)	\
    ( (This)->lpVtbl -> SetCellGridColor(This,row,col,edges,pColor) ) 

#define IGcadTable_GetCellGridVisibility(This,row,col,edge,bValue)	\
    ( (This)->lpVtbl -> GetCellGridVisibility(This,row,col,edge,bValue) ) 

#define IGcadTable_SetCellGridVisibility(This,row,col,edges,bValue)	\
    ( (This)->lpVtbl -> SetCellGridVisibility(This,row,col,edges,bValue) ) 

#define IGcadTable_InsertColumns(This,col,Width,cols)	\
    ( (This)->lpVtbl -> InsertColumns(This,col,Width,cols) ) 

#define IGcadTable_DeleteColumns(This,col,cols)	\
    ( (This)->lpVtbl -> DeleteColumns(This,col,cols) ) 

#define IGcadTable_InsertRows(This,row,Height,Rows)	\
    ( (This)->lpVtbl -> InsertRows(This,row,Height,Rows) ) 

#define IGcadTable_DeleteRows(This,row,Rows)	\
    ( (This)->lpVtbl -> DeleteRows(This,row,Rows) ) 

#define IGcadTable_MergeCells(This,minRow,maxRow,minCol,maxCol)	\
    ( (This)->lpVtbl -> MergeCells(This,minRow,maxRow,minCol,maxCol) ) 

#define IGcadTable_UnmergeCells(This,minRow,maxRow,minCol,maxCol)	\
    ( (This)->lpVtbl -> UnmergeCells(This,minRow,maxRow,minCol,maxCol) ) 

#define IGcadTable_IsMergedCell(This,row,col,minRow,maxRow,minCol,maxCol,pbValue)	\
    ( (This)->lpVtbl -> IsMergedCell(This,row,col,minRow,maxRow,minCol,maxCol,pbValue) ) 

#define IGcadTable_GetFieldId(This,row,col,fieldId)	\
    ( (This)->lpVtbl -> GetFieldId(This,row,col,fieldId) ) 

#define IGcadTable_SetFieldId(This,row,col,fieldId)	\
    ( (This)->lpVtbl -> SetFieldId(This,row,col,fieldId) ) 

#define IGcadTable_GenerateLayout(This)	\
    ( (This)->lpVtbl -> GenerateLayout(This) ) 

#define IGcadTable_RecomputeTableBlock(This,bForceUpdate)	\
    ( (This)->lpVtbl -> RecomputeTableBlock(This,bForceUpdate) ) 

#define IGcadTable_HitTest(This,wpt,wviewVec,resultRowIndex,resultColumnIndex,bReturn)	\
    ( (This)->lpVtbl -> HitTest(This,wpt,wviewVec,resultRowIndex,resultColumnIndex,bReturn) ) 

#define IGcadTable_Select(This,wpt,wvwVec,wvwxVec,wxaper,wyaper,allowOutside,resultRowIndex,resultColumnIndex)	\
    ( (This)->lpVtbl -> Select(This,wpt,wvwVec,wvwxVec,wxaper,wyaper,allowOutside,resultRowIndex,resultColumnIndex) ) 

#define IGcadTable_SelectSubRegion(This,wpt1,wpt2,wvwVec,wvwxVec,seltype,bIncludeCurrentSelection,rowMin,rowMax,colMin,colMax)	\
    ( (This)->lpVtbl -> SelectSubRegion(This,wpt1,wpt2,wvwVec,wvwxVec,seltype,bIncludeCurrentSelection,rowMin,rowMax,colMin,colMax) ) 

#define IGcadTable_ReselectSubRegion(This)	\
    ( (This)->lpVtbl -> ReselectSubRegion(This) ) 

#define IGcadTable_GetSubSelection(This,rowMin,rowMax,colMin,colMax)	\
    ( (This)->lpVtbl -> GetSubSelection(This,rowMin,rowMax,colMin,colMax) ) 

#define IGcadTable_SetSubSelection(This,rowMin,rowMax,colMin,colMax)	\
    ( (This)->lpVtbl -> SetSubSelection(This,rowMin,rowMax,colMin,colMax) ) 

#define IGcadTable_ClearSubSelection(This)	\
    ( (This)->lpVtbl -> ClearSubSelection(This) ) 

#define IGcadTable_get_HasSubSelection(This,pbValue)	\
    ( (This)->lpVtbl -> get_HasSubSelection(This,pbValue) ) 

#define IGcadTable_get_RegenerateTableSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> get_RegenerateTableSuppressed(This,bValue) ) 

#define IGcadTable_put_RegenerateTableSuppressed(This,bValue)	\
    ( (This)->lpVtbl -> put_RegenerateTableSuppressed(This,bValue) ) 

#define IGcadTable_GetDataType(This,rowType,pDataType,pUnitType)	\
    ( (This)->lpVtbl -> GetDataType(This,rowType,pDataType,pUnitType) ) 

#define IGcadTable_SetDataType(This,rowTypes,dataType,unitType)	\
    ( (This)->lpVtbl -> SetDataType(This,rowTypes,dataType,unitType) ) 

#define IGcadTable_GetFormat(This,rowType,pFormat)	\
    ( (This)->lpVtbl -> GetFormat(This,rowType,pFormat) ) 

#define IGcadTable_SetFormat(This,rowTypes,pFormat)	\
    ( (This)->lpVtbl -> SetFormat(This,rowTypes,pFormat) ) 

#define IGcadTable_FormatValue(This,row,col,nOption,pVal)	\
    ( (This)->lpVtbl -> FormatValue(This,row,col,nOption,pVal) ) 

#define IGcadTable_GetCellDataType(This,row,col,pDataType,pUnitType)	\
    ( (This)->lpVtbl -> GetCellDataType(This,row,col,pDataType,pUnitType) ) 

#define IGcadTable_SetCellDataType(This,row,col,dataType,unitType)	\
    ( (This)->lpVtbl -> SetCellDataType(This,row,col,dataType,unitType) ) 

#define IGcadTable_GetCellFormat(This,row,col,pFormat)	\
    ( (This)->lpVtbl -> GetCellFormat(This,row,col,pFormat) ) 

#define IGcadTable_SetCellFormat(This,row,col,pFormat)	\
    ( (This)->lpVtbl -> SetCellFormat(This,row,col,pFormat) ) 

#define IGcadTable_GetCellValue(This,row,col,pVal)	\
    ( (This)->lpVtbl -> GetCellValue(This,row,col,pVal) ) 

#define IGcadTable_SetCellValue(This,row,col,val)	\
    ( (This)->lpVtbl -> SetCellValue(This,row,col,val) ) 

#define IGcadTable_SetCellValueFromText(This,row,col,val,nOption)	\
    ( (This)->lpVtbl -> SetCellValueFromText(This,row,col,val,nOption) ) 

#define IGcadTable_ResetCellValue(This,row,col)	\
    ( (This)->lpVtbl -> ResetCellValue(This,row,col) ) 

#define IGcadTable_GetBlockTableRecordId32(This,row,col,blkId)	\
    ( (This)->lpVtbl -> GetBlockTableRecordId32(This,row,col,blkId) ) 

#define IGcadTable_SetBlockTableRecordId32(This,row,col,blkId,bAutoFit)	\
    ( (This)->lpVtbl -> SetBlockTableRecordId32(This,row,col,blkId,bAutoFit) ) 

#define IGcadTable_GetBlockAttributeValue32(This,row,col,attdefId,bstrValue)	\
    ( (This)->lpVtbl -> GetBlockAttributeValue32(This,row,col,attdefId,bstrValue) ) 

#define IGcadTable_SetBlockAttributeValue32(This,row,col,attdefId,bstrValue)	\
    ( (This)->lpVtbl -> SetBlockAttributeValue32(This,row,col,attdefId,bstrValue) ) 

#define IGcadTable_GetFieldId32(This,row,col,fieldId)	\
    ( (This)->lpVtbl -> GetFieldId32(This,row,col,fieldId) ) 

#define IGcadTable_SetFieldId32(This,row,col,fieldId)	\
    ( (This)->lpVtbl -> SetFieldId32(This,row,col,fieldId) ) 

#define IGcadTable_GetFieldId232(This,nRow,nCol,nContent,pAcDbObjectId)	\
    ( (This)->lpVtbl -> GetFieldId232(This,nRow,nCol,nContent,pAcDbObjectId) ) 

#define IGcadTable_SetFieldId232(This,nRow,nCol,nContent,acDbObjectId,nflag)	\
    ( (This)->lpVtbl -> SetFieldId232(This,nRow,nCol,nContent,acDbObjectId,nflag) ) 

#define IGcadTable_GetBlockTableRecordId232(This,nRow,nCol,nContent,pAcDbObjectId)	\
    ( (This)->lpVtbl -> GetBlockTableRecordId232(This,nRow,nCol,nContent,pAcDbObjectId) ) 

#define IGcadTable_SetBlockTableRecordId232(This,nRow,nCol,nContent,blkId,autoFit)	\
    ( (This)->lpVtbl -> SetBlockTableRecordId232(This,nRow,nCol,nContent,blkId,autoFit) ) 

#define IGcadTable_GetBlockAttributeValue232(This,nRow,nCol,nContent,blkId,Value)	\
    ( (This)->lpVtbl -> GetBlockAttributeValue232(This,nRow,nCol,nContent,blkId,Value) ) 

#define IGcadTable_SetBlockAttributeValue232(This,nRow,nCol,nContent,blkId,Value)	\
    ( (This)->lpVtbl -> SetBlockAttributeValue232(This,nRow,nCol,nContent,blkId,Value) ) 

#define IGcadTable_GetGridLinetype32(This,nRow,nCol,nGridLineType,pacDbObjId)	\
    ( (This)->lpVtbl -> GetGridLinetype32(This,nRow,nCol,nGridLineType,pacDbObjId) ) 

#define IGcadTable_SetGridLinetype32(This,nRow,nCol,nGridLineType,idLinetype)	\
    ( (This)->lpVtbl -> SetGridLinetype32(This,nRow,nCol,nGridLineType,idLinetype) ) 

#define IGcadTable_get_BreaksEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> get_BreaksEnabled(This,bEnabled) ) 

#define IGcadTable_put_BreaksEnabled(This,bEnabled)	\
    ( (This)->lpVtbl -> put_BreaksEnabled(This,bEnabled) ) 

#define IGcadTable_get_RepeatTopLabels(This,bEnabled)	\
    ( (This)->lpVtbl -> get_RepeatTopLabels(This,bEnabled) ) 

#define IGcadTable_put_RepeatTopLabels(This,bEnabled)	\
    ( (This)->lpVtbl -> put_RepeatTopLabels(This,bEnabled) ) 

#define IGcadTable_get_RepeatBottomLabels(This,bEnabled)	\
    ( (This)->lpVtbl -> get_RepeatBottomLabels(This,bEnabled) ) 

#define IGcadTable_put_RepeatBottomLabels(This,bEnabled)	\
    ( (This)->lpVtbl -> put_RepeatBottomLabels(This,bEnabled) ) 

#define IGcadTable_get_TableBreakFlowDirection(This,pDir)	\
    ( (This)->lpVtbl -> get_TableBreakFlowDirection(This,pDir) ) 

#define IGcadTable_put_TableBreakFlowDirection(This,pDir)	\
    ( (This)->lpVtbl -> put_TableBreakFlowDirection(This,pDir) ) 

#define IGcadTable_get_AllowManualPositions(This,bEnabled)	\
    ( (This)->lpVtbl -> get_AllowManualPositions(This,bEnabled) ) 

#define IGcadTable_put_AllowManualPositions(This,bEnabled)	\
    ( (This)->lpVtbl -> put_AllowManualPositions(This,bEnabled) ) 

#define IGcadTable_get_AllowManualHeights(This,bEnabled)	\
    ( (This)->lpVtbl -> get_AllowManualHeights(This,bEnabled) ) 

#define IGcadTable_put_AllowManualHeights(This,bEnabled)	\
    ( (This)->lpVtbl -> put_AllowManualHeights(This,bEnabled) ) 

#define IGcadTable_get_TableBreakHeight(This,pHeight)	\
    ( (This)->lpVtbl -> get_TableBreakHeight(This,pHeight) ) 

#define IGcadTable_put_TableBreakHeight(This,pHeight)	\
    ( (This)->lpVtbl -> put_TableBreakHeight(This,pHeight) ) 

#define IGcadTable_get_BreakSpacing(This,pSpacing)	\
    ( (This)->lpVtbl -> get_BreakSpacing(This,pSpacing) ) 

#define IGcadTable_put_BreakSpacing(This,pSpacing)	\
    ( (This)->lpVtbl -> put_BreakSpacing(This,pSpacing) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetText_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ BSTR *pStr);


void __RPC_STUB IGcadTable_GetText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetText_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ BSTR pStr);


void __RPC_STUB IGcadTable_SetText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellTextStyle_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ BSTR *bstrName);


void __RPC_STUB IGcadTable_GetCellTextStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellTextStyle_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IGcadTable_SetCellTextStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellTextHeight_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ double *pTextHeight);


void __RPC_STUB IGcadTable_GetCellTextHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellTextHeight_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ double TextHeight);


void __RPC_STUB IGcadTable_SetCellTextHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetTextRotation_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ GcRotationAngle *TextRotation);


void __RPC_STUB IGcadTable_GetTextRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetTextRotation_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ GcRotationAngle TextRotation);


void __RPC_STUB IGcadTable_SetTextRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetAutoScale_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ VARIANT_BOOL *bValue);


void __RPC_STUB IGcadTable_GetAutoScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetAutoScale_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ VARIANT_BOOL *bValue);


void __RPC_STUB IGcadTable_SetAutoScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockTableRecordId_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ LONG_PTR *blkId);


void __RPC_STUB IGcadTable_GetBlockTableRecordId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockTableRecordId_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ LONG_PTR blkId,
    /* [in] */ VARIANT_BOOL bAutoFit);


void __RPC_STUB IGcadTable_SetBlockTableRecordId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockScale_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ double *blkScale);


void __RPC_STUB IGcadTable_GetBlockScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockScale_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ double blkScale);


void __RPC_STUB IGcadTable_SetBlockScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockRotation_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ double *blkRotation);


void __RPC_STUB IGcadTable_GetBlockRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockRotation_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ double blkRotation);


void __RPC_STUB IGcadTable_SetBlockRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockAttributeValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ LONG_PTR attdefId,
    /* [retval][out] */ BSTR *bstrValue);


void __RPC_STUB IGcadTable_GetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockAttributeValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ LONG_PTR attdefId,
    /* [in] */ BSTR bstrValue);


void __RPC_STUB IGcadTable_SetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellGridLineWeight_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ GcCellEdgeMask edge,
    /* [retval][out] */ GCAD_LWEIGHT *plineweight);


void __RPC_STUB IGcadTable_GetCellGridLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellGridLineWeight_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ int edges,
    /* [in] */ GCAD_LWEIGHT Lineweight);


void __RPC_STUB IGcadTable_SetCellGridLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellGridColor_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ GcCellEdgeMask edge,
    /* [retval][out] */ IGcadAcCmColor **pColor);


void __RPC_STUB IGcadTable_GetCellGridColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellGridColor_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ int edges,
    /* [in] */ IGcadAcCmColor *pColor);


void __RPC_STUB IGcadTable_SetCellGridColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellGridVisibility_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ GcCellEdgeMask edge,
    /* [retval][out] */ VARIANT_BOOL *bValue);


void __RPC_STUB IGcadTable_GetCellGridVisibility_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellGridVisibility_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ int edges,
    /* [in] */ VARIANT_BOOL bValue);


void __RPC_STUB IGcadTable_SetCellGridVisibility_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_InsertColumns_Proxy( 
    IGcadTable * This,
    /* [in] */ int col,
    /* [in] */ double Width,
    /* [in] */ int cols);


void __RPC_STUB IGcadTable_InsertColumns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_DeleteColumns_Proxy( 
    IGcadTable * This,
    /* [in] */ int col,
    /* [in] */ int cols);


void __RPC_STUB IGcadTable_DeleteColumns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_InsertRows_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ double Height,
    /* [in] */ int Rows);


void __RPC_STUB IGcadTable_InsertRows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_DeleteRows_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int Rows);


void __RPC_STUB IGcadTable_DeleteRows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_MergeCells_Proxy( 
    IGcadTable * This,
    /* [in] */ int minRow,
    /* [in] */ int maxRow,
    /* [in] */ int minCol,
    /* [in] */ int maxCol);


void __RPC_STUB IGcadTable_MergeCells_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_UnmergeCells_Proxy( 
    IGcadTable * This,
    /* [in] */ int minRow,
    /* [in] */ int maxRow,
    /* [in] */ int minCol,
    /* [in] */ int maxCol);


void __RPC_STUB IGcadTable_UnmergeCells_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_IsMergedCell_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [out] */ int *minRow,
    /* [out] */ int *maxRow,
    /* [out] */ int *minCol,
    /* [out] */ int *maxCol,
    /* [retval][out] */ VARIANT_BOOL *pbValue);


void __RPC_STUB IGcadTable_IsMergedCell_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetFieldId_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ LONG_PTR *fieldId);


void __RPC_STUB IGcadTable_GetFieldId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetFieldId_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ LONG_PTR fieldId);


void __RPC_STUB IGcadTable_SetFieldId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GenerateLayout_Proxy( 
    IGcadTable * This);


void __RPC_STUB IGcadTable_GenerateLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_RecomputeTableBlock_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bForceUpdate);


void __RPC_STUB IGcadTable_RecomputeTableBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_HitTest_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT wpt,
    /* [in] */ VARIANT wviewVec,
    /* [out] */ int *resultRowIndex,
    /* [out] */ int *resultColumnIndex,
    /* [retval][out] */ VARIANT_BOOL *bReturn);


void __RPC_STUB IGcadTable_HitTest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_Select_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT wpt,
    /* [in] */ VARIANT wvwVec,
    /* [in] */ VARIANT wvwxVec,
    /* [in] */ double wxaper,
    /* [in] */ double wyaper,
    /* [in] */ VARIANT_BOOL allowOutside,
    /* [out] */ int *resultRowIndex,
    /* [out] */ int *resultColumnIndex);


void __RPC_STUB IGcadTable_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SelectSubRegion_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT wpt1,
    /* [in] */ VARIANT wpt2,
    /* [in] */ VARIANT wvwVec,
    /* [in] */ VARIANT wvwxVec,
    /* [in] */ GcSelectType seltype,
    /* [in] */ VARIANT_BOOL bIncludeCurrentSelection,
    /* [out] */ int *rowMin,
    /* [out] */ int *rowMax,
    /* [out] */ int *colMin,
    /* [out] */ int *colMax);


void __RPC_STUB IGcadTable_SelectSubRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_ReselectSubRegion_Proxy( 
    IGcadTable * This);


void __RPC_STUB IGcadTable_ReselectSubRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetSubSelection_Proxy( 
    IGcadTable * This,
    /* [out] */ int *rowMin,
    /* [out] */ int *rowMax,
    /* [out] */ int *colMin,
    /* [out] */ int *colMax);


void __RPC_STUB IGcadTable_GetSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetSubSelection_Proxy( 
    IGcadTable * This,
    /* [in] */ int rowMin,
    /* [in] */ int rowMax,
    /* [in] */ int colMin,
    /* [in] */ int colMax);


void __RPC_STUB IGcadTable_SetSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_ClearSubSelection_Proxy( 
    IGcadTable * This);


void __RPC_STUB IGcadTable_ClearSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_HasSubSelection_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *pbValue);


void __RPC_STUB IGcadTable_get_HasSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_RegenerateTableSuppressed_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bValue);


void __RPC_STUB IGcadTable_get_RegenerateTableSuppressed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_RegenerateTableSuppressed_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bValue);


void __RPC_STUB IGcadTable_put_RegenerateTableSuppressed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetDataType_Proxy( 
    IGcadTable * This,
    /* [in] */ GcRowType rowType,
    /* [out] */ GcValueDataType *pDataType,
    /* [out] */ GcValueUnitType *pUnitType);


void __RPC_STUB IGcadTable_GetDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetDataType_Proxy( 
    IGcadTable * This,
    /* [in] */ int rowTypes,
    /* [in] */ GcValueDataType dataType,
    /* [in] */ GcValueUnitType unitType);


void __RPC_STUB IGcadTable_SetDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetFormat_Proxy( 
    IGcadTable * This,
    /* [in] */ GcRowType rowType,
    /* [retval][out] */ BSTR *pFormat);


void __RPC_STUB IGcadTable_GetFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetFormat_Proxy( 
    IGcadTable * This,
    /* [in] */ int rowTypes,
    BSTR pFormat);


void __RPC_STUB IGcadTable_SetFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_FormatValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    GcFormatOption nOption,
    BSTR *pVal);


void __RPC_STUB IGcadTable_FormatValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellDataType_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [out] */ GcValueDataType *pDataType,
    /* [out] */ GcValueUnitType *pUnitType);


void __RPC_STUB IGcadTable_GetCellDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellDataType_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    GcValueDataType dataType,
    GcValueUnitType unitType);


void __RPC_STUB IGcadTable_SetCellDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellFormat_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ BSTR *pFormat);


void __RPC_STUB IGcadTable_GetCellFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellFormat_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    BSTR pFormat);


void __RPC_STUB IGcadTable_SetCellFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetCellValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadTable_GetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    VARIANT val);


void __RPC_STUB IGcadTable_SetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetCellValueFromText_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ BSTR val,
    /* [in] */ GcParseOption nOption);


void __RPC_STUB IGcadTable_SetCellValueFromText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_ResetCellValue_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col);


void __RPC_STUB IGcadTable_ResetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockTableRecordId32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ long *blkId);


void __RPC_STUB IGcadTable_GetBlockTableRecordId32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockTableRecordId32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ long blkId,
    /* [in] */ VARIANT_BOOL bAutoFit);


void __RPC_STUB IGcadTable_SetBlockTableRecordId32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockAttributeValue32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ long attdefId,
    /* [retval][out] */ BSTR *bstrValue);


void __RPC_STUB IGcadTable_GetBlockAttributeValue32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockAttributeValue32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ long attdefId,
    /* [in] */ BSTR bstrValue);


void __RPC_STUB IGcadTable_SetBlockAttributeValue32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetFieldId32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [retval][out] */ long *fieldId);


void __RPC_STUB IGcadTable_GetFieldId32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetFieldId32_Proxy( 
    IGcadTable * This,
    /* [in] */ int row,
    /* [in] */ int col,
    /* [in] */ long fieldId);


void __RPC_STUB IGcadTable_SetFieldId32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetFieldId232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [retval][out] */ long *pAcDbObjectId);


void __RPC_STUB IGcadTable_GetFieldId232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetFieldId232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [in] */ long acDbObjectId,
    /* [in] */ GcCellOption nflag);


void __RPC_STUB IGcadTable_SetFieldId232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockTableRecordId232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [retval][out] */ long *pAcDbObjectId);


void __RPC_STUB IGcadTable_GetBlockTableRecordId232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockTableRecordId232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [in] */ long blkId,
    /* [in] */ VARIANT_BOOL autoFit);


void __RPC_STUB IGcadTable_SetBlockTableRecordId232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetBlockAttributeValue232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [in] */ long blkId,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadTable_GetBlockAttributeValue232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetBlockAttributeValue232_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ int nContent,
    /* [in] */ long blkId,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadTable_SetBlockAttributeValue232_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_GetGridLinetype32_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ GcGridLineType nGridLineType,
    /* [retval][out] */ long *pacDbObjId);


void __RPC_STUB IGcadTable_GetGridLinetype32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadTable_SetGridLinetype32_Proxy( 
    IGcadTable * This,
    /* [in] */ int nRow,
    /* [in] */ int nCol,
    /* [in] */ GcGridLineType nGridLineType,
    /* [in] */ long idLinetype);


void __RPC_STUB IGcadTable_SetGridLinetype32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_BreaksEnabled_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bEnabled);


void __RPC_STUB IGcadTable_get_BreaksEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_BreaksEnabled_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bEnabled);


void __RPC_STUB IGcadTable_put_BreaksEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_RepeatTopLabels_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bEnabled);


void __RPC_STUB IGcadTable_get_RepeatTopLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_RepeatTopLabels_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bEnabled);


void __RPC_STUB IGcadTable_put_RepeatTopLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_RepeatBottomLabels_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bEnabled);


void __RPC_STUB IGcadTable_get_RepeatBottomLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_RepeatBottomLabels_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bEnabled);


void __RPC_STUB IGcadTable_put_RepeatBottomLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_TableBreakFlowDirection_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ GcTableFlowDirection *pDir);


void __RPC_STUB IGcadTable_get_TableBreakFlowDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_TableBreakFlowDirection_Proxy( 
    IGcadTable * This,
    /* [in] */ GcTableFlowDirection pDir);


void __RPC_STUB IGcadTable_put_TableBreakFlowDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_AllowManualPositions_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bEnabled);


void __RPC_STUB IGcadTable_get_AllowManualPositions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_AllowManualPositions_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bEnabled);


void __RPC_STUB IGcadTable_put_AllowManualPositions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_AllowManualHeights_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ VARIANT_BOOL *bEnabled);


void __RPC_STUB IGcadTable_get_AllowManualHeights_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_AllowManualHeights_Proxy( 
    IGcadTable * This,
    /* [in] */ VARIANT_BOOL bEnabled);


void __RPC_STUB IGcadTable_put_AllowManualHeights_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_TableBreakHeight_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ double *pHeight);


void __RPC_STUB IGcadTable_get_TableBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_TableBreakHeight_Proxy( 
    IGcadTable * This,
    /* [in] */ double pHeight);


void __RPC_STUB IGcadTable_put_TableBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_get_BreakSpacing_Proxy( 
    IGcadTable * This,
    /* [retval][out] */ double *pSpacing);


void __RPC_STUB IGcadTable_get_BreakSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadTable_put_BreakSpacing_Proxy( 
    IGcadTable * This,
    /* [in] */ double pSpacing);


void __RPC_STUB IGcadTable_put_BreakSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadTable_INTERFACE_DEFINED__ */


#ifndef __IGcadTableCell_INTERFACE_DEFINED__
#define __IGcadTableCell_INTERFACE_DEFINED__

/* interface IGcadTableCell */
/* [oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadTableCell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("358094B7-054A-4EA1-A62A-5DBF25DCBE76")
    IGcadTableCell : public IGcadEntity
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellStyle( 
            /* [retval][out] */ BSTR *cellStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellStyle( 
            /* [in] */ BSTR cellStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_RowStyle( 
            /* [retval][out] */ BSTR *rowStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_RowStyle( 
            /* [in] */ BSTR rowStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnStyle( 
            /* [retval][out] */ BSTR *columnStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnStyle( 
            /* [in] */ BSTR columnStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellWidth( 
            /* [retval][out] */ double *cellWidth) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellWidth( 
            /* [in] */ double cellWidth) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellHeight( 
            /* [retval][out] */ double *cellHeight) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellHeight( 
            /* [in] */ double cellHeight) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellAlignment( 
            /* [retval][out] */ GcCellAlignment *cellAlignment) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellAlignment( 
            /* [in] */ GcCellAlignment cellAlignment) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellBackgroundFill( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellBackgroundFill( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellBorderColor( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellBorderColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellBorderLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *borderLineweight) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellBorderLineweight( 
            /* [in] */ GCAD_LWEIGHT borderLineweight) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellBorderLinetype( 
            /* [retval][out] */ BSTR *borderLinetype) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellBorderLinetype( 
            /* [in] */ BSTR borderLinetype) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalCellMargin( 
            /* [retval][out] */ double *horizontalCellMargin) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalCellMargin( 
            /* [in] */ double horizontalCellMargin) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalCellMargin( 
            /* [retval][out] */ double *verticalCellMargin) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalCellMargin( 
            /* [in] */ double verticalCellMargin) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellLocking( 
            /* [retval][out] */ BSTR *cellLocking) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellLocking( 
            /* [in] */ BSTR cellLocking) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellDataLink( 
            /* [retval][out] */ BSTR *dataLink) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellDataLink( 
            /* [in] */ BSTR dataLink) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellType( 
            /* [retval][out] */ BSTR *cellType) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellType( 
            /* [in] */ BSTR cellType) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellLayout( 
            /* [retval][out] */ BSTR *Layout) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellLayout( 
            /* [in] */ BSTR Layout) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellContents( 
            /* [retval][out] */ BSTR *contents) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellContents( 
            /* [in] */ BSTR contents) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellTextStyle( 
            /* [retval][out] */ BSTR *textStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellTextStyle( 
            /* [in] */ BSTR textStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellTextHeight( 
            /* [retval][out] */ double *textHeight) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellTextHeight( 
            /* [in] */ double textHeight) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellTextRotation( 
            /* [retval][out] */ GCAD_ANGLE *textRotation) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellTextRotation( 
            /* [in] */ GCAD_ANGLE textRotation) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellTextColor( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellTextColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CellDataType( 
            /* [retval][out] */ BSTR *dataType) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CellDataType( 
            /* [in] */ BSTR dataType) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ BSTR *format) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ BSTR format) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Presition( 
            /* [retval][out] */ BSTR *presition) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Presition( 
            /* [in] */ BSTR presition) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AdditionalFormat( 
            /* [retval][out] */ BSTR *additionalFormat) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AdditionalFormat( 
            /* [in] */ BSTR additionalFormat) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlocksInCell( 
            /* [retval][out] */ int *blockIndexInCellBlockOrder) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlocksInCell( 
            /* [in] */ int blockIndexInCellBlockOrder) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockName( 
            /* [retval][out] */ BSTR *blockName) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockName( 
            /* [in] */ BSTR blockName) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockAutofit( 
            /* [retval][out] */ VARIANT_BOOL *bAutofit) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockAutofit( 
            /* [in] */ VARIANT_BOOL bAutofit) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockScale( 
            /* [retval][out] */ GCAD_NOUNITS *blockScale) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockScale( 
            /* [in] */ GCAD_NOUNITS blockScale) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockRotation( 
            /* [retval][out] */ GCAD_ANGLE *blockRotation) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockRotation( 
            /* [in] */ GCAD_ANGLE blockRotation) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockColor( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTableCellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTableCell * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTableCell * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTableCell * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTableCell * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTableCell * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTableCell * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTableCell * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTableCell * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTableCell * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTableCell * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTableCell * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTableCell * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTableCell * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTableCell * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTableCell * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTableCell * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTableCell * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadTableCell * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadTableCell * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadTableCell * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadTableCell * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadTableCell * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadTableCell * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadTableCell * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadTableCell * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadTableCell * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadTableCell * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadTableCell * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadTableCell * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadTableCell * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadTableCell * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellStyle )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *cellStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellStyle )( 
            IGcadTableCell * This,
            /* [in] */ BSTR cellStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowStyle )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *rowStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowStyle )( 
            IGcadTableCell * This,
            /* [in] */ BSTR rowStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnStyle )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *columnStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnStyle )( 
            IGcadTableCell * This,
            /* [in] */ BSTR columnStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellWidth )( 
            IGcadTableCell * This,
            /* [retval][out] */ double *cellWidth);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellWidth )( 
            IGcadTableCell * This,
            /* [in] */ double cellWidth);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellHeight )( 
            IGcadTableCell * This,
            /* [retval][out] */ double *cellHeight);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellHeight )( 
            IGcadTableCell * This,
            /* [in] */ double cellHeight);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellAlignment )( 
            IGcadTableCell * This,
            /* [retval][out] */ GcCellAlignment *cellAlignment);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellAlignment )( 
            IGcadTableCell * This,
            /* [in] */ GcCellAlignment cellAlignment);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellBackgroundFill )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellBackgroundFill )( 
            IGcadTableCell * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellBorderColor )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellBorderColor )( 
            IGcadTableCell * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellBorderLineweight )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_LWEIGHT *borderLineweight);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellBorderLineweight )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_LWEIGHT borderLineweight);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellBorderLinetype )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *borderLinetype);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellBorderLinetype )( 
            IGcadTableCell * This,
            /* [in] */ BSTR borderLinetype);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalCellMargin )( 
            IGcadTableCell * This,
            /* [retval][out] */ double *horizontalCellMargin);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalCellMargin )( 
            IGcadTableCell * This,
            /* [in] */ double horizontalCellMargin);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalCellMargin )( 
            IGcadTableCell * This,
            /* [retval][out] */ double *verticalCellMargin);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalCellMargin )( 
            IGcadTableCell * This,
            /* [in] */ double verticalCellMargin);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellLocking )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *cellLocking);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellLocking )( 
            IGcadTableCell * This,
            /* [in] */ BSTR cellLocking);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellDataLink )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *dataLink);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellDataLink )( 
            IGcadTableCell * This,
            /* [in] */ BSTR dataLink);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellType )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *cellType);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellType )( 
            IGcadTableCell * This,
            /* [in] */ BSTR cellType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellLayout )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *Layout);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellLayout )( 
            IGcadTableCell * This,
            /* [in] */ BSTR Layout);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellContents )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *contents);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellContents )( 
            IGcadTableCell * This,
            /* [in] */ BSTR contents);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellTextStyle )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *textStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellTextStyle )( 
            IGcadTableCell * This,
            /* [in] */ BSTR textStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellTextHeight )( 
            IGcadTableCell * This,
            /* [retval][out] */ double *textHeight);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellTextHeight )( 
            IGcadTableCell * This,
            /* [in] */ double textHeight);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellTextRotation )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_ANGLE *textRotation);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellTextRotation )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_ANGLE textRotation);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellTextColor )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellTextColor )( 
            IGcadTableCell * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CellDataType )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *dataType);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CellDataType )( 
            IGcadTableCell * This,
            /* [in] */ BSTR dataType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *format);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            IGcadTableCell * This,
            /* [in] */ BSTR format);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presition )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *presition);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Presition )( 
            IGcadTableCell * This,
            /* [in] */ BSTR presition);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalFormat )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *additionalFormat);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdditionalFormat )( 
            IGcadTableCell * This,
            /* [in] */ BSTR additionalFormat);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlocksInCell )( 
            IGcadTableCell * This,
            /* [retval][out] */ int *blockIndexInCellBlockOrder);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlocksInCell )( 
            IGcadTableCell * This,
            /* [in] */ int blockIndexInCellBlockOrder);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockName )( 
            IGcadTableCell * This,
            /* [retval][out] */ BSTR *blockName);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockName )( 
            IGcadTableCell * This,
            /* [in] */ BSTR blockName);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockAutofit )( 
            IGcadTableCell * This,
            /* [retval][out] */ VARIANT_BOOL *bAutofit);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockAutofit )( 
            IGcadTableCell * This,
            /* [in] */ VARIANT_BOOL bAutofit);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScale )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_NOUNITS *blockScale);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScale )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_NOUNITS blockScale);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockRotation )( 
            IGcadTableCell * This,
            /* [retval][out] */ GCAD_ANGLE *blockRotation);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockRotation )( 
            IGcadTableCell * This,
            /* [in] */ GCAD_ANGLE blockRotation);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockColor )( 
            IGcadTableCell * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockColor )( 
            IGcadTableCell * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        END_INTERFACE
    } IGcadTableCellVtbl;

    interface IGcadTableCell
    {
        CONST_VTBL struct IGcadTableCellVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTableCell_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTableCell_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTableCell_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTableCell_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTableCell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTableCell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTableCell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTableCell_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTableCell_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTableCell_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTableCell_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTableCell_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTableCell_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTableCell_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTableCell_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTableCell_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTableCell_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTableCell_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTableCell_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTableCell_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTableCell_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTableCell_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTableCell_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadTableCell_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadTableCell_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadTableCell_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadTableCell_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadTableCell_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadTableCell_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadTableCell_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadTableCell_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadTableCell_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadTableCell_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadTableCell_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadTableCell_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadTableCell_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadTableCell_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadTableCell_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadTableCell_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadTableCell_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadTableCell_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadTableCell_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadTableCell_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadTableCell_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadTableCell_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadTableCell_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadTableCell_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadTableCell_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadTableCell_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadTableCell_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadTableCell_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadTableCell_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadTableCell_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadTableCell_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadTableCell_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadTableCell_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadTableCell_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadTableCell_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadTableCell_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadTableCell_get_CellStyle(This,cellStyle)	\
    ( (This)->lpVtbl -> get_CellStyle(This,cellStyle) ) 

#define IGcadTableCell_put_CellStyle(This,cellStyle)	\
    ( (This)->lpVtbl -> put_CellStyle(This,cellStyle) ) 

#define IGcadTableCell_get_RowStyle(This,rowStyle)	\
    ( (This)->lpVtbl -> get_RowStyle(This,rowStyle) ) 

#define IGcadTableCell_put_RowStyle(This,rowStyle)	\
    ( (This)->lpVtbl -> put_RowStyle(This,rowStyle) ) 

#define IGcadTableCell_get_ColumnStyle(This,columnStyle)	\
    ( (This)->lpVtbl -> get_ColumnStyle(This,columnStyle) ) 

#define IGcadTableCell_put_ColumnStyle(This,columnStyle)	\
    ( (This)->lpVtbl -> put_ColumnStyle(This,columnStyle) ) 

#define IGcadTableCell_get_CellWidth(This,cellWidth)	\
    ( (This)->lpVtbl -> get_CellWidth(This,cellWidth) ) 

#define IGcadTableCell_put_CellWidth(This,cellWidth)	\
    ( (This)->lpVtbl -> put_CellWidth(This,cellWidth) ) 

#define IGcadTableCell_get_CellHeight(This,cellHeight)	\
    ( (This)->lpVtbl -> get_CellHeight(This,cellHeight) ) 

#define IGcadTableCell_put_CellHeight(This,cellHeight)	\
    ( (This)->lpVtbl -> put_CellHeight(This,cellHeight) ) 

#define IGcadTableCell_get_CellAlignment(This,cellAlignment)	\
    ( (This)->lpVtbl -> get_CellAlignment(This,cellAlignment) ) 

#define IGcadTableCell_put_CellAlignment(This,cellAlignment)	\
    ( (This)->lpVtbl -> put_CellAlignment(This,cellAlignment) ) 

#define IGcadTableCell_get_CellBackgroundFill(This,ppColor)	\
    ( (This)->lpVtbl -> get_CellBackgroundFill(This,ppColor) ) 

#define IGcadTableCell_put_CellBackgroundFill(This,pColor)	\
    ( (This)->lpVtbl -> put_CellBackgroundFill(This,pColor) ) 

#define IGcadTableCell_get_CellBorderColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_CellBorderColor(This,ppColor) ) 

#define IGcadTableCell_put_CellBorderColor(This,pColor)	\
    ( (This)->lpVtbl -> put_CellBorderColor(This,pColor) ) 

#define IGcadTableCell_get_CellBorderLineweight(This,borderLineweight)	\
    ( (This)->lpVtbl -> get_CellBorderLineweight(This,borderLineweight) ) 

#define IGcadTableCell_put_CellBorderLineweight(This,borderLineweight)	\
    ( (This)->lpVtbl -> put_CellBorderLineweight(This,borderLineweight) ) 

#define IGcadTableCell_get_CellBorderLinetype(This,borderLinetype)	\
    ( (This)->lpVtbl -> get_CellBorderLinetype(This,borderLinetype) ) 

#define IGcadTableCell_put_CellBorderLinetype(This,borderLinetype)	\
    ( (This)->lpVtbl -> put_CellBorderLinetype(This,borderLinetype) ) 

#define IGcadTableCell_get_HorizontalCellMargin(This,horizontalCellMargin)	\
    ( (This)->lpVtbl -> get_HorizontalCellMargin(This,horizontalCellMargin) ) 

#define IGcadTableCell_put_HorizontalCellMargin(This,horizontalCellMargin)	\
    ( (This)->lpVtbl -> put_HorizontalCellMargin(This,horizontalCellMargin) ) 

#define IGcadTableCell_get_VerticalCellMargin(This,verticalCellMargin)	\
    ( (This)->lpVtbl -> get_VerticalCellMargin(This,verticalCellMargin) ) 

#define IGcadTableCell_put_VerticalCellMargin(This,verticalCellMargin)	\
    ( (This)->lpVtbl -> put_VerticalCellMargin(This,verticalCellMargin) ) 

#define IGcadTableCell_get_CellLocking(This,cellLocking)	\
    ( (This)->lpVtbl -> get_CellLocking(This,cellLocking) ) 

#define IGcadTableCell_put_CellLocking(This,cellLocking)	\
    ( (This)->lpVtbl -> put_CellLocking(This,cellLocking) ) 

#define IGcadTableCell_get_CellDataLink(This,dataLink)	\
    ( (This)->lpVtbl -> get_CellDataLink(This,dataLink) ) 

#define IGcadTableCell_put_CellDataLink(This,dataLink)	\
    ( (This)->lpVtbl -> put_CellDataLink(This,dataLink) ) 

#define IGcadTableCell_get_CellType(This,cellType)	\
    ( (This)->lpVtbl -> get_CellType(This,cellType) ) 

#define IGcadTableCell_put_CellType(This,cellType)	\
    ( (This)->lpVtbl -> put_CellType(This,cellType) ) 

#define IGcadTableCell_get_CellLayout(This,Layout)	\
    ( (This)->lpVtbl -> get_CellLayout(This,Layout) ) 

#define IGcadTableCell_put_CellLayout(This,Layout)	\
    ( (This)->lpVtbl -> put_CellLayout(This,Layout) ) 

#define IGcadTableCell_get_CellContents(This,contents)	\
    ( (This)->lpVtbl -> get_CellContents(This,contents) ) 

#define IGcadTableCell_put_CellContents(This,contents)	\
    ( (This)->lpVtbl -> put_CellContents(This,contents) ) 

#define IGcadTableCell_get_CellTextStyle(This,textStyle)	\
    ( (This)->lpVtbl -> get_CellTextStyle(This,textStyle) ) 

#define IGcadTableCell_put_CellTextStyle(This,textStyle)	\
    ( (This)->lpVtbl -> put_CellTextStyle(This,textStyle) ) 

#define IGcadTableCell_get_CellTextHeight(This,textHeight)	\
    ( (This)->lpVtbl -> get_CellTextHeight(This,textHeight) ) 

#define IGcadTableCell_put_CellTextHeight(This,textHeight)	\
    ( (This)->lpVtbl -> put_CellTextHeight(This,textHeight) ) 

#define IGcadTableCell_get_CellTextRotation(This,textRotation)	\
    ( (This)->lpVtbl -> get_CellTextRotation(This,textRotation) ) 

#define IGcadTableCell_put_CellTextRotation(This,textRotation)	\
    ( (This)->lpVtbl -> put_CellTextRotation(This,textRotation) ) 

#define IGcadTableCell_get_CellTextColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_CellTextColor(This,ppColor) ) 

#define IGcadTableCell_put_CellTextColor(This,pColor)	\
    ( (This)->lpVtbl -> put_CellTextColor(This,pColor) ) 

#define IGcadTableCell_get_CellDataType(This,dataType)	\
    ( (This)->lpVtbl -> get_CellDataType(This,dataType) ) 

#define IGcadTableCell_put_CellDataType(This,dataType)	\
    ( (This)->lpVtbl -> put_CellDataType(This,dataType) ) 

#define IGcadTableCell_get_Format(This,format)	\
    ( (This)->lpVtbl -> get_Format(This,format) ) 

#define IGcadTableCell_put_Format(This,format)	\
    ( (This)->lpVtbl -> put_Format(This,format) ) 

#define IGcadTableCell_get_Presition(This,presition)	\
    ( (This)->lpVtbl -> get_Presition(This,presition) ) 

#define IGcadTableCell_put_Presition(This,presition)	\
    ( (This)->lpVtbl -> put_Presition(This,presition) ) 

#define IGcadTableCell_get_AdditionalFormat(This,additionalFormat)	\
    ( (This)->lpVtbl -> get_AdditionalFormat(This,additionalFormat) ) 

#define IGcadTableCell_put_AdditionalFormat(This,additionalFormat)	\
    ( (This)->lpVtbl -> put_AdditionalFormat(This,additionalFormat) ) 

#define IGcadTableCell_get_BlocksInCell(This,blockIndexInCellBlockOrder)	\
    ( (This)->lpVtbl -> get_BlocksInCell(This,blockIndexInCellBlockOrder) ) 

#define IGcadTableCell_put_BlocksInCell(This,blockIndexInCellBlockOrder)	\
    ( (This)->lpVtbl -> put_BlocksInCell(This,blockIndexInCellBlockOrder) ) 

#define IGcadTableCell_get_BlockName(This,blockName)	\
    ( (This)->lpVtbl -> get_BlockName(This,blockName) ) 

#define IGcadTableCell_put_BlockName(This,blockName)	\
    ( (This)->lpVtbl -> put_BlockName(This,blockName) ) 

#define IGcadTableCell_get_BlockAutofit(This,bAutofit)	\
    ( (This)->lpVtbl -> get_BlockAutofit(This,bAutofit) ) 

#define IGcadTableCell_put_BlockAutofit(This,bAutofit)	\
    ( (This)->lpVtbl -> put_BlockAutofit(This,bAutofit) ) 

#define IGcadTableCell_get_BlockScale(This,blockScale)	\
    ( (This)->lpVtbl -> get_BlockScale(This,blockScale) ) 

#define IGcadTableCell_put_BlockScale(This,blockScale)	\
    ( (This)->lpVtbl -> put_BlockScale(This,blockScale) ) 

#define IGcadTableCell_get_BlockRotation(This,blockRotation)	\
    ( (This)->lpVtbl -> get_BlockRotation(This,blockRotation) ) 

#define IGcadTableCell_put_BlockRotation(This,blockRotation)	\
    ( (This)->lpVtbl -> put_BlockRotation(This,blockRotation) ) 

#define IGcadTableCell_get_BlockColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_BlockColor(This,ppColor) ) 

#define IGcadTableCell_put_BlockColor(This,pColor)	\
    ( (This)->lpVtbl -> put_BlockColor(This,pColor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadTableCell_INTERFACE_DEFINED__ */


#ifndef __IGcadDimArcLength_INTERFACE_DEFINED__
#define __IGcadDimArcLength_INTERFACE_DEFINED__

/* interface IGcadDimArcLength */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimArcLength;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01DEC36F-B051-4031-8164-1A5A40F76687")
    IGcadDimArcLength : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend( 
            /* [retval][out] */ double *extend) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend( 
            /* [in] */ double extend) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition( 
            /* [retval][out] */ GcDimHorizontalJustification *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition( 
            /* [in] */ GcDimHorizontalJustification Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *lweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT lweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset( 
            /* [retval][out] */ double *Offset) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset( 
            /* [in] */ double Offset) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Type( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Type( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead1Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead1Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arrowhead2Block( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Arrowhead2Block( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcPoint( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcPoint( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Point( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Point( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Point( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Point( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterPoint( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterPoint( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Leader1Point( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Leader1Point( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Leader2Point( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Leader2Point( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPartial( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsPartial( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcStartParam( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcStartParam( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcEndParam( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcEndParam( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasLeader( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasLeader( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SymbolPosition( 
            /* [retval][out] */ GcDimArcLengthSymbol *Position) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SymbolPosition( 
            /* [in] */ GcDimArcLengthSymbol Position) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bFixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress( 
            /* [in] */ VARIANT_BOOL bFixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen( 
            /* [retval][out] */ double *FixedLen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen( 
            /* [in] */ double FixedLen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix( 
            /* [retval][out] */ BSTR *suffix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix( 
            /* [in] */ BSTR suffix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor( 
            /* [in] */ double factor) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimArcLengthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimArcLength * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimArcLength * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimArcLength * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimArcLength * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimArcLength * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimArcLength * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimArcLength * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimArcLength * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimArcLength * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimArcLength * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimArcLength * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimArcLength * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimArcLength * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimArcLength * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimArcLength * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimArcLength * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimArcLength * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimArcLength * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimArcLength * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimArcLength * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )( 
            IGcadDimArcLength * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *extend);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )( 
            IGcadDimArcLength * This,
            /* [in] */ double extend);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimHorizontalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimHorizontalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_LWEIGHT *lweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_LWEIGHT lweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimArcLength * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )( 
            IGcadDimArcLength * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimArcLength * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimArcLength * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcPoint )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcPoint )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Point )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Point )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Point )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Point )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterPoint )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterPoint )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Leader1Point )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Leader1Point )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Leader2Point )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Leader2Point )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPartial )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsPartial )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcStartParam )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcStartParam )( 
            IGcadDimArcLength * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcEndParam )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcEndParam )( 
            IGcadDimArcLength * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasLeader )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasLeader )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SymbolPosition )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ GcDimArcLengthSymbol *Position);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SymbolPosition )( 
            IGcadDimArcLength * This,
            /* [in] */ GcDimArcLengthSymbol Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ VARIANT_BOOL *bFixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )( 
            IGcadDimArcLength * This,
            /* [in] */ VARIANT_BOOL bFixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *FixedLen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )( 
            IGcadDimArcLength * This,
            /* [in] */ double FixedLen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )( 
            IGcadDimArcLength * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )( 
            IGcadDimArcLength * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )( 
            IGcadDimArcLength * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )( 
            IGcadDimArcLength * This,
            /* [in] */ double factor);
        
        END_INTERFACE
    } IGcadDimArcLengthVtbl;

    interface IGcadDimArcLength
    {
        CONST_VTBL struct IGcadDimArcLengthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimArcLength_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimArcLength_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimArcLength_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimArcLength_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimArcLength_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimArcLength_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimArcLength_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimArcLength_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimArcLength_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimArcLength_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimArcLength_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimArcLength_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimArcLength_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimArcLength_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimArcLength_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimArcLength_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimArcLength_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimArcLength_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimArcLength_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimArcLength_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimArcLength_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimArcLength_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimArcLength_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimArcLength_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimArcLength_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimArcLength_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimArcLength_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimArcLength_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimArcLength_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimArcLength_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimArcLength_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimArcLength_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimArcLength_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimArcLength_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimArcLength_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimArcLength_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimArcLength_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimArcLength_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimArcLength_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimArcLength_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimArcLength_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimArcLength_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimArcLength_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimArcLength_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimArcLength_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimArcLength_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimArcLength_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimArcLength_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimArcLength_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimArcLength_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimArcLength_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimArcLength_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimArcLength_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimArcLength_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimArcLength_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimArcLength_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimArcLength_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimArcLength_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimArcLength_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimArcLength_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimArcLength_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimArcLength_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimArcLength_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimArcLength_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimArcLength_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimArcLength_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimArcLength_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimArcLength_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimArcLength_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimArcLength_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimArcLength_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimArcLength_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimArcLength_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimArcLength_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimArcLength_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimArcLength_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimArcLength_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimArcLength_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimArcLength_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimArcLength_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimArcLength_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimArcLength_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimArcLength_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimArcLength_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimArcLength_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimArcLength_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimArcLength_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimArcLength_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimArcLength_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimArcLength_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimArcLength_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimArcLength_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimArcLength_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimArcLength_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimArcLength_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimArcLength_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimArcLength_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimArcLength_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimArcLength_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimArcLength_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimArcLength_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimArcLength_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimArcLength_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimArcLength_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimArcLength_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimArcLength_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimArcLength_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimArcLength_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimArcLength_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimArcLength_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimArcLength_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimArcLength_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimArcLength_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimArcLength_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimArcLength_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimArcLength_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimArcLength_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimArcLength_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimArcLength_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimArcLength_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimArcLength_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimArcLength_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimArcLength_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimArcLength_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimArcLength_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimArcLength_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimArcLength_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimArcLength_get_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_ExtensionLineColor(This,Type) ) 

#define IGcadDimArcLength_put_ExtensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_ExtensionLineColor(This,Type) ) 

#define IGcadDimArcLength_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimArcLength_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimArcLength_get_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_DimensionLineExtend(This,extend) ) 

#define IGcadDimArcLength_put_DimensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_DimensionLineExtend(This,extend) ) 

#define IGcadDimArcLength_get_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> get_ExtensionLineExtend(This,extend) ) 

#define IGcadDimArcLength_put_ExtensionLineExtend(This,extend)	\
    ( (This)->lpVtbl -> put_ExtensionLineExtend(This,extend) ) 

#define IGcadDimArcLength_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimArcLength_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimArcLength_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimArcLength_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimArcLength_get_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_HorizontalTextPosition(This,Type) ) 

#define IGcadDimArcLength_put_HorizontalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_HorizontalTextPosition(This,Type) ) 

#define IGcadDimArcLength_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimArcLength_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimArcLength_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimArcLength_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimArcLength_get_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> get_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimArcLength_put_ExtensionLineWeight(This,lweight)	\
    ( (This)->lpVtbl -> put_ExtensionLineWeight(This,lweight) ) 

#define IGcadDimArcLength_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimArcLength_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimArcLength_get_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_put_DimLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_get_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_put_DimLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_get_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_put_ExtLine1Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_get_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_put_ExtLine2Suppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress) ) 

#define IGcadDimArcLength_get_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_DimLineInside(This,bInside) ) 

#define IGcadDimArcLength_put_DimLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_DimLineInside(This,bInside) ) 

#define IGcadDimArcLength_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimArcLength_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimArcLength_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimArcLength_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimArcLength_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimArcLength_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimArcLength_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimArcLength_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimArcLength_get_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> get_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimArcLength_put_ExtensionLineOffset(This,Offset)	\
    ( (This)->lpVtbl -> put_ExtensionLineOffset(This,Offset) ) 

#define IGcadDimArcLength_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimArcLength_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimArcLength_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimArcLength_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimArcLength_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimArcLength_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimArcLength_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimArcLength_get_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead1Type(This,Type) ) 

#define IGcadDimArcLength_put_Arrowhead1Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead1Type(This,Type) ) 

#define IGcadDimArcLength_get_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> get_Arrowhead2Type(This,Type) ) 

#define IGcadDimArcLength_put_Arrowhead2Type(This,Type)	\
    ( (This)->lpVtbl -> put_Arrowhead2Type(This,Type) ) 

#define IGcadDimArcLength_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimArcLength_get_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimArcLength_put_Arrowhead1Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead1Block(This,BlockName) ) 

#define IGcadDimArcLength_get_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> get_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimArcLength_put_Arrowhead2Block(This,BlockName)	\
    ( (This)->lpVtbl -> put_Arrowhead2Block(This,BlockName) ) 

#define IGcadDimArcLength_get_ArcPoint(This,pVal)	\
    ( (This)->lpVtbl -> get_ArcPoint(This,pVal) ) 

#define IGcadDimArcLength_put_ArcPoint(This,pVal)	\
    ( (This)->lpVtbl -> put_ArcPoint(This,pVal) ) 

#define IGcadDimArcLength_get_ExtLine1Point(This,pVal)	\
    ( (This)->lpVtbl -> get_ExtLine1Point(This,pVal) ) 

#define IGcadDimArcLength_put_ExtLine1Point(This,pVal)	\
    ( (This)->lpVtbl -> put_ExtLine1Point(This,pVal) ) 

#define IGcadDimArcLength_get_ExtLine2Point(This,pVal)	\
    ( (This)->lpVtbl -> get_ExtLine2Point(This,pVal) ) 

#define IGcadDimArcLength_put_ExtLine2Point(This,pVal)	\
    ( (This)->lpVtbl -> put_ExtLine2Point(This,pVal) ) 

#define IGcadDimArcLength_get_CenterPoint(This,pVal)	\
    ( (This)->lpVtbl -> get_CenterPoint(This,pVal) ) 

#define IGcadDimArcLength_put_CenterPoint(This,pVal)	\
    ( (This)->lpVtbl -> put_CenterPoint(This,pVal) ) 

#define IGcadDimArcLength_get_Leader1Point(This,pVal)	\
    ( (This)->lpVtbl -> get_Leader1Point(This,pVal) ) 

#define IGcadDimArcLength_put_Leader1Point(This,pVal)	\
    ( (This)->lpVtbl -> put_Leader1Point(This,pVal) ) 

#define IGcadDimArcLength_get_Leader2Point(This,pVal)	\
    ( (This)->lpVtbl -> get_Leader2Point(This,pVal) ) 

#define IGcadDimArcLength_put_Leader2Point(This,pVal)	\
    ( (This)->lpVtbl -> put_Leader2Point(This,pVal) ) 

#define IGcadDimArcLength_get_IsPartial(This,pVal)	\
    ( (This)->lpVtbl -> get_IsPartial(This,pVal) ) 

#define IGcadDimArcLength_put_IsPartial(This,pVal)	\
    ( (This)->lpVtbl -> put_IsPartial(This,pVal) ) 

#define IGcadDimArcLength_get_ArcStartParam(This,pVal)	\
    ( (This)->lpVtbl -> get_ArcStartParam(This,pVal) ) 

#define IGcadDimArcLength_put_ArcStartParam(This,pVal)	\
    ( (This)->lpVtbl -> put_ArcStartParam(This,pVal) ) 

#define IGcadDimArcLength_get_ArcEndParam(This,pVal)	\
    ( (This)->lpVtbl -> get_ArcEndParam(This,pVal) ) 

#define IGcadDimArcLength_put_ArcEndParam(This,pVal)	\
    ( (This)->lpVtbl -> put_ArcEndParam(This,pVal) ) 

#define IGcadDimArcLength_get_HasLeader(This,pVal)	\
    ( (This)->lpVtbl -> get_HasLeader(This,pVal) ) 

#define IGcadDimArcLength_put_HasLeader(This,pVal)	\
    ( (This)->lpVtbl -> put_HasLeader(This,pVal) ) 

#define IGcadDimArcLength_get_SymbolPosition(This,Position)	\
    ( (This)->lpVtbl -> get_SymbolPosition(This,Position) ) 

#define IGcadDimArcLength_put_SymbolPosition(This,Position)	\
    ( (This)->lpVtbl -> put_SymbolPosition(This,Position) ) 

#define IGcadDimArcLength_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimArcLength_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#define IGcadDimArcLength_get_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimArcLength_put_ExtLine1Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype) ) 

#define IGcadDimArcLength_get_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimArcLength_put_ExtLine2Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype) ) 

#define IGcadDimArcLength_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimArcLength_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen) ) 

#define IGcadDimArcLength_get_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimArcLength_put_ExtLineFixedLen(This,FixedLen)	\
    ( (This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen) ) 

#define IGcadDimArcLength_get_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimArcLength_put_SubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_SubUnitsSuffix(This,suffix) ) 

#define IGcadDimArcLength_get_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_SubUnitsFactor(This,factor) ) 

#define IGcadDimArcLength_put_SubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_SubUnitsFactor(This,factor) ) 

#define IGcadDimArcLength_get_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimArcLength_put_AltSubUnitsSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix) ) 

#define IGcadDimArcLength_get_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> get_AltSubUnitsFactor(This,factor) ) 

#define IGcadDimArcLength_put_AltSubUnitsFactor(This,factor)	\
    ( (This)->lpVtbl -> put_AltSubUnitsFactor(This,factor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltUnitsFormat_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimArcLength_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltTextPrefix_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimArcLength_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltTextPrefix_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimArcLength_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltTextSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimArcLength_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltTextSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimArcLength_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimensionLineColor_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimArcLength_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimensionLineColor_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimArcLength_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtensionLineColor_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimArcLength_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtensionLineColor_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimArcLength_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimArcLength_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimArcLength_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimensionLineExtend_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimArcLength_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimensionLineExtend_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimArcLength_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtensionLineExtend_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *extend);


void __RPC_STUB IGcadDimArcLength_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtensionLineExtend_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double extend);


void __RPC_STUB IGcadDimArcLength_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Fit_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimArcLength_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Fit_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimArcLength_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_FractionFormat_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimArcLength_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_FractionFormat_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimArcLength_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_HorizontalTextPosition_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimHorizontalJustification *Type);


void __RPC_STUB IGcadDimArcLength_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_HorizontalTextPosition_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimHorizontalJustification Type);


void __RPC_STUB IGcadDimArcLength_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_LinearScaleFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimArcLength_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_LinearScaleFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimArcLength_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_UnitsFormat_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimArcLength_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_UnitsFormat_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimArcLength_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtensionLineWeight_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GCAD_LWEIGHT *lweight);


void __RPC_STUB IGcadDimArcLength_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtensionLineWeight_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GCAD_LWEIGHT lweight);


void __RPC_STUB IGcadDimArcLength_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_RoundDistance_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimArcLength_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_RoundDistance_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimArcLength_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimLine1Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimArcLength_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimLine1Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimArcLength_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimLine2Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimArcLength_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimLine2Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimArcLength_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine1Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimArcLength_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine1Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimArcLength_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine2Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimArcLength_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine2Suppress_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimArcLength_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimLineInside_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimArcLength_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimLineInside_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimArcLength_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_TextInsideAlign_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimArcLength_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_TextInsideAlign_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimArcLength_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_TextInside_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimArcLength_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_TextInside_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimArcLength_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ForceLineInside_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimArcLength_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ForceLineInside_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimArcLength_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_TextOutsideAlign_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimArcLength_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_TextOutsideAlign_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimArcLength_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtensionLineOffset_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *Offset);


void __RPC_STUB IGcadDimArcLength_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtensionLineOffset_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double Offset);


void __RPC_STUB IGcadDimArcLength_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_SuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_SuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_SuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_SuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimArcLength_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimArcLength_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimensionLineWeight_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimArcLength_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimensionLineWeight_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimArcLength_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ArrowheadSize_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimArcLength_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ArrowheadSize_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimArcLength_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Arrowhead1Type_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimArcLength_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Arrowhead1Type_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimArcLength_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Arrowhead2Type_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimArcLength_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Arrowhead2Type_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimArcLength_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Measurement_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimArcLength_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Arrowhead1Block_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimArcLength_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Arrowhead1Block_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimArcLength_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Arrowhead2Block_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimArcLength_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Arrowhead2Block_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimArcLength_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ArcPoint_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_ArcPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ArcPoint_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_ArcPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine1Point_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_ExtLine1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine1Point_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_ExtLine1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine2Point_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_ExtLine2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine2Point_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_ExtLine2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_CenterPoint_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_CenterPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_CenterPoint_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_CenterPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Leader1Point_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_Leader1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Leader1Point_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_Leader1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_Leader2Point_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimArcLength_get_Leader2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_Leader2Point_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimArcLength_put_Leader2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_IsPartial_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB IGcadDimArcLength_get_IsPartial_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_IsPartial_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB IGcadDimArcLength_put_IsPartial_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ArcStartParam_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadDimArcLength_get_ArcStartParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ArcStartParam_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadDimArcLength_put_ArcStartParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ArcEndParam_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadDimArcLength_get_ArcEndParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ArcEndParam_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadDimArcLength_put_ArcEndParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_HasLeader_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB IGcadDimArcLength_get_HasLeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_HasLeader_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB IGcadDimArcLength_put_HasLeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_SymbolPosition_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ GcDimArcLengthSymbol *Position);


void __RPC_STUB IGcadDimArcLength_get_SymbolPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_SymbolPosition_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ GcDimArcLengthSymbol Position);


void __RPC_STUB IGcadDimArcLength_put_SymbolPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_DimensionLinetype_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimArcLength_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_DimensionLinetype_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimArcLength_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine1Linetype_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimArcLength_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine1Linetype_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimArcLength_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLine2Linetype_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimArcLength_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLine2Linetype_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimArcLength_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ VARIANT_BOOL *bFixedLen);


void __RPC_STUB IGcadDimArcLength_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLineFixedLenSuppress_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ VARIANT_BOOL bFixedLen);


void __RPC_STUB IGcadDimArcLength_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_ExtLineFixedLen_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *FixedLen);


void __RPC_STUB IGcadDimArcLength_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_ExtLineFixedLen_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double FixedLen);


void __RPC_STUB IGcadDimArcLength_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_SubUnitsSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimArcLength_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_SubUnitsSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimArcLength_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_SubUnitsFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimArcLength_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_SubUnitsFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimArcLength_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSubUnitsSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ BSTR *suffix);


void __RPC_STUB IGcadDimArcLength_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSubUnitsSuffix_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ BSTR suffix);


void __RPC_STUB IGcadDimArcLength_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_get_AltSubUnitsFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [retval][out] */ double *factor);


void __RPC_STUB IGcadDimArcLength_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimArcLength_put_AltSubUnitsFactor_Proxy( 
    IGcadDimArcLength * This,
    /* [in] */ double factor);


void __RPC_STUB IGcadDimArcLength_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimArcLength_INTERFACE_DEFINED__ */


#ifndef __IGcadDimRadialLarge_INTERFACE_DEFINED__
#define __IGcadDimRadialLarge_INTERFACE_DEFINED__

/* interface IGcadDimRadialLarge */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimRadialLarge;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8F45B6C4-4937-4608-AB64-E6E69DC2E858")
    IGcadDimRadialLarge : public IGcadDimension
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnits( 
            /* [retval][out] */ VARIANT_BOOL *bAlternate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnits( 
            /* [in] */ VARIANT_BOOL bAlternate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *precision) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision( 
            /* [in] */ GcDimPrecision precision) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsScale( 
            /* [retval][out] */ GCAD_NOUNITS *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsScale( 
            /* [in] */ GCAD_NOUNITS scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltRoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltRoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision( 
            /* [retval][out] */ GcDimPrecision *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision( 
            /* [in] */ GcDimPrecision Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltUnitsFormat( 
            /* [retval][out] */ GcDimUnits *Units) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltUnitsFormat( 
            /* [in] */ GcDimUnits Units) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextPrefix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltTextSuffix( 
            /* [retval][out] */ BSTR *prefix) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltTextSuffix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterType( 
            /* [retval][out] */ GcDimCenterType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterType( 
            /* [in] */ GcDimCenterType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CenterMarkSize( 
            /* [retval][out] */ double *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CenterMarkSize( 
            /* [in] */ double Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineColor( 
            /* [retval][out] */ GCAD_COLOR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineColor( 
            /* [in] */ GCAD_COLOR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision( 
            /* [retval][out] */ GcDimPrecision *Prec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision( 
            /* [in] */ GcDimPrecision Prec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FractionFormat( 
            /* [retval][out] */ GcDimFractionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FractionFormat( 
            /* [in] */ GcDimFractionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fit( 
            /* [retval][out] */ GcDimFit *fittype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Fit( 
            /* [in] */ GcDimFit fittype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinearScaleFactor( 
            /* [retval][out] */ GCAD_NOUNITS *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinearScaleFactor( 
            /* [in] */ GCAD_NOUNITS Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnitsFormat( 
            /* [retval][out] */ GcDimLUnits *format) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnitsFormat( 
            /* [in] */ GcDimLUnits format) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoundDistance( 
            /* [retval][out] */ double *Distance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RoundDistance( 
            /* [in] */ double Distance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimLineSuppress( 
            /* [retval][out] */ VARIANT_BOOL *bSuppress) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimLineSuppress( 
            /* [in] */ VARIANT_BOOL bSuppress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForceLineInside( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForceLineInside( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextOutsideAlign( 
            /* [retval][out] */ VARIANT_BOOL *bInside) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextOutsideAlign( 
            /* [in] */ VARIANT_BOOL bInside) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches( 
            /* [retval][out] */ VARIANT_BOOL *bVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLineWeight( 
            /* [in] */ GCAD_LWEIGHT weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadType( 
            /* [retval][out] */ GcDimArrowheadType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadType( 
            /* [in] */ GcDimArrowheadType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Measurement( 
            /* [retval][out] */ double *bVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadBlock( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadBlock( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OverrideCenter( 
            /* [retval][out] */ VARIANT *overrideCenterPos) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OverrideCenter( 
            /* [in] */ VARIANT overrideCenterPos) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_JogLocation( 
            /* [retval][out] */ VARIANT *jogPos) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_JogLocation( 
            /* [in] */ VARIANT jogPos) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_JogAngle( 
            /* [retval][out] */ GCAD_ANGLE *JogAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_JogAngle( 
            /* [in] */ GCAD_ANGLE JogAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *pVar) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT pVar) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChordPoint( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChordPoint( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimensionLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DimensionLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimRadialLargeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimRadialLarge * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimRadialLarge * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimRadialLarge * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimRadialLarge * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimRadialLarge * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimRadialLarge * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimRadialLarge * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimRadialLarge * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimRadialLarge * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadDimRadialLarge * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadDimRadialLarge * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadDimRadialLarge * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadDimRadialLarge * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadDimRadialLarge * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *Normal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Normal )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT Normal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *textPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT textPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOverride )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOverride )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR character);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGap )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *Offset);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGap )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double Offset);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *suffix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR suffix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimVerticalJustification *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimVerticalJustification Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *lower);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double lower);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextMovement )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimTextMovement *Move);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextMovement )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimTextMovement Move);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimToleranceMethod *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimToleranceMethod method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimToleranceJustify *method);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimToleranceJustify method);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *upper);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double upper);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFill )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFill )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *pbVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnits )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bAlternate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnits )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bAlternate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimPrecision *precision);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimPrecision precision);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_NOUNITS *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_NOUNITS scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimPrecision *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimPrecision Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimUnits *Units);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimUnits Units);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *prefix);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR prefix);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterType )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimCenterType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterType )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimCenterType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_COLOR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_COLOR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimPrecision *Prec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimPrecision Prec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimFractionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimFractionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fit )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimFit *fittype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Fit )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimFit fittype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_NOUNITS *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_NOUNITS Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimLUnits *format);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimLUnits format);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *Distance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double Distance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimLineSuppress )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bSuppress);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimLineSuppress )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bSuppress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInside )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextInside )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bInside);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bInside);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT_BOOL *bVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_LWEIGHT *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_LWEIGHT weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadDimRadialLarge * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GcDimArrowheadType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GcDimArrowheadType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Measurement )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ double *bVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OverrideCenter )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *overrideCenterPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OverrideCenter )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT overrideCenterPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_JogLocation )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *jogPos);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_JogLocation )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT jogPos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_JogAngle )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ GCAD_ANGLE *JogAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_JogAngle )( 
            IGcadDimRadialLarge * This,
            /* [in] */ GCAD_ANGLE JogAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *pVar);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT pVar);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChordPoint )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChordPoint )( 
            IGcadDimRadialLarge * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )( 
            IGcadDimRadialLarge * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )( 
            IGcadDimRadialLarge * This,
            /* [in] */ BSTR Linetype);
        
        END_INTERFACE
    } IGcadDimRadialLargeVtbl;

    interface IGcadDimRadialLarge
    {
        CONST_VTBL struct IGcadDimRadialLargeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimRadialLarge_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimRadialLarge_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimRadialLarge_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimRadialLarge_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimRadialLarge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimRadialLarge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimRadialLarge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimRadialLarge_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimRadialLarge_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimRadialLarge_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimRadialLarge_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimRadialLarge_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimRadialLarge_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimRadialLarge_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimRadialLarge_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimRadialLarge_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimRadialLarge_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimRadialLarge_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimRadialLarge_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimRadialLarge_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimRadialLarge_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimRadialLarge_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimRadialLarge_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadDimRadialLarge_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadDimRadialLarge_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadDimRadialLarge_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadDimRadialLarge_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadDimRadialLarge_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadDimRadialLarge_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadDimRadialLarge_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadDimRadialLarge_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadDimRadialLarge_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadDimRadialLarge_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadDimRadialLarge_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadDimRadialLarge_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadDimRadialLarge_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadDimRadialLarge_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadDimRadialLarge_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadDimRadialLarge_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadDimRadialLarge_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadDimRadialLarge_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadDimRadialLarge_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadDimRadialLarge_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadDimRadialLarge_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadDimRadialLarge_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadDimRadialLarge_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadDimRadialLarge_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRadialLarge_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadDimRadialLarge_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadDimRadialLarge_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadDimRadialLarge_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadDimRadialLarge_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadDimRadialLarge_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadDimRadialLarge_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadDimRadialLarge_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadDimRadialLarge_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadDimRadialLarge_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadDimRadialLarge_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadDimRadialLarge_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadDimRadialLarge_get_Normal(This,Normal)	\
    ( (This)->lpVtbl -> get_Normal(This,Normal) ) 

#define IGcadDimRadialLarge_put_Normal(This,Normal)	\
    ( (This)->lpVtbl -> put_Normal(This,Normal) ) 

#define IGcadDimRadialLarge_get_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_Rotation(This,rotAngle) ) 

#define IGcadDimRadialLarge_put_Rotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_Rotation(This,rotAngle) ) 

#define IGcadDimRadialLarge_get_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> get_TextPosition(This,textPos) ) 

#define IGcadDimRadialLarge_put_TextPosition(This,textPos)	\
    ( (This)->lpVtbl -> put_TextPosition(This,textPos) ) 

#define IGcadDimRadialLarge_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadDimRadialLarge_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadDimRadialLarge_get_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextOverride(This,bstrText) ) 

#define IGcadDimRadialLarge_put_TextOverride(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextOverride(This,bstrText) ) 

#define IGcadDimRadialLarge_get_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_StyleName(This,bstrName) ) 

#define IGcadDimRadialLarge_put_StyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_StyleName(This,bstrName) ) 

#define IGcadDimRadialLarge_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadDimRadialLarge_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadDimRadialLarge_get_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> get_DecimalSeparator(This,character) ) 

#define IGcadDimRadialLarge_put_DecimalSeparator(This,character)	\
    ( (This)->lpVtbl -> put_DecimalSeparator(This,character) ) 

#define IGcadDimRadialLarge_get_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> get_TextGap(This,Offset) ) 

#define IGcadDimRadialLarge_put_TextGap(This,Offset)	\
    ( (This)->lpVtbl -> put_TextGap(This,Offset) ) 

#define IGcadDimRadialLarge_get_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_TextPrefix(This,prefix) ) 

#define IGcadDimRadialLarge_put_TextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_TextPrefix(This,prefix) ) 

#define IGcadDimRadialLarge_get_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> get_TextSuffix(This,suffix) ) 

#define IGcadDimRadialLarge_put_TextSuffix(This,suffix)	\
    ( (This)->lpVtbl -> put_TextSuffix(This,suffix) ) 

#define IGcadDimRadialLarge_get_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,factor) ) 

#define IGcadDimRadialLarge_put_ScaleFactor(This,factor)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,factor) ) 

#define IGcadDimRadialLarge_get_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> get_VerticalTextPosition(This,Type) ) 

#define IGcadDimRadialLarge_put_VerticalTextPosition(This,Type)	\
    ( (This)->lpVtbl -> put_VerticalTextPosition(This,Type) ) 

#define IGcadDimRadialLarge_get_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> get_TolerancePrecision(This,precision) ) 

#define IGcadDimRadialLarge_put_TolerancePrecision(This,precision)	\
    ( (This)->lpVtbl -> put_TolerancePrecision(This,precision) ) 

#define IGcadDimRadialLarge_get_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> get_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRadialLarge_put_ToleranceHeightScale(This,scale)	\
    ( (This)->lpVtbl -> put_ToleranceHeightScale(This,scale) ) 

#define IGcadDimRadialLarge_get_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> get_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRadialLarge_put_ToleranceLowerLimit(This,lower)	\
    ( (This)->lpVtbl -> put_ToleranceLowerLimit(This,lower) ) 

#define IGcadDimRadialLarge_get_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> get_TextMovement(This,Move) ) 

#define IGcadDimRadialLarge_put_TextMovement(This,Move)	\
    ( (This)->lpVtbl -> put_TextMovement(This,Move) ) 

#define IGcadDimRadialLarge_get_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceDisplay(This,method) ) 

#define IGcadDimRadialLarge_put_ToleranceDisplay(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceDisplay(This,method) ) 

#define IGcadDimRadialLarge_get_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> get_ToleranceJustification(This,method) ) 

#define IGcadDimRadialLarge_put_ToleranceJustification(This,method)	\
    ( (This)->lpVtbl -> put_ToleranceJustification(This,method) ) 

#define IGcadDimRadialLarge_get_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> get_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRadialLarge_put_ToleranceUpperLimit(This,upper)	\
    ( (This)->lpVtbl -> put_ToleranceUpperLimit(This,upper) ) 

#define IGcadDimRadialLarge_get_TextStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextStyle(This,style) ) 

#define IGcadDimRadialLarge_put_TextStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextStyle(This,style) ) 

#define IGcadDimRadialLarge_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadDimRadialLarge_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadDimRadialLarge_get_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_SuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_SuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> get_TextFill(This,bVal) ) 

#define IGcadDimRadialLarge_put_TextFill(This,bVal)	\
    ( (This)->lpVtbl -> put_TextFill(This,bVal) ) 

#define IGcadDimRadialLarge_get_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> get_TextFillColor(This,color) ) 

#define IGcadDimRadialLarge_put_TextFillColor(This,color)	\
    ( (This)->lpVtbl -> put_TextFillColor(This,color) ) 

#define IGcadDimRadialLarge_get_DimTxtDirection(This,pbVal)	\
    ( (This)->lpVtbl -> get_DimTxtDirection(This,pbVal) ) 

#define IGcadDimRadialLarge_put_DimTxtDirection(This,bVal)	\
    ( (This)->lpVtbl -> put_DimTxtDirection(This,bVal) ) 


#define IGcadDimRadialLarge_get_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> get_AltUnits(This,bAlternate) ) 

#define IGcadDimRadialLarge_put_AltUnits(This,bAlternate)	\
    ( (This)->lpVtbl -> put_AltUnits(This,bAlternate) ) 

#define IGcadDimRadialLarge_get_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> get_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRadialLarge_put_AltUnitsPrecision(This,precision)	\
    ( (This)->lpVtbl -> put_AltUnitsPrecision(This,precision) ) 

#define IGcadDimRadialLarge_get_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> get_AltUnitsScale(This,scale) ) 

#define IGcadDimRadialLarge_put_AltUnitsScale(This,scale)	\
    ( (This)->lpVtbl -> put_AltUnitsScale(This,scale) ) 

#define IGcadDimRadialLarge_get_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_AltRoundDistance(This,Distance) ) 

#define IGcadDimRadialLarge_put_AltRoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_AltRoundDistance(This,Distance) ) 

#define IGcadDimRadialLarge_get_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> get_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRadialLarge_put_AltTolerancePrecision(This,Distance)	\
    ( (This)->lpVtbl -> put_AltTolerancePrecision(This,Distance) ) 

#define IGcadDimRadialLarge_get_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> get_AltUnitsFormat(This,Units) ) 

#define IGcadDimRadialLarge_put_AltUnitsFormat(This,Units)	\
    ( (This)->lpVtbl -> put_AltUnitsFormat(This,Units) ) 

#define IGcadDimRadialLarge_get_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextPrefix(This,prefix) ) 

#define IGcadDimRadialLarge_put_AltTextPrefix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextPrefix(This,prefix) ) 

#define IGcadDimRadialLarge_get_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> get_AltTextSuffix(This,prefix) ) 

#define IGcadDimRadialLarge_put_AltTextSuffix(This,prefix)	\
    ( (This)->lpVtbl -> put_AltTextSuffix(This,prefix) ) 

#define IGcadDimRadialLarge_get_CenterType(This,Type)	\
    ( (This)->lpVtbl -> get_CenterType(This,Type) ) 

#define IGcadDimRadialLarge_put_CenterType(This,Type)	\
    ( (This)->lpVtbl -> put_CenterType(This,Type) ) 

#define IGcadDimRadialLarge_get_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> get_CenterMarkSize(This,Type) ) 

#define IGcadDimRadialLarge_put_CenterMarkSize(This,Type)	\
    ( (This)->lpVtbl -> put_CenterMarkSize(This,Type) ) 

#define IGcadDimRadialLarge_get_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_DimensionLineColor(This,Type) ) 

#define IGcadDimRadialLarge_put_DimensionLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_DimensionLineColor(This,Type) ) 

#define IGcadDimRadialLarge_get_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRadialLarge_put_PrimaryUnitsPrecision(This,Prec)	\
    ( (This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec) ) 

#define IGcadDimRadialLarge_get_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> get_FractionFormat(This,Type) ) 

#define IGcadDimRadialLarge_put_FractionFormat(This,Type)	\
    ( (This)->lpVtbl -> put_FractionFormat(This,Type) ) 

#define IGcadDimRadialLarge_get_Fit(This,fittype)	\
    ( (This)->lpVtbl -> get_Fit(This,fittype) ) 

#define IGcadDimRadialLarge_put_Fit(This,fittype)	\
    ( (This)->lpVtbl -> put_Fit(This,fittype) ) 

#define IGcadDimRadialLarge_get_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> get_LinearScaleFactor(This,Type) ) 

#define IGcadDimRadialLarge_put_LinearScaleFactor(This,Type)	\
    ( (This)->lpVtbl -> put_LinearScaleFactor(This,Type) ) 

#define IGcadDimRadialLarge_get_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> get_UnitsFormat(This,format) ) 

#define IGcadDimRadialLarge_put_UnitsFormat(This,format)	\
    ( (This)->lpVtbl -> put_UnitsFormat(This,format) ) 

#define IGcadDimRadialLarge_get_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> get_RoundDistance(This,Distance) ) 

#define IGcadDimRadialLarge_put_RoundDistance(This,Distance)	\
    ( (This)->lpVtbl -> put_RoundDistance(This,Distance) ) 

#define IGcadDimRadialLarge_get_DimLineSuppress(This,bSuppress)	\
    ( (This)->lpVtbl -> get_DimLineSuppress(This,bSuppress) ) 

#define IGcadDimRadialLarge_put_DimLineSuppress(This,bSuppress)	\
    ( (This)->lpVtbl -> put_DimLineSuppress(This,bSuppress) ) 

#define IGcadDimRadialLarge_get_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInsideAlign(This,bInside) ) 

#define IGcadDimRadialLarge_put_TextInsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInsideAlign(This,bInside) ) 

#define IGcadDimRadialLarge_get_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> get_TextInside(This,bInside) ) 

#define IGcadDimRadialLarge_put_TextInside(This,bInside)	\
    ( (This)->lpVtbl -> put_TextInside(This,bInside) ) 

#define IGcadDimRadialLarge_get_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> get_ForceLineInside(This,bInside) ) 

#define IGcadDimRadialLarge_put_ForceLineInside(This,bInside)	\
    ( (This)->lpVtbl -> put_ForceLineInside(This,bInside) ) 

#define IGcadDimRadialLarge_get_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> get_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRadialLarge_put_TextOutsideAlign(This,bInside)	\
    ( (This)->lpVtbl -> put_TextOutsideAlign(This,bInside) ) 

#define IGcadDimRadialLarge_get_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_get_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_put_SuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_get_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_put_SuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_SuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal) ) 

#define IGcadDimRadialLarge_get_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_put_ToleranceSuppressZeroInches(This,bVal)	\
    ( (This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal) ) 

#define IGcadDimRadialLarge_get_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_DimensionLineWeight(This,weight) ) 

#define IGcadDimRadialLarge_put_DimensionLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_DimensionLineWeight(This,weight) ) 

#define IGcadDimRadialLarge_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadDimRadialLarge_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadDimRadialLarge_get_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> get_ArrowheadType(This,Type) ) 

#define IGcadDimRadialLarge_put_ArrowheadType(This,Type)	\
    ( (This)->lpVtbl -> put_ArrowheadType(This,Type) ) 

#define IGcadDimRadialLarge_get_Measurement(This,bVal)	\
    ( (This)->lpVtbl -> get_Measurement(This,bVal) ) 

#define IGcadDimRadialLarge_get_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> get_ArrowheadBlock(This,BlockName) ) 

#define IGcadDimRadialLarge_put_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> put_ArrowheadBlock(This,BlockName) ) 

#define IGcadDimRadialLarge_get_OverrideCenter(This,overrideCenterPos)	\
    ( (This)->lpVtbl -> get_OverrideCenter(This,overrideCenterPos) ) 

#define IGcadDimRadialLarge_put_OverrideCenter(This,overrideCenterPos)	\
    ( (This)->lpVtbl -> put_OverrideCenter(This,overrideCenterPos) ) 

#define IGcadDimRadialLarge_get_JogLocation(This,jogPos)	\
    ( (This)->lpVtbl -> get_JogLocation(This,jogPos) ) 

#define IGcadDimRadialLarge_put_JogLocation(This,jogPos)	\
    ( (This)->lpVtbl -> put_JogLocation(This,jogPos) ) 

#define IGcadDimRadialLarge_get_JogAngle(This,JogAngle)	\
    ( (This)->lpVtbl -> get_JogAngle(This,JogAngle) ) 

#define IGcadDimRadialLarge_put_JogAngle(This,JogAngle)	\
    ( (This)->lpVtbl -> put_JogAngle(This,JogAngle) ) 

#define IGcadDimRadialLarge_get_Center(This,pVar)	\
    ( (This)->lpVtbl -> get_Center(This,pVar) ) 

#define IGcadDimRadialLarge_put_Center(This,pVar)	\
    ( (This)->lpVtbl -> put_Center(This,pVar) ) 

#define IGcadDimRadialLarge_get_ChordPoint(This,pVal)	\
    ( (This)->lpVtbl -> get_ChordPoint(This,pVal) ) 

#define IGcadDimRadialLarge_put_ChordPoint(This,pVal)	\
    ( (This)->lpVtbl -> put_ChordPoint(This,pVal) ) 

#define IGcadDimRadialLarge_get_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_DimensionLinetype(This,Linetype) ) 

#define IGcadDimRadialLarge_put_DimensionLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_DimensionLinetype(This,Linetype) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltUnitsFormat_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimUnits Units);


void __RPC_STUB IGcadDimRadialLarge_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltTextPrefix_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRadialLarge_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltTextPrefix_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRadialLarge_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltTextSuffix_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ BSTR *prefix);


void __RPC_STUB IGcadDimRadialLarge_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltTextSuffix_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ BSTR prefix);


void __RPC_STUB IGcadDimRadialLarge_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_CenterType_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimCenterType *Type);


void __RPC_STUB IGcadDimRadialLarge_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_CenterType_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimCenterType Type);


void __RPC_STUB IGcadDimRadialLarge_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_CenterMarkSize_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ double *Type);


void __RPC_STUB IGcadDimRadialLarge_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_CenterMarkSize_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ double Type);


void __RPC_STUB IGcadDimRadialLarge_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_DimensionLineColor_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GCAD_COLOR *Type);


void __RPC_STUB IGcadDimRadialLarge_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_DimensionLineColor_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GCAD_COLOR Type);


void __RPC_STUB IGcadDimRadialLarge_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimPrecision *Prec);


void __RPC_STUB IGcadDimRadialLarge_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_PrimaryUnitsPrecision_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimPrecision Prec);


void __RPC_STUB IGcadDimRadialLarge_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_FractionFormat_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimFractionType *Type);


void __RPC_STUB IGcadDimRadialLarge_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_FractionFormat_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimFractionType Type);


void __RPC_STUB IGcadDimRadialLarge_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_Fit_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimFit *fittype);


void __RPC_STUB IGcadDimRadialLarge_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_Fit_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimFit fittype);


void __RPC_STUB IGcadDimRadialLarge_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_LinearScaleFactor_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GCAD_NOUNITS *Type);


void __RPC_STUB IGcadDimRadialLarge_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_LinearScaleFactor_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GCAD_NOUNITS Type);


void __RPC_STUB IGcadDimRadialLarge_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_UnitsFormat_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimLUnits *format);


void __RPC_STUB IGcadDimRadialLarge_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_UnitsFormat_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimLUnits format);


void __RPC_STUB IGcadDimRadialLarge_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_RoundDistance_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ double *Distance);


void __RPC_STUB IGcadDimRadialLarge_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_RoundDistance_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ double Distance);


void __RPC_STUB IGcadDimRadialLarge_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_DimLineSuppress_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bSuppress);


void __RPC_STUB IGcadDimRadialLarge_get_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_DimLineSuppress_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bSuppress);


void __RPC_STUB IGcadDimRadialLarge_put_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_TextInsideAlign_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadialLarge_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_TextInsideAlign_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadialLarge_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_TextInside_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadialLarge_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_TextInside_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadialLarge_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ForceLineInside_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadialLarge_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ForceLineInside_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadialLarge_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_TextOutsideAlign_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bInside);


void __RPC_STUB IGcadDimRadialLarge_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_TextOutsideAlign_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bInside);


void __RPC_STUB IGcadDimRadialLarge_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltSuppressLeadingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltSuppressTrailingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_AltToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_SuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_SuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_SuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_SuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ToleranceSuppressZeroFeet_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT_BOOL *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ToleranceSuppressZeroInches_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT_BOOL bVal);


void __RPC_STUB IGcadDimRadialLarge_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_DimensionLineWeight_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GCAD_LWEIGHT *weight);


void __RPC_STUB IGcadDimRadialLarge_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_DimensionLineWeight_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GCAD_LWEIGHT weight);


void __RPC_STUB IGcadDimRadialLarge_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ArrowheadSize_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ double *size);


void __RPC_STUB IGcadDimRadialLarge_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ArrowheadSize_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ double size);


void __RPC_STUB IGcadDimRadialLarge_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ArrowheadType_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GcDimArrowheadType *Type);


void __RPC_STUB IGcadDimRadialLarge_get_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ArrowheadType_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GcDimArrowheadType Type);


void __RPC_STUB IGcadDimRadialLarge_put_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_Measurement_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ double *bVal);


void __RPC_STUB IGcadDimRadialLarge_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ArrowheadBlock_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ BSTR *BlockName);


void __RPC_STUB IGcadDimRadialLarge_get_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ArrowheadBlock_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ BSTR BlockName);


void __RPC_STUB IGcadDimRadialLarge_put_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_OverrideCenter_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT *overrideCenterPos);


void __RPC_STUB IGcadDimRadialLarge_get_OverrideCenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_OverrideCenter_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT overrideCenterPos);


void __RPC_STUB IGcadDimRadialLarge_put_OverrideCenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_JogLocation_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT *jogPos);


void __RPC_STUB IGcadDimRadialLarge_get_JogLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_JogLocation_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT jogPos);


void __RPC_STUB IGcadDimRadialLarge_put_JogLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_JogAngle_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ GCAD_ANGLE *JogAngle);


void __RPC_STUB IGcadDimRadialLarge_get_JogAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_JogAngle_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ GCAD_ANGLE JogAngle);


void __RPC_STUB IGcadDimRadialLarge_put_JogAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_Center_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT *pVar);


void __RPC_STUB IGcadDimRadialLarge_get_Center_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_Center_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT pVar);


void __RPC_STUB IGcadDimRadialLarge_put_Center_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_ChordPoint_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IGcadDimRadialLarge_get_ChordPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_ChordPoint_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ VARIANT pVal);


void __RPC_STUB IGcadDimRadialLarge_put_ChordPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_get_DimensionLinetype_Proxy( 
    IGcadDimRadialLarge * This,
    /* [retval][out] */ BSTR *Linetype);


void __RPC_STUB IGcadDimRadialLarge_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadDimRadialLarge_put_DimensionLinetype_Proxy( 
    IGcadDimRadialLarge * This,
    /* [in] */ BSTR Linetype);


void __RPC_STUB IGcadDimRadialLarge_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadDimRadialLarge_INTERFACE_DEFINED__ */


#ifndef __IGcadSection_INTERFACE_DEFINED__
#define __IGcadSection_INTERFACE_DEFINED__

/* interface IGcadSection */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("39AAE246-E826-4239-9B6F-4C1BE284F480")
    IGcadSection : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pbstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ GcSectionState *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_State( 
            /* [in] */ GcSectionState pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewingDirection( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewingDirection( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalDirection( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalDirection( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LiveSectionEnabled( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LiveSectionEnabled( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndicatorTransparency( 
            /* [retval][out] */ int *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndicatorTransparency( 
            /* [in] */ int pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndicatorFillColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndicatorFillColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopHeight( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopHeight( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomHeight( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomHeight( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumVertices( 
            /* [retval][out] */ int *pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertices( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Vertices( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddVertex( 
            /* [in] */ int nIndex,
            /* [in] */ VARIANT val) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveVertex( 
            /* [in] */ int nIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE HitTest( 
            /* [in] */ VARIANT varPtHit,
            /* [out] */ VARIANT_BOOL *pHit,
            /* [out] */ int *pSegmentIndex,
            /* [out] */ VARIANT *pPtOnSegment,
            /* [out] */ GcSectionSubItem *pSubItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateJog( 
            /* [in] */ VARIANT varPt) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Settings( 
            /* [retval][out] */ IGcadSectionSettings **pUnk) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateSectionGeometry( 
            /* [in] */ IGcadEntity *pEntity,
            /* [out] */ VARIANT *pIntersectionBoundaryObjs,
            /* [out] */ VARIANT *pIntersectionFillObjs,
            /* [out] */ VARIANT *pBackgroudnObjs,
            /* [out] */ VARIANT *pForegroudObjs,
            /* [out] */ VARIANT *pCurveTangencyObjs) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSection * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSection * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSection * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSection * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSection * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSection * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSection * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSection * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSection * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSection * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSection * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSection * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSection * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSection * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSection * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSection * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSection * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSection * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSection * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSection * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSection * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSection * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSection * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSection * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSection * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSection * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSection * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSection * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSection * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSection * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSection * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSection * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSection * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSection * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSection * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSection * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSection * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSection * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSection * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadSection * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadSection * This,
            /* [in] */ BSTR pbstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            IGcadSection * This,
            /* [retval][out] */ GcSectionState *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_State )( 
            IGcadSection * This,
            /* [in] */ GcSectionState pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewingDirection )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewingDirection )( 
            IGcadSection * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalDirection )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalDirection )( 
            IGcadSection * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LiveSectionEnabled )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LiveSectionEnabled )( 
            IGcadSection * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndicatorTransparency )( 
            IGcadSection * This,
            /* [retval][out] */ int *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndicatorTransparency )( 
            IGcadSection * This,
            /* [in] */ int pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndicatorFillColor )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndicatorFillColor )( 
            IGcadSection * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            IGcadSection * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            IGcadSection * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopHeight )( 
            IGcadSection * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopHeight )( 
            IGcadSection * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomHeight )( 
            IGcadSection * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomHeight )( 
            IGcadSection * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumVertices )( 
            IGcadSection * This,
            /* [retval][out] */ int *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            IGcadSection * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Vertices )( 
            IGcadSection * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadSection * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadSection * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddVertex )( 
            IGcadSection * This,
            /* [in] */ int nIndex,
            /* [in] */ VARIANT val);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveVertex )( 
            IGcadSection * This,
            /* [in] */ int nIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            IGcadSection * This,
            /* [in] */ VARIANT varPtHit,
            /* [out] */ VARIANT_BOOL *pHit,
            /* [out] */ int *pSegmentIndex,
            /* [out] */ VARIANT *pPtOnSegment,
            /* [out] */ GcSectionSubItem *pSubItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateJog )( 
            IGcadSection * This,
            /* [in] */ VARIANT varPt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            IGcadSection * This,
            /* [retval][out] */ IGcadSectionSettings **pUnk);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateSectionGeometry )( 
            IGcadSection * This,
            /* [in] */ IGcadEntity *pEntity,
            /* [out] */ VARIANT *pIntersectionBoundaryObjs,
            /* [out] */ VARIANT *pIntersectionFillObjs,
            /* [out] */ VARIANT *pBackgroudnObjs,
            /* [out] */ VARIANT *pForegroudObjs,
            /* [out] */ VARIANT *pCurveTangencyObjs);
        
        END_INTERFACE
    } IGcadSectionVtbl;

    interface IGcadSection
    {
        CONST_VTBL struct IGcadSectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSection_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSection_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSection_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSection_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSection_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSection_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSection_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSection_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSection_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSection_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSection_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSection_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSection_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSection_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSection_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSection_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSection_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSection_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSection_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSection_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSection_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSection_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSection_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSection_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSection_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSection_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSection_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSection_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSection_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSection_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSection_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSection_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSection_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSection_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSection_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSection_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSection_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSection_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSection_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSection_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSection_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSection_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSection_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSection_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSection_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSection_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSection_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSection_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSection_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSection_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSection_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSection_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSection_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define IGcadSection_put_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> put_Name(This,pbstrName) ) 

#define IGcadSection_get_State(This,pVal)	\
    ( (This)->lpVtbl -> get_State(This,pVal) ) 

#define IGcadSection_put_State(This,pVal)	\
    ( (This)->lpVtbl -> put_State(This,pVal) ) 

#define IGcadSection_get_ViewingDirection(This,pVal)	\
    ( (This)->lpVtbl -> get_ViewingDirection(This,pVal) ) 

#define IGcadSection_put_ViewingDirection(This,pVal)	\
    ( (This)->lpVtbl -> put_ViewingDirection(This,pVal) ) 

#define IGcadSection_get_VerticalDirection(This,pVal)	\
    ( (This)->lpVtbl -> get_VerticalDirection(This,pVal) ) 

#define IGcadSection_put_VerticalDirection(This,pVal)	\
    ( (This)->lpVtbl -> put_VerticalDirection(This,pVal) ) 

#define IGcadSection_get_Normal(This,pVal)	\
    ( (This)->lpVtbl -> get_Normal(This,pVal) ) 

#define IGcadSection_get_LiveSectionEnabled(This,pVal)	\
    ( (This)->lpVtbl -> get_LiveSectionEnabled(This,pVal) ) 

#define IGcadSection_put_LiveSectionEnabled(This,pVal)	\
    ( (This)->lpVtbl -> put_LiveSectionEnabled(This,pVal) ) 

#define IGcadSection_get_IndicatorTransparency(This,pVal)	\
    ( (This)->lpVtbl -> get_IndicatorTransparency(This,pVal) ) 

#define IGcadSection_put_IndicatorTransparency(This,pVal)	\
    ( (This)->lpVtbl -> put_IndicatorTransparency(This,pVal) ) 

#define IGcadSection_get_IndicatorFillColor(This,pColor)	\
    ( (This)->lpVtbl -> get_IndicatorFillColor(This,pColor) ) 

#define IGcadSection_put_IndicatorFillColor(This,pColor)	\
    ( (This)->lpVtbl -> put_IndicatorFillColor(This,pColor) ) 

#define IGcadSection_get_Elevation(This,pVal)	\
    ( (This)->lpVtbl -> get_Elevation(This,pVal) ) 

#define IGcadSection_put_Elevation(This,pVal)	\
    ( (This)->lpVtbl -> put_Elevation(This,pVal) ) 

#define IGcadSection_get_TopHeight(This,pVal)	\
    ( (This)->lpVtbl -> get_TopHeight(This,pVal) ) 

#define IGcadSection_put_TopHeight(This,pVal)	\
    ( (This)->lpVtbl -> put_TopHeight(This,pVal) ) 

#define IGcadSection_get_BottomHeight(This,pVal)	\
    ( (This)->lpVtbl -> get_BottomHeight(This,pVal) ) 

#define IGcadSection_put_BottomHeight(This,pVal)	\
    ( (This)->lpVtbl -> put_BottomHeight(This,pVal) ) 

#define IGcadSection_get_NumVertices(This,pVal)	\
    ( (This)->lpVtbl -> get_NumVertices(This,pVal) ) 

#define IGcadSection_get_Vertices(This,pVal)	\
    ( (This)->lpVtbl -> get_Vertices(This,pVal) ) 

#define IGcadSection_put_Vertices(This,pVal)	\
    ( (This)->lpVtbl -> put_Vertices(This,pVal) ) 

#define IGcadSection_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadSection_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadSection_AddVertex(This,nIndex,val)	\
    ( (This)->lpVtbl -> AddVertex(This,nIndex,val) ) 

#define IGcadSection_RemoveVertex(This,nIndex)	\
    ( (This)->lpVtbl -> RemoveVertex(This,nIndex) ) 

#define IGcadSection_HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem)	\
    ( (This)->lpVtbl -> HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem) ) 

#define IGcadSection_CreateJog(This,varPt)	\
    ( (This)->lpVtbl -> CreateJog(This,varPt) ) 

#define IGcadSection_get_Settings(This,pUnk)	\
    ( (This)->lpVtbl -> get_Settings(This,pUnk) ) 

#define IGcadSection_GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs)	\
    ( (This)->lpVtbl -> GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSection_INTERFACE_DEFINED__ */


#ifndef __IGcadSection2_INTERFACE_DEFINED__
#define __IGcadSection2_INTERFACE_DEFINED__

/* interface IGcadSection2 */
/* [object][oleautomation][dual][helpstring][uuid] */ 


EXTERN_C const IID IID_IGcadSection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("62DD5C53-F325-40BA-9F0E-F8F224D5DA51")
    IGcadSection2 : public IGcadSection
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_State2( 
            /* [retval][out] */ GcSectionState2 *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_State2( 
            /* [in] */ GcSectionState2 pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SliceDepth( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SliceDepth( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionPlaneOffset( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SectionPlaneOffset( 
            /* [in] */ double pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSection2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSection2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSection2 * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSection2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSection2 * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSection2 * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSection2 * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSection2 * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSection2 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSection2 * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSection2 * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSection2 * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSection2 * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSection2 * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSection2 * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSection2 * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSection2 * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSection2 * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSection2 * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSection2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSection2 * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSection2 * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSection2 * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSection2 * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSection2 * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSection2 * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSection2 * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSection2 * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSection2 * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSection2 * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadSection2 * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadSection2 * This,
            /* [in] */ BSTR pbstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            IGcadSection2 * This,
            /* [retval][out] */ GcSectionState *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_State )( 
            IGcadSection2 * This,
            /* [in] */ GcSectionState pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewingDirection )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewingDirection )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalDirection )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalDirection )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LiveSectionEnabled )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LiveSectionEnabled )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndicatorTransparency )( 
            IGcadSection2 * This,
            /* [retval][out] */ int *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndicatorTransparency )( 
            IGcadSection2 * This,
            /* [in] */ int pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndicatorFillColor )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndicatorFillColor )( 
            IGcadSection2 * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            IGcadSection2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            IGcadSection2 * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopHeight )( 
            IGcadSection2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopHeight )( 
            IGcadSection2 * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomHeight )( 
            IGcadSection2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomHeight )( 
            IGcadSection2 * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumVertices )( 
            IGcadSection2 * This,
            /* [retval][out] */ int *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            IGcadSection2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Vertices )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadSection2 * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadSection2 * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddVertex )( 
            IGcadSection2 * This,
            /* [in] */ int nIndex,
            /* [in] */ VARIANT val);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveVertex )( 
            IGcadSection2 * This,
            /* [in] */ int nIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT varPtHit,
            /* [out] */ VARIANT_BOOL *pHit,
            /* [out] */ int *pSegmentIndex,
            /* [out] */ VARIANT *pPtOnSegment,
            /* [out] */ GcSectionSubItem *pSubItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateJog )( 
            IGcadSection2 * This,
            /* [in] */ VARIANT varPt);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            IGcadSection2 * This,
            /* [retval][out] */ IGcadSectionSettings **pUnk);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateSectionGeometry )( 
            IGcadSection2 * This,
            /* [in] */ IGcadEntity *pEntity,
            /* [out] */ VARIANT *pIntersectionBoundaryObjs,
            /* [out] */ VARIANT *pIntersectionFillObjs,
            /* [out] */ VARIANT *pBackgroudnObjs,
            /* [out] */ VARIANT *pForegroudObjs,
            /* [out] */ VARIANT *pCurveTangencyObjs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State2 )( 
            IGcadSection2 * This,
            /* [retval][out] */ GcSectionState2 *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_State2 )( 
            IGcadSection2 * This,
            /* [in] */ GcSectionState2 pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SliceDepth )( 
            IGcadSection2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SliceDepth )( 
            IGcadSection2 * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionPlaneOffset )( 
            IGcadSection2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SectionPlaneOffset )( 
            IGcadSection2 * This,
            /* [in] */ double pVal);
        
        END_INTERFACE
    } IGcadSection2Vtbl;

    interface IGcadSection2
    {
        CONST_VTBL struct IGcadSection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSection2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSection2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSection2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSection2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSection2_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSection2_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSection2_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSection2_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSection2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSection2_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSection2_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSection2_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSection2_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSection2_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSection2_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSection2_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSection2_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSection2_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSection2_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSection2_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSection2_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSection2_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSection2_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSection2_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSection2_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSection2_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSection2_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSection2_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSection2_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSection2_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSection2_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSection2_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSection2_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSection2_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSection2_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSection2_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSection2_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSection2_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSection2_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSection2_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSection2_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSection2_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSection2_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSection2_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSection2_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSection2_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSection2_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSection2_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSection2_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSection2_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSection2_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSection2_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSection2_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSection2_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSection2_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSection2_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSection2_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define IGcadSection2_put_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> put_Name(This,pbstrName) ) 

#define IGcadSection2_get_State(This,pVal)	\
    ( (This)->lpVtbl -> get_State(This,pVal) ) 

#define IGcadSection2_put_State(This,pVal)	\
    ( (This)->lpVtbl -> put_State(This,pVal) ) 

#define IGcadSection2_get_ViewingDirection(This,pVal)	\
    ( (This)->lpVtbl -> get_ViewingDirection(This,pVal) ) 

#define IGcadSection2_put_ViewingDirection(This,pVal)	\
    ( (This)->lpVtbl -> put_ViewingDirection(This,pVal) ) 

#define IGcadSection2_get_VerticalDirection(This,pVal)	\
    ( (This)->lpVtbl -> get_VerticalDirection(This,pVal) ) 

#define IGcadSection2_put_VerticalDirection(This,pVal)	\
    ( (This)->lpVtbl -> put_VerticalDirection(This,pVal) ) 

#define IGcadSection2_get_Normal(This,pVal)	\
    ( (This)->lpVtbl -> get_Normal(This,pVal) ) 

#define IGcadSection2_get_LiveSectionEnabled(This,pVal)	\
    ( (This)->lpVtbl -> get_LiveSectionEnabled(This,pVal) ) 

#define IGcadSection2_put_LiveSectionEnabled(This,pVal)	\
    ( (This)->lpVtbl -> put_LiveSectionEnabled(This,pVal) ) 

#define IGcadSection2_get_IndicatorTransparency(This,pVal)	\
    ( (This)->lpVtbl -> get_IndicatorTransparency(This,pVal) ) 

#define IGcadSection2_put_IndicatorTransparency(This,pVal)	\
    ( (This)->lpVtbl -> put_IndicatorTransparency(This,pVal) ) 

#define IGcadSection2_get_IndicatorFillColor(This,pColor)	\
    ( (This)->lpVtbl -> get_IndicatorFillColor(This,pColor) ) 

#define IGcadSection2_put_IndicatorFillColor(This,pColor)	\
    ( (This)->lpVtbl -> put_IndicatorFillColor(This,pColor) ) 

#define IGcadSection2_get_Elevation(This,pVal)	\
    ( (This)->lpVtbl -> get_Elevation(This,pVal) ) 

#define IGcadSection2_put_Elevation(This,pVal)	\
    ( (This)->lpVtbl -> put_Elevation(This,pVal) ) 

#define IGcadSection2_get_TopHeight(This,pVal)	\
    ( (This)->lpVtbl -> get_TopHeight(This,pVal) ) 

#define IGcadSection2_put_TopHeight(This,pVal)	\
    ( (This)->lpVtbl -> put_TopHeight(This,pVal) ) 

#define IGcadSection2_get_BottomHeight(This,pVal)	\
    ( (This)->lpVtbl -> get_BottomHeight(This,pVal) ) 

#define IGcadSection2_put_BottomHeight(This,pVal)	\
    ( (This)->lpVtbl -> put_BottomHeight(This,pVal) ) 

#define IGcadSection2_get_NumVertices(This,pVal)	\
    ( (This)->lpVtbl -> get_NumVertices(This,pVal) ) 

#define IGcadSection2_get_Vertices(This,pVal)	\
    ( (This)->lpVtbl -> get_Vertices(This,pVal) ) 

#define IGcadSection2_put_Vertices(This,pVal)	\
    ( (This)->lpVtbl -> put_Vertices(This,pVal) ) 

#define IGcadSection2_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadSection2_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadSection2_AddVertex(This,nIndex,val)	\
    ( (This)->lpVtbl -> AddVertex(This,nIndex,val) ) 

#define IGcadSection2_RemoveVertex(This,nIndex)	\
    ( (This)->lpVtbl -> RemoveVertex(This,nIndex) ) 

#define IGcadSection2_HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem)	\
    ( (This)->lpVtbl -> HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem) ) 

#define IGcadSection2_CreateJog(This,varPt)	\
    ( (This)->lpVtbl -> CreateJog(This,varPt) ) 

#define IGcadSection2_get_Settings(This,pUnk)	\
    ( (This)->lpVtbl -> get_Settings(This,pUnk) ) 

#define IGcadSection2_GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs)	\
    ( (This)->lpVtbl -> GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs) ) 


#define IGcadSection2_get_State2(This,pVal)	\
    ( (This)->lpVtbl -> get_State2(This,pVal) ) 

#define IGcadSection2_put_State2(This,pVal)	\
    ( (This)->lpVtbl -> put_State2(This,pVal) ) 

#define IGcadSection2_get_SliceDepth(This,pVal)	\
    ( (This)->lpVtbl -> get_SliceDepth(This,pVal) ) 

#define IGcadSection2_put_SliceDepth(This,pVal)	\
    ( (This)->lpVtbl -> put_SliceDepth(This,pVal) ) 

#define IGcadSection2_get_SectionPlaneOffset(This,pVal)	\
    ( (This)->lpVtbl -> get_SectionPlaneOffset(This,pVal) ) 

#define IGcadSection2_put_SectionPlaneOffset(This,pVal)	\
    ( (This)->lpVtbl -> put_SectionPlaneOffset(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSection2_INTERFACE_DEFINED__ */


#ifndef __IGcadModelSpace_INTERFACE_DEFINED__
#define __IGcadModelSpace_INTERFACE_DEFINED__

/* interface IGcadModelSpace */
/* [unique][oleautomation][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadModelSpace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("472EF5C1-6ACC-4DC8-A70C-9F6450651C98")
    IGcadModelSpace : public IGcadBlock
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadModelSpaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadModelSpace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadModelSpace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadModelSpace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadModelSpace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadModelSpace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadModelSpace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadModelSpace * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadModelSpace * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadModelSpace * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadModelSpace * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadModelSpace * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadModelSpace * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadModelSpace * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadModelSpace * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadModelSpace * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **pItem);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadModelSpace * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadModelSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomObject )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR ClassName,
            /* [retval][out] */ IDispatch **pObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DFace )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcad3DFace **pFace3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DMesh )( 
            IGcadModelSpace * This,
            /* [in] */ int M,
            /* [in] */ int N,
            /* [in] */ VARIANT PointsMatrix,
            /* [retval][out] */ IGcadPolygonMesh **pMesh3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DPoly )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcad3DPolyline **pPoly3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddArc )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double StartAngle,
            /* [in] */ double EndAngle,
            /* [retval][out] */ IGcadArc **pArc);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IGcadModelSpace * This,
            /* [in] */ double Height,
            /* [in] */ GcAttributeMode Mode,
            /* [in] */ BSTR Prompt,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Tag,
            /* [in] */ BSTR Value,
            /* [retval][out] */ IGcadAttribute **pAttr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddBox )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Origin,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pBox);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCircle )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcadCircle **pCircle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCone )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double BaseRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCylinder )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAligned )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT TextPosition,
            /* [retval][out] */ IGcadDimAligned **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAngular )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDimAngular **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT FarChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimDiametric **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRotated )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT DimLineLocation,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadDimRotated **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT DefinitionPoint,
            /* [in] */ VARIANT LeaderEndPoint,
            /* [in] */ int UseXAxis,
            /* [retval][out] */ IGcadDimOrdinate **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadial )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimRadial **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipse )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT MajorAxis,
            /* [in] */ double RadiusRatio,
            /* [retval][out] */ IGcadEllipse **pEllipse);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )( 
            IGcadModelSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ double Height,
            /* [in] */ double TaperAngle,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )( 
            IGcadModelSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ IDispatch *Path,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeader )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ IGcadEntity *Annotation,
            /* [in] */ GcLeaderType Type,
            /* [retval][out] */ IGcadLeader **pLeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMText )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Width,
            /* [in] */ BSTR Text,
            /* [retval][out] */ IGcadMText **pMtext);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPoint )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Point,
            /* [retval][out] */ IGcadPoint **pPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadLWPolyline **pLWPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadPolyline **pPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRay )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadRay **pRay);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRegion )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT ObjectList,
            /* [retval][out] */ VARIANT *pRegions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )( 
            IGcadModelSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ VARIANT AxisPoint,
            /* [in] */ VARIANT AxisDir,
            /* [in] */ double Angle,
            /* [retval][out] */ IGcad3DSolid **pRevolSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadShape **pShape);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSolid )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcadSolid **pSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSphere )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcad3DSolid **pSphere);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSpline )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ VARIANT StartTangent,
            /* [in] */ VARIANT EndTangent,
            /* [retval][out] */ IGcadSpline **pSpline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddText )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR TextString,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadText **pText);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTolerance )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR Text,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ VARIANT Direction,
            /* [retval][out] */ IGcadTolerance **pTolerance);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTorus )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double TorusRadius,
            /* [in] */ double TubeRadius,
            /* [retval][out] */ IGcad3DSolid **pTorus);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTrace )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcadTrace **pTrace);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddWedge )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pWedge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddXline )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadXline **pXline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBlock )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadBlockReference **pBlkRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddHatch )( 
            IGcadModelSpace * This,
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName,
            /* [in] */ VARIANT_BOOL Associativity,
            /* [optional][in] */ VARIANT HatchObjectType,
            /* [retval][out] */ IGcadHatch **pHatch);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRaster )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR imageFileName,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadRasterImage **pRaster);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT StartPoint,
            /* [in] */ VARIANT EndPoint,
            /* [retval][out] */ IGcadLine **pLine);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLayout )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bIsLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IGcadLayout **pLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsXRef )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT_BOOL *pIsXRref);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [in] */ long RowSpacing,
            /* [in] */ long ColumnSpacing,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadMInsertBlock **pMInsertBlk);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT VertexList,
            /* [in] */ VARIANT FaceList,
            /* [retval][out] */ IGcadPolyfaceMesh **pPFMesh);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLine )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT VertexList,
            /* [retval][out] */ IGcadMLine **pMLine);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDim3PointAngular **pDim);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )( 
            IGcadModelSpace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR PathName,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ VARIANT_BOOL bOverlay,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadExternalReference **pXRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Unload )( 
            IGcadModelSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            IGcadModelSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Bind )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT_BOOL bPrefixName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IGcadModelSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTable )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [in] */ double RowHeight,
            /* [in] */ double ColWidth,
            /* [retval][out] */ IGcadTable **pTable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IGcadModelSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            IGcadModelSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comments )( 
            IGcadModelSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Units )( 
            IGcadModelSpace * This,
            /* [retval][out] */ GcInsertUnits *pIU);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Units )( 
            IGcadModelSpace * This,
            /* [in] */ GcInsertUnits pIU);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Explodable )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bExplodable);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Explodable )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT_BOOL bExplodable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )( 
            IGcadModelSpace * This,
            /* [retval][out] */ GcBlockScaling *pBS);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )( 
            IGcadModelSpace * This,
            /* [in] */ GcBlockScaling pBS);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadModelSpace * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimArc )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT ArcCenter,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT ArcPoint,
            /* [retval][out] */ IGcadDimArcLength **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT OverrideCenter,
            /* [in] */ VARIANT JogPoint,
            /* [in] */ double JogAngle,
            /* [retval][out] */ IGcadDimRadialLarge **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSection )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint,
            /* [in] */ VARIANT planeVector,
            /* [retval][out] */ IGcadSection **ppSecPlane);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLeader )( 
            IGcadModelSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [out] */ int *leaderLineIndex,
            /* [retval][out] */ IGcadMLeader **pMLeader);
        
        END_INTERFACE
    } IGcadModelSpaceVtbl;

    interface IGcadModelSpace
    {
        CONST_VTBL struct IGcadModelSpaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadModelSpace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadModelSpace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadModelSpace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadModelSpace_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadModelSpace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadModelSpace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadModelSpace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadModelSpace_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadModelSpace_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadModelSpace_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadModelSpace_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadModelSpace_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadModelSpace_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadModelSpace_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadModelSpace_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadModelSpace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadModelSpace_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadModelSpace_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadModelSpace_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadModelSpace_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadModelSpace_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadModelSpace_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadModelSpace_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadModelSpace_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadModelSpace_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadModelSpace_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadModelSpace_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadModelSpace_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadModelSpace_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadModelSpace_AddCustomObject(This,ClassName,pObject)	\
    ( (This)->lpVtbl -> AddCustomObject(This,ClassName,pObject) ) 

#define IGcadModelSpace_Add3DFace(This,Point1,Point2,point3,Point4,pFace3d)	\
    ( (This)->lpVtbl -> Add3DFace(This,Point1,Point2,point3,Point4,pFace3d) ) 

#define IGcadModelSpace_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ( (This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d) ) 

#define IGcadModelSpace_Add3DPoly(This,PointsArray,pPoly3d)	\
    ( (This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d) ) 

#define IGcadModelSpace_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ( (This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc) ) 

#define IGcadModelSpace_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ( (This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr) ) 

#define IGcadModelSpace_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ( (This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox) ) 

#define IGcadModelSpace_AddCircle(This,Center,Radius,pCircle)	\
    ( (This)->lpVtbl -> AddCircle(This,Center,Radius,pCircle) ) 

#define IGcadModelSpace_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ( (This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone) ) 

#define IGcadModelSpace_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ( (This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl) ) 

#define IGcadModelSpace_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ( (This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim) ) 

#define IGcadModelSpace_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadModelSpace_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim) ) 

#define IGcadModelSpace_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim) ) 

#define IGcadModelSpace_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ( (This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim) ) 

#define IGcadModelSpace_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim) ) 

#define IGcadModelSpace_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ( (This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse) ) 

#define IGcadModelSpace_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ( (This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone) ) 

#define IGcadModelSpace_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ( (This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl) ) 

#define IGcadModelSpace_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid) ) 

#define IGcadModelSpace_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid) ) 

#define IGcadModelSpace_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ( (This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader) ) 

#define IGcadModelSpace_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ( (This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext) ) 

#define IGcadModelSpace_AddPoint(This,Point,pPoint)	\
    ( (This)->lpVtbl -> AddPoint(This,Point,pPoint) ) 

#define IGcadModelSpace_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ( (This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline) ) 

#define IGcadModelSpace_AddPolyline(This,VerticesList,pPolyline)	\
    ( (This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline) ) 

#define IGcadModelSpace_AddRay(This,Point1,Point2,pRay)	\
    ( (This)->lpVtbl -> AddRay(This,Point1,Point2,pRay) ) 

#define IGcadModelSpace_AddRegion(This,ObjectList,pRegions)	\
    ( (This)->lpVtbl -> AddRegion(This,ObjectList,pRegions) ) 

#define IGcadModelSpace_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ( (This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid) ) 

#define IGcadModelSpace_AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape)	\
    ( (This)->lpVtbl -> AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape) ) 

#define IGcadModelSpace_AddSolid(This,Point1,Point2,point3,Point4,pSolid)	\
    ( (This)->lpVtbl -> AddSolid(This,Point1,Point2,point3,Point4,pSolid) ) 

#define IGcadModelSpace_AddSphere(This,Center,Radius,pSphere)	\
    ( (This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere) ) 

#define IGcadModelSpace_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ( (This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline) ) 

#define IGcadModelSpace_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ( (This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText) ) 

#define IGcadModelSpace_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ( (This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance) ) 

#define IGcadModelSpace_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ( (This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus) ) 

#define IGcadModelSpace_AddTrace(This,PointsArray,pTrace)	\
    ( (This)->lpVtbl -> AddTrace(This,PointsArray,pTrace) ) 

#define IGcadModelSpace_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ( (This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge) ) 

#define IGcadModelSpace_AddXline(This,Point1,Point2,pXline)	\
    ( (This)->lpVtbl -> AddXline(This,Point1,Point2,pXline) ) 

#define IGcadModelSpace_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ( (This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef) ) 

#define IGcadModelSpace_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ( (This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch) ) 

#define IGcadModelSpace_AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ( (This)->lpVtbl -> AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster) ) 

#define IGcadModelSpace_AddLine(This,StartPoint,EndPoint,pLine)	\
    ( (This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine) ) 

#define IGcadModelSpace_get_IsLayout(This,bIsLayout)	\
    ( (This)->lpVtbl -> get_IsLayout(This,bIsLayout) ) 

#define IGcadModelSpace_get_Layout(This,pLayout)	\
    ( (This)->lpVtbl -> get_Layout(This,pLayout) ) 

#define IGcadModelSpace_get_IsXRef(This,pIsXRref)	\
    ( (This)->lpVtbl -> get_IsXRef(This,pIsXRref) ) 

#define IGcadModelSpace_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ( (This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk) ) 

#define IGcadModelSpace_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ( (This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh) ) 

#define IGcadModelSpace_AddMLine(This,VertexList,pMLine)	\
    ( (This)->lpVtbl -> AddMLine(This,VertexList,pMLine) ) 

#define IGcadModelSpace_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadModelSpace_get_XRefDatabase(This,pDatabase)	\
    ( (This)->lpVtbl -> get_XRefDatabase(This,pDatabase) ) 

#define IGcadModelSpace_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ( (This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef) ) 

#define IGcadModelSpace_Unload(This)	\
    ( (This)->lpVtbl -> Unload(This) ) 

#define IGcadModelSpace_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define IGcadModelSpace_Bind(This,bPrefixName)	\
    ( (This)->lpVtbl -> Bind(This,bPrefixName) ) 

#define IGcadModelSpace_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#define IGcadModelSpace_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ( (This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable) ) 

#define IGcadModelSpace_get_Path(This,bstrName)	\
    ( (This)->lpVtbl -> get_Path(This,bstrName) ) 

#define IGcadModelSpace_put_Path(This,bstrName)	\
    ( (This)->lpVtbl -> put_Path(This,bstrName) ) 

#define IGcadModelSpace_get_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> get_Comments(This,bstrName) ) 

#define IGcadModelSpace_put_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> put_Comments(This,bstrName) ) 

#define IGcadModelSpace_get_Units(This,pIU)	\
    ( (This)->lpVtbl -> get_Units(This,pIU) ) 

#define IGcadModelSpace_put_Units(This,pIU)	\
    ( (This)->lpVtbl -> put_Units(This,pIU) ) 

#define IGcadModelSpace_get_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> get_Explodable(This,bExplodable) ) 

#define IGcadModelSpace_put_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> put_Explodable(This,bExplodable) ) 

#define IGcadModelSpace_get_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> get_BlockScaling(This,pBS) ) 

#define IGcadModelSpace_put_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> put_BlockScaling(This,pBS) ) 

#define IGcadModelSpace_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadModelSpace_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim) ) 

#define IGcadModelSpace_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim) ) 

#define IGcadModelSpace_AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane)	\
    ( (This)->lpVtbl -> AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane) ) 

#define IGcadModelSpace_AddMLeader(This,PointsArray,leaderLineIndex,pMLeader)	\
    ( (This)->lpVtbl -> AddMLeader(This,PointsArray,leaderLineIndex,pMLeader) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadModelSpace_INTERFACE_DEFINED__ */


#ifndef __IGcadBlocks_INTERFACE_DEFINED__
#define __IGcadBlocks_INTERFACE_DEFINED__

/* interface IGcadBlocks */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadBlocks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD79CAF7-B718-42B4-857F-4BC8C4DA9758")
    IGcadBlocks : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadBlock **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadBlock **pBlock) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadBlocksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadBlocks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadBlocks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadBlocks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadBlocks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadBlocks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadBlocks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadBlocks * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadBlocks * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadBlocks * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadBlocks * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadBlocks * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadBlocks * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadBlocks * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadBlocks * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadBlocks * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadBlocks * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadBlocks * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadBlocks * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadBlocks * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadBlocks * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadBlocks * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadBlocks * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadBlocks * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadBlock **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadBlocks * This,
            /* [retval][out] */ long *pVal);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadBlocks * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadBlocks * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadBlock **pBlock);
        
        END_INTERFACE
    } IGcadBlocksVtbl;

    interface IGcadBlocks
    {
        CONST_VTBL struct IGcadBlocksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadBlocks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadBlocks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadBlocks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadBlocks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadBlocks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadBlocks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadBlocks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadBlocks_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadBlocks_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadBlocks_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadBlocks_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadBlocks_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadBlocks_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadBlocks_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadBlocks_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadBlocks_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadBlocks_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadBlocks_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadBlocks_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadBlocks_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadBlocks_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadBlocks_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadBlocks_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadBlocks_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadBlocks_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadBlocks_Add(This,InsertionPoint,Name,pBlock)	\
    ( (This)->lpVtbl -> Add(This,InsertionPoint,Name,pBlock) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadBlocks_INTERFACE_DEFINED__ */


#ifndef __IGcadGroups_INTERFACE_DEFINED__
#define __IGcadGroups_INTERFACE_DEFINED__

/* interface IGcadGroups */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadGroups;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("836C6402-8328-4931-A695-8EADAA94ED8B")
    IGcadGroups : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadGroup **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadGroup **pDimStyle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadGroupsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadGroups * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadGroups * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadGroups * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadGroups * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadGroups * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadGroups * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadGroups * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadGroups * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadGroups * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadGroups * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadGroups * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadGroups * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadGroups * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadGroups * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadGroups * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadGroups * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadGroups * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadGroups * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadGroups * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadGroups * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadGroups * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadGroups * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadGroups * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadGroup **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadGroups * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadGroups * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadGroups * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadGroup **pDimStyle);
        
        END_INTERFACE
    } IGcadGroupsVtbl;

    interface IGcadGroups
    {
        CONST_VTBL struct IGcadGroupsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadGroups_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadGroups_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadGroups_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadGroups_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadGroups_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadGroups_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadGroups_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadGroups_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadGroups_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadGroups_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadGroups_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadGroups_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadGroups_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadGroups_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadGroups_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadGroups_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadGroups_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadGroups_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadGroups_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadGroups_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadGroups_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadGroups_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadGroups_Add(This,Name,pDimStyle)	\
    ( (This)->lpVtbl -> Add(This,Name,pDimStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadGroups_INTERFACE_DEFINED__ */


#ifndef __IGcadGroup_INTERFACE_DEFINED__
#define __IGcadGroup_INTERFACE_DEFINED__

/* interface IGcadGroup */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("32D625BF-5AC7-492E-BC2D-5C791632D961")
    IGcadGroup : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **ppEntity) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrueColor( 
            /* [in] */ IGcadAcCmColor *rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layer( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Linetype( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinetypeScale( 
            /* [in] */ GCAD_NOUNITS rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL rhs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Highlight( 
            /* [in] */ VARIANT_BOOL HighlightFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotStyleName( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Lineweight( 
            /* [in] */ GCAD_LWEIGHT rhs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AppendItems( 
            /* [in] */ VARIANT Objects) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItems( 
            /* [in] */ VARIANT Objects) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Material( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ GcColor rhs) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadGroup * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadGroup * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadGroup * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadGroup * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadGroup * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadGroup * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadGroup * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadGroup * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadGroup * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadGroup * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadGroup * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadGroup * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadGroup * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadGroup * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadGroup * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadGroup * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadGroup * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadGroup * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **ppEntity);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadGroup * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadGroup * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadGroup * This,
            /* [in] */ IGcadAcCmColor *rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadGroup * This,
            /* [in] */ BSTR rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadGroup * This,
            /* [in] */ BSTR rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadGroup * This,
            /* [in] */ GCAD_NOUNITS rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadGroup * This,
            /* [in] */ VARIANT_BOOL rhs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadGroup * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadGroup * This,
            /* [in] */ BSTR rhs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadGroup * This,
            /* [in] */ GCAD_LWEIGHT rhs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadGroup * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadGroup * This,
            /* [in] */ BSTR pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AppendItems )( 
            IGcadGroup * This,
            /* [in] */ VARIANT Objects);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItems )( 
            IGcadGroup * This,
            /* [in] */ VARIANT Objects);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadGroup * This);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadGroup * This,
            /* [in] */ BSTR rhs);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadGroup * This,
            /* [in] */ GcColor rhs);
        
        END_INTERFACE
    } IGcadGroupVtbl;

    interface IGcadGroup
    {
        CONST_VTBL struct IGcadGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadGroup_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadGroup_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadGroup_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadGroup_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadGroup_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadGroup_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadGroup_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadGroup_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadGroup_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadGroup_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadGroup_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadGroup_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadGroup_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadGroup_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadGroup_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadGroup_Item(This,Index,ppEntity)	\
    ( (This)->lpVtbl -> Item(This,Index,ppEntity) ) 

#define IGcadGroup_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadGroup_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadGroup_put_TrueColor(This,rhs)	\
    ( (This)->lpVtbl -> put_TrueColor(This,rhs) ) 

#define IGcadGroup_put_Layer(This,rhs)	\
    ( (This)->lpVtbl -> put_Layer(This,rhs) ) 

#define IGcadGroup_put_Linetype(This,rhs)	\
    ( (This)->lpVtbl -> put_Linetype(This,rhs) ) 

#define IGcadGroup_put_LinetypeScale(This,rhs)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,rhs) ) 

#define IGcadGroup_put_Visible(This,rhs)	\
    ( (This)->lpVtbl -> put_Visible(This,rhs) ) 

#define IGcadGroup_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadGroup_put_PlotStyleName(This,rhs)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,rhs) ) 

#define IGcadGroup_put_Lineweight(This,rhs)	\
    ( (This)->lpVtbl -> put_Lineweight(This,rhs) ) 

#define IGcadGroup_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadGroup_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadGroup_AppendItems(This,Objects)	\
    ( (This)->lpVtbl -> AppendItems(This,Objects) ) 

#define IGcadGroup_RemoveItems(This,Objects)	\
    ( (This)->lpVtbl -> RemoveItems(This,Objects) ) 

#define IGcadGroup_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadGroup_put_Material(This,rhs)	\
    ( (This)->lpVtbl -> put_Material(This,rhs) ) 

#define IGcadGroup_put_color(This,rhs)	\
    ( (This)->lpVtbl -> put_color(This,rhs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadGroup_INTERFACE_DEFINED__ */


#ifndef __IGcadDimStyles_INTERFACE_DEFINED__
#define __IGcadDimStyles_INTERFACE_DEFINED__

/* interface IGcadDimStyles */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimStyles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D1003CFF-3232-4AE7-B4C2-0E249FE9118D")
    IGcadDimStyles : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadDimStyle **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadDimStyle **pDimStyle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimStylesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimStyles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimStyles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimStyles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimStyles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimStyles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimStyles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimStyles * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimStyles * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimStyles * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimStyles * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimStyles * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimStyles * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimStyles * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimStyles * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimStyles * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimStyles * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimStyles * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimStyles * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimStyles * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimStyles * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimStyles * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimStyles * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadDimStyles * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadDimStyle **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadDimStyles * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadDimStyles * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadDimStyles * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadDimStyle **pDimStyle);
        
        END_INTERFACE
    } IGcadDimStylesVtbl;

    interface IGcadDimStyles
    {
        CONST_VTBL struct IGcadDimStylesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimStyles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimStyles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimStyles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimStyles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimStyles_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimStyles_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimStyles_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimStyles_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimStyles_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimStyles_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimStyles_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimStyles_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimStyles_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimStyles_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimStyles_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimStyles_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimStyles_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimStyles_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimStyles_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimStyles_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadDimStyles_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadDimStyles_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadDimStyles_Add(This,Name,pDimStyle)	\
    ( (This)->lpVtbl -> Add(This,Name,pDimStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDimStyles_INTERFACE_DEFINED__ */


#ifndef __IGcadDimStyle_INTERFACE_DEFINED__
#define __IGcadDimStyle_INTERFACE_DEFINED__

/* interface IGcadDimStyle */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDimStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D8E197E2-D004-49E7-80B5-52128DE9AAD3")
    IGcadDimStyle : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IDispatch *StyleSource) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDimStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDimStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDimStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDimStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDimStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDimStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDimStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDimStyle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDimStyle * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDimStyle * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDimStyle * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDimStyle * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDimStyle * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDimStyle * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDimStyle * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDimStyle * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDimStyle * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDimStyle * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDimStyle * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDimStyle * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDimStyle * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDimStyle * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDimStyle * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadDimStyle * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadDimStyle * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IGcadDimStyle * This,
            /* [in] */ IDispatch *StyleSource);
        
        END_INTERFACE
    } IGcadDimStyleVtbl;

    interface IGcadDimStyle
    {
        CONST_VTBL struct IGcadDimStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDimStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDimStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDimStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDimStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDimStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDimStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDimStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDimStyle_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDimStyle_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDimStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDimStyle_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDimStyle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDimStyle_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDimStyle_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDimStyle_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDimStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDimStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDimStyle_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDimStyle_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDimStyle_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDimStyle_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDimStyle_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDimStyle_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadDimStyle_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadDimStyle_CopyFrom(This,StyleSource)	\
    ( (This)->lpVtbl -> CopyFrom(This,StyleSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDimStyle_INTERFACE_DEFINED__ */


#ifndef __IGcadMLeaderStyle_INTERFACE_DEFINED__
#define __IGcadMLeaderStyle_INTERFACE_DEFINED__

/* interface IGcadMLeaderStyle */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadMLeaderStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("36BA466C-C1B8-4ACD-8011-AEDF435092F4")
    IGcadMLeaderStyle : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *Description) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BitFlags( 
            /* [retval][out] */ long *bitFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BitFlags( 
            /* [in] */ long bitFlag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContentType( 
            /* [retval][out] */ GcMLeaderContentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContentType( 
            /* [in] */ GcMLeaderContentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DrawMLeaderOrderType( 
            /* [retval][out] */ GcDrawMLeaderOrderType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DrawMLeaderOrderType( 
            /* [in] */ GcDrawMLeaderOrderType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DrawLeaderOrderType( 
            /* [retval][out] */ GcDrawLeaderOrderType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DrawLeaderOrderType( 
            /* [in] */ GcDrawLeaderOrderType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaxLeaderSegmentsPoints( 
            /* [retval][out] */ int *number) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MaxLeaderSegmentsPoints( 
            /* [in] */ int number) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstSegmentAngleConstraint( 
            /* [retval][out] */ GcSegmentAngleType *constraint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstSegmentAngleConstraint( 
            /* [in] */ GcSegmentAngleType constraint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecondSegmentAngleConstraint( 
            /* [retval][out] */ GcSegmentAngleType *constraint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SecondSegmentAngleConstraint( 
            /* [in] */ GcSegmentAngleType constraint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLinetype( 
            /* [retval][out] */ GcMLeaderType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLinetype( 
            /* [in] */ GcMLeaderType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLineColor( 
            /* [retval][out] */ IGcadAcCmColor **color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLineColor( 
            /* [in] */ IGcadAcCmColor *color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLineTypeId( 
            /* [retval][out] */ GCAD_LTYPE *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLineTypeId( 
            /* [in] */ GCAD_LTYPE Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLineWeight( 
            /* [retval][out] */ GcLineWeight *weight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLineWeight( 
            /* [in] */ GcLineWeight weight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableLanding( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableLanding( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LandingGap( 
            /* [retval][out] */ double *LandingGap) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LandingGap( 
            /* [in] */ double LandingGap) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableDogleg( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableDogleg( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoglegLength( 
            /* [retval][out] */ double *DoglegLength) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoglegLength( 
            /* [in] */ double DoglegLength) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowSymbol( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowSymbol( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyle( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextStyle( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAttachmentDirection( 
            /* [retval][out] */ GcTextAttachmentDirection *dir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAttachmentDirection( 
            /* [in] */ GcTextAttachmentDirection dir) = 0;
        
        virtual /* [helpcontext][helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLeftAttachmentType( 
            /* [retval][out] */ GcTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLeftAttachmentType( 
            /* [in] */ GcTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRightAttachmentType( 
            /* [retval][out] */ GcTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextRightAttachmentType( 
            /* [in] */ GcTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextTopAttachmentType( 
            /* [retval][out] */ GcVerticalTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextTopAttachmentType( 
            /* [in] */ GcVerticalTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextBottomAttachmentType( 
            /* [retval][out] */ GcVerticalTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextBottomAttachmentType( 
            /* [in] */ GcVerticalTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextColor( 
            /* [retval][out] */ IGcadAcCmColor **color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextColor( 
            /* [in] */ IGcadAcCmColor *color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableFrameText( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableFrameText( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlignSpace( 
            /* [retval][out] */ double *AlignSpace) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlignSpace( 
            /* [in] */ double AlignSpace) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Block( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Block( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockColor( 
            /* [retval][out] */ IGcadAcCmColor **color) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockColor( 
            /* [in] */ IGcadAcCmColor *color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableBlockScale( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableBlockScale( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockScale( 
            /* [retval][out] */ double *ScaleFactor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockScale( 
            /* [in] */ double ScaleFactor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableBlockRotation( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableBlockRotation( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockRotation( 
            /* [retval][out] */ double *Rotation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockRotation( 
            /* [in] */ double Rotation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockConnectionType( 
            /* [retval][out] */ GcBlockConnectionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockConnectionType( 
            /* [in] */ GcBlockConnectionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ double *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ double scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OverwritePropChanged( 
            /* [retval][out] */ VARIANT_BOOL *changed) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Annotative( 
            /* [retval][out] */ VARIANT_BOOL *Annotative) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Annotative( 
            /* [in] */ VARIANT_BOOL Annotative) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BreakSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BreakSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAngleType( 
            /* [retval][out] */ GcTextAngleType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAngleType( 
            /* [in] */ GcTextAngleType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAlignmentType( 
            /* [retval][out] */ GcTextAlignmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAlignmentType( 
            /* [in] */ GcTextAlignmentType Type) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMLeaderStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMLeaderStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMLeaderStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMLeaderStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMLeaderStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMLeaderStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMLeaderStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMLeaderStyle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMLeaderStyle * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMLeaderStyle * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BitFlags )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ long *bitFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BitFlags )( 
            IGcadMLeaderStyle * This,
            /* [in] */ long bitFlag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcMLeaderContentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcMLeaderContentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DrawMLeaderOrderType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcDrawMLeaderOrderType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DrawMLeaderOrderType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcDrawMLeaderOrderType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DrawLeaderOrderType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcDrawLeaderOrderType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DrawLeaderOrderType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcDrawLeaderOrderType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxLeaderSegmentsPoints )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ int *number);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxLeaderSegmentsPoints )( 
            IGcadMLeaderStyle * This,
            /* [in] */ int number);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstSegmentAngleConstraint )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcSegmentAngleType *constraint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstSegmentAngleConstraint )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcSegmentAngleType constraint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecondSegmentAngleConstraint )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcSegmentAngleType *constraint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SecondSegmentAngleConstraint )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcSegmentAngleType constraint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLinetype )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcMLeaderType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLinetype )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcMLeaderType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLineColor )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IGcadAcCmColor **color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLineColor )( 
            IGcadMLeaderStyle * This,
            /* [in] */ IGcadAcCmColor *color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLineTypeId )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GCAD_LTYPE *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLineTypeId )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GCAD_LTYPE Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLineWeight )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcLineWeight *weight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLineWeight )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcLineWeight weight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableLanding )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableLanding )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LandingGap )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *LandingGap);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LandingGap )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double LandingGap);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableDogleg )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableDogleg )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoglegLength )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *DoglegLength);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoglegLength )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double DoglegLength);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowSymbol )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowSymbol )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowSize )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowSize )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyle )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyle )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAttachmentDirection )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcTextAttachmentDirection *dir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAttachmentDirection )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcTextAttachmentDirection dir);
        
        /* [helpcontext][helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLeftAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLeftAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRightAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRightAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextTopAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcVerticalTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextTopAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcVerticalTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextBottomAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcVerticalTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextBottomAttachmentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcVerticalTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IGcadAcCmColor **color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IGcadMLeaderStyle * This,
            /* [in] */ IGcadAcCmColor *color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFrameText )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFrameText )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlignSpace )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *AlignSpace);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlignSpace )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double AlignSpace);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Block )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Block )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockColor )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ IGcadAcCmColor **color);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockColor )( 
            IGcadMLeaderStyle * This,
            /* [in] */ IGcadAcCmColor *color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableBlockScale )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableBlockScale )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScale )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *ScaleFactor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScale )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableBlockRotation )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableBlockRotation )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockRotation )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *Rotation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockRotation )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double Rotation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockConnectionType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcBlockConnectionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockConnectionType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcBlockConnectionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OverwritePropChanged )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *changed);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Annotative )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Annotative);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Annotative )( 
            IGcadMLeaderStyle * This,
            /* [in] */ VARIANT_BOOL Annotative);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BreakSize )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BreakSize )( 
            IGcadMLeaderStyle * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadMLeaderStyle * This,
            /* [in] */ BSTR Text);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAngleType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcTextAngleType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAngleType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcTextAngleType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentType )( 
            IGcadMLeaderStyle * This,
            /* [retval][out] */ GcTextAlignmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentType )( 
            IGcadMLeaderStyle * This,
            /* [in] */ GcTextAlignmentType Type);
        
        END_INTERFACE
    } IGcadMLeaderStyleVtbl;

    interface IGcadMLeaderStyle
    {
        CONST_VTBL struct IGcadMLeaderStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMLeaderStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMLeaderStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMLeaderStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMLeaderStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMLeaderStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMLeaderStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMLeaderStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMLeaderStyle_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMLeaderStyle_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMLeaderStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMLeaderStyle_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMLeaderStyle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMLeaderStyle_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMLeaderStyle_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMLeaderStyle_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMLeaderStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMLeaderStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMLeaderStyle_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMLeaderStyle_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMLeaderStyle_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMLeaderStyle_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMLeaderStyle_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMLeaderStyle_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IGcadMLeaderStyle_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IGcadMLeaderStyle_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IGcadMLeaderStyle_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IGcadMLeaderStyle_get_BitFlags(This,bitFlag)	\
    ( (This)->lpVtbl -> get_BitFlags(This,bitFlag) ) 

#define IGcadMLeaderStyle_put_BitFlags(This,bitFlag)	\
    ( (This)->lpVtbl -> put_BitFlags(This,bitFlag) ) 

#define IGcadMLeaderStyle_get_ContentType(This,Type)	\
    ( (This)->lpVtbl -> get_ContentType(This,Type) ) 

#define IGcadMLeaderStyle_put_ContentType(This,Type)	\
    ( (This)->lpVtbl -> put_ContentType(This,Type) ) 

#define IGcadMLeaderStyle_get_DrawMLeaderOrderType(This,Type)	\
    ( (This)->lpVtbl -> get_DrawMLeaderOrderType(This,Type) ) 

#define IGcadMLeaderStyle_put_DrawMLeaderOrderType(This,Type)	\
    ( (This)->lpVtbl -> put_DrawMLeaderOrderType(This,Type) ) 

#define IGcadMLeaderStyle_get_DrawLeaderOrderType(This,Type)	\
    ( (This)->lpVtbl -> get_DrawLeaderOrderType(This,Type) ) 

#define IGcadMLeaderStyle_put_DrawLeaderOrderType(This,Type)	\
    ( (This)->lpVtbl -> put_DrawLeaderOrderType(This,Type) ) 

#define IGcadMLeaderStyle_get_MaxLeaderSegmentsPoints(This,number)	\
    ( (This)->lpVtbl -> get_MaxLeaderSegmentsPoints(This,number) ) 

#define IGcadMLeaderStyle_put_MaxLeaderSegmentsPoints(This,number)	\
    ( (This)->lpVtbl -> put_MaxLeaderSegmentsPoints(This,number) ) 

#define IGcadMLeaderStyle_get_FirstSegmentAngleConstraint(This,constraint)	\
    ( (This)->lpVtbl -> get_FirstSegmentAngleConstraint(This,constraint) ) 

#define IGcadMLeaderStyle_put_FirstSegmentAngleConstraint(This,constraint)	\
    ( (This)->lpVtbl -> put_FirstSegmentAngleConstraint(This,constraint) ) 

#define IGcadMLeaderStyle_get_SecondSegmentAngleConstraint(This,constraint)	\
    ( (This)->lpVtbl -> get_SecondSegmentAngleConstraint(This,constraint) ) 

#define IGcadMLeaderStyle_put_SecondSegmentAngleConstraint(This,constraint)	\
    ( (This)->lpVtbl -> put_SecondSegmentAngleConstraint(This,constraint) ) 

#define IGcadMLeaderStyle_get_LeaderLinetype(This,Type)	\
    ( (This)->lpVtbl -> get_LeaderLinetype(This,Type) ) 

#define IGcadMLeaderStyle_put_LeaderLinetype(This,Type)	\
    ( (This)->lpVtbl -> put_LeaderLinetype(This,Type) ) 

#define IGcadMLeaderStyle_get_LeaderLineColor(This,color)	\
    ( (This)->lpVtbl -> get_LeaderLineColor(This,color) ) 

#define IGcadMLeaderStyle_put_LeaderLineColor(This,color)	\
    ( (This)->lpVtbl -> put_LeaderLineColor(This,color) ) 

#define IGcadMLeaderStyle_get_LeaderLineTypeId(This,Type)	\
    ( (This)->lpVtbl -> get_LeaderLineTypeId(This,Type) ) 

#define IGcadMLeaderStyle_put_LeaderLineTypeId(This,Type)	\
    ( (This)->lpVtbl -> put_LeaderLineTypeId(This,Type) ) 

#define IGcadMLeaderStyle_get_LeaderLineWeight(This,weight)	\
    ( (This)->lpVtbl -> get_LeaderLineWeight(This,weight) ) 

#define IGcadMLeaderStyle_put_LeaderLineWeight(This,weight)	\
    ( (This)->lpVtbl -> put_LeaderLineWeight(This,weight) ) 

#define IGcadMLeaderStyle_get_EnableLanding(This,enabled)	\
    ( (This)->lpVtbl -> get_EnableLanding(This,enabled) ) 

#define IGcadMLeaderStyle_put_EnableLanding(This,enabled)	\
    ( (This)->lpVtbl -> put_EnableLanding(This,enabled) ) 

#define IGcadMLeaderStyle_get_LandingGap(This,LandingGap)	\
    ( (This)->lpVtbl -> get_LandingGap(This,LandingGap) ) 

#define IGcadMLeaderStyle_put_LandingGap(This,LandingGap)	\
    ( (This)->lpVtbl -> put_LandingGap(This,LandingGap) ) 

#define IGcadMLeaderStyle_get_EnableDogleg(This,enabled)	\
    ( (This)->lpVtbl -> get_EnableDogleg(This,enabled) ) 

#define IGcadMLeaderStyle_put_EnableDogleg(This,enabled)	\
    ( (This)->lpVtbl -> put_EnableDogleg(This,enabled) ) 

#define IGcadMLeaderStyle_get_DoglegLength(This,DoglegLength)	\
    ( (This)->lpVtbl -> get_DoglegLength(This,DoglegLength) ) 

#define IGcadMLeaderStyle_put_DoglegLength(This,DoglegLength)	\
    ( (This)->lpVtbl -> put_DoglegLength(This,DoglegLength) ) 

#define IGcadMLeaderStyle_get_ArrowSymbol(This,Name)	\
    ( (This)->lpVtbl -> get_ArrowSymbol(This,Name) ) 

#define IGcadMLeaderStyle_put_ArrowSymbol(This,Name)	\
    ( (This)->lpVtbl -> put_ArrowSymbol(This,Name) ) 

#define IGcadMLeaderStyle_get_ArrowSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowSize(This,size) ) 

#define IGcadMLeaderStyle_put_ArrowSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowSize(This,size) ) 

#define IGcadMLeaderStyle_get_TextStyle(This,Name)	\
    ( (This)->lpVtbl -> get_TextStyle(This,Name) ) 

#define IGcadMLeaderStyle_put_TextStyle(This,Name)	\
    ( (This)->lpVtbl -> put_TextStyle(This,Name) ) 

#define IGcadMLeaderStyle_get_TextAttachmentDirection(This,dir)	\
    ( (This)->lpVtbl -> get_TextAttachmentDirection(This,dir) ) 

#define IGcadMLeaderStyle_put_TextAttachmentDirection(This,dir)	\
    ( (This)->lpVtbl -> put_TextAttachmentDirection(This,dir) ) 

#define IGcadMLeaderStyle_get_TextLeftAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextLeftAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextLeftAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextLeftAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_get_TextRightAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextRightAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextRightAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextRightAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_get_TextTopAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextTopAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextTopAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextTopAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_get_TextBottomAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextBottomAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextBottomAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextBottomAttachmentType(This,Type) ) 

#define IGcadMLeaderStyle_get_TextColor(This,color)	\
    ( (This)->lpVtbl -> get_TextColor(This,color) ) 

#define IGcadMLeaderStyle_put_TextColor(This,color)	\
    ( (This)->lpVtbl -> put_TextColor(This,color) ) 

#define IGcadMLeaderStyle_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadMLeaderStyle_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadMLeaderStyle_get_EnableFrameText(This,enabled)	\
    ( (This)->lpVtbl -> get_EnableFrameText(This,enabled) ) 

#define IGcadMLeaderStyle_put_EnableFrameText(This,enabled)	\
    ( (This)->lpVtbl -> put_EnableFrameText(This,enabled) ) 

#define IGcadMLeaderStyle_get_AlignSpace(This,AlignSpace)	\
    ( (This)->lpVtbl -> get_AlignSpace(This,AlignSpace) ) 

#define IGcadMLeaderStyle_put_AlignSpace(This,AlignSpace)	\
    ( (This)->lpVtbl -> put_AlignSpace(This,AlignSpace) ) 

#define IGcadMLeaderStyle_get_Block(This,Name)	\
    ( (This)->lpVtbl -> get_Block(This,Name) ) 

#define IGcadMLeaderStyle_put_Block(This,Name)	\
    ( (This)->lpVtbl -> put_Block(This,Name) ) 

#define IGcadMLeaderStyle_get_BlockColor(This,color)	\
    ( (This)->lpVtbl -> get_BlockColor(This,color) ) 

#define IGcadMLeaderStyle_put_BlockColor(This,color)	\
    ( (This)->lpVtbl -> put_BlockColor(This,color) ) 

#define IGcadMLeaderStyle_get_EnableBlockScale(This,enabled)	\
    ( (This)->lpVtbl -> get_EnableBlockScale(This,enabled) ) 

#define IGcadMLeaderStyle_put_EnableBlockScale(This,enabled)	\
    ( (This)->lpVtbl -> put_EnableBlockScale(This,enabled) ) 

#define IGcadMLeaderStyle_get_BlockScale(This,ScaleFactor)	\
    ( (This)->lpVtbl -> get_BlockScale(This,ScaleFactor) ) 

#define IGcadMLeaderStyle_put_BlockScale(This,ScaleFactor)	\
    ( (This)->lpVtbl -> put_BlockScale(This,ScaleFactor) ) 

#define IGcadMLeaderStyle_get_EnableBlockRotation(This,enabled)	\
    ( (This)->lpVtbl -> get_EnableBlockRotation(This,enabled) ) 

#define IGcadMLeaderStyle_put_EnableBlockRotation(This,enabled)	\
    ( (This)->lpVtbl -> put_EnableBlockRotation(This,enabled) ) 

#define IGcadMLeaderStyle_get_BlockRotation(This,Rotation)	\
    ( (This)->lpVtbl -> get_BlockRotation(This,Rotation) ) 

#define IGcadMLeaderStyle_put_BlockRotation(This,Rotation)	\
    ( (This)->lpVtbl -> put_BlockRotation(This,Rotation) ) 

#define IGcadMLeaderStyle_get_BlockConnectionType(This,Type)	\
    ( (This)->lpVtbl -> get_BlockConnectionType(This,Type) ) 

#define IGcadMLeaderStyle_put_BlockConnectionType(This,Type)	\
    ( (This)->lpVtbl -> put_BlockConnectionType(This,Type) ) 

#define IGcadMLeaderStyle_get_ScaleFactor(This,scale)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scale) ) 

#define IGcadMLeaderStyle_put_ScaleFactor(This,scale)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scale) ) 

#define IGcadMLeaderStyle_get_OverwritePropChanged(This,changed)	\
    ( (This)->lpVtbl -> get_OverwritePropChanged(This,changed) ) 

#define IGcadMLeaderStyle_get_Annotative(This,Annotative)	\
    ( (This)->lpVtbl -> get_Annotative(This,Annotative) ) 

#define IGcadMLeaderStyle_put_Annotative(This,Annotative)	\
    ( (This)->lpVtbl -> put_Annotative(This,Annotative) ) 

#define IGcadMLeaderStyle_get_BreakSize(This,size)	\
    ( (This)->lpVtbl -> get_BreakSize(This,size) ) 

#define IGcadMLeaderStyle_put_BreakSize(This,size)	\
    ( (This)->lpVtbl -> put_BreakSize(This,size) ) 

#define IGcadMLeaderStyle_get_TextString(This,Text)	\
    ( (This)->lpVtbl -> get_TextString(This,Text) ) 

#define IGcadMLeaderStyle_put_TextString(This,Text)	\
    ( (This)->lpVtbl -> put_TextString(This,Text) ) 

#define IGcadMLeaderStyle_get_TextAngleType(This,Type)	\
    ( (This)->lpVtbl -> get_TextAngleType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextAngleType(This,Type)	\
    ( (This)->lpVtbl -> put_TextAngleType(This,Type) ) 

#define IGcadMLeaderStyle_get_TextAlignmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextAlignmentType(This,Type) ) 

#define IGcadMLeaderStyle_put_TextAlignmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextAlignmentType(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMLeaderStyle_INTERFACE_DEFINED__ */


#ifndef __IGcadLayers_INTERFACE_DEFINED__
#define __IGcadLayers_INTERFACE_DEFINED__

/* interface IGcadLayers */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLayers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B8ADB405-5873-403D-BC9B-1A90ECA0EDA3")
    IGcadLayers : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLayer **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLayer **pLayer) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateUsageData( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLayersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLayers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLayers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLayers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLayers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLayers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLayers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLayers * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLayers * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLayers * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLayers * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLayers * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLayers * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLayers * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLayers * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLayers * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLayers * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLayers * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLayers * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLayers * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLayers * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLayers * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLayers * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadLayers * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLayer **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadLayers * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadLayers * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadLayers * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLayer **pLayer);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateUsageData )( 
            IGcadLayers * This);
        
        END_INTERFACE
    } IGcadLayersVtbl;

    interface IGcadLayers
    {
        CONST_VTBL struct IGcadLayersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLayers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLayers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLayers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLayers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLayers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLayers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLayers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLayers_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLayers_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLayers_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLayers_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLayers_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLayers_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLayers_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLayers_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLayers_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLayers_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLayers_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLayers_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLayers_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLayers_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLayers_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLayers_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadLayers_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadLayers_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadLayers_Add(This,Name,pLayer)	\
    ( (This)->lpVtbl -> Add(This,Name,pLayer) ) 

#define IGcadLayers_GenerateUsageData(This)	\
    ( (This)->lpVtbl -> GenerateUsageData(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLayers_INTERFACE_DEFINED__ */


#ifndef __IGcadLayer_INTERFACE_DEFINED__
#define __IGcadLayer_INTERFACE_DEFINED__

/* interface IGcadLayer */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9138D44C-4424-4F74-9A6F-DD0650540BA3")
    IGcadLayer : public IGcadObject
    {
    public:
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [retval][out] */ GcColor *color) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ GcColor color) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TrueColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrueColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Freeze( 
            /* [retval][out] */ VARIANT_BOOL *bFreeze) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Freeze( 
            /* [in] */ VARIANT_BOOL bFreeze) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayerOn( 
            /* [retval][out] */ VARIANT_BOOL *bOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayerOn( 
            /* [in] */ VARIANT_BOOL bOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Linetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Linetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lock( 
            /* [retval][out] */ VARIANT_BOOL *Block) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Lock( 
            /* [in] */ VARIANT_BOOL Block) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Plottable( 
            /* [retval][out] */ VARIANT_BOOL *bPlottable) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Plottable( 
            /* [in] */ VARIANT_BOOL bPlottable) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewportDefault( 
            /* [retval][out] */ VARIANT_BOOL *bDefault) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewportDefault( 
            /* [in] */ VARIANT_BOOL bDefault) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Lineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *Description) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Used( 
            /* [retval][out] */ VARIANT_BOOL *bUsed) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Material( 
            /* [retval][out] */ BSTR *Material) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Material( 
            /* [in] */ BSTR Material) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLayer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLayer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLayer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLayer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLayer * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLayer * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLayer * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLayer * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLayer * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLayer * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLayer * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLayer * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLayer * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLayer * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLayer * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLayer * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLayer * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLayer * This,
            /* [retval][out] */ GcColor *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLayer * This,
            /* [in] */ GcColor color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLayer * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLayer * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Freeze )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bFreeze);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Freeze )( 
            IGcadLayer * This,
            /* [in] */ VARIANT_BOOL bFreeze);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayerOn )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayerOn )( 
            IGcadLayer * This,
            /* [in] */ VARIANT_BOOL bOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLayer * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lock )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *Block);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lock )( 
            IGcadLayer * This,
            /* [in] */ VARIANT_BOOL Block);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLayer * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Plottable )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bPlottable);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Plottable )( 
            IGcadLayer * This,
            /* [in] */ VARIANT_BOOL bPlottable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewportDefault )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bDefault);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewportDefault )( 
            IGcadLayer * This,
            /* [in] */ VARIANT_BOOL bDefault);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLayer * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLayer * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLayer * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IGcadLayer * This,
            /* [in] */ BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Used )( 
            IGcadLayer * This,
            /* [retval][out] */ VARIANT_BOOL *bUsed);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLayer * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLayer * This,
            /* [in] */ BSTR Material);
        
        END_INTERFACE
    } IGcadLayerVtbl;

    interface IGcadLayer
    {
        CONST_VTBL struct IGcadLayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLayer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLayer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLayer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLayer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLayer_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLayer_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLayer_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLayer_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLayer_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLayer_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLayer_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLayer_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLayer_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLayer_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLayer_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLayer_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLayer_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLayer_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLayer_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLayer_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLayer_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 

#define IGcadLayer_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLayer_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLayer_get_Freeze(This,bFreeze)	\
    ( (This)->lpVtbl -> get_Freeze(This,bFreeze) ) 

#define IGcadLayer_put_Freeze(This,bFreeze)	\
    ( (This)->lpVtbl -> put_Freeze(This,bFreeze) ) 

#define IGcadLayer_get_LayerOn(This,bOn)	\
    ( (This)->lpVtbl -> get_LayerOn(This,bOn) ) 

#define IGcadLayer_put_LayerOn(This,bOn)	\
    ( (This)->lpVtbl -> put_LayerOn(This,bOn) ) 

#define IGcadLayer_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLayer_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLayer_get_Lock(This,Block)	\
    ( (This)->lpVtbl -> get_Lock(This,Block) ) 

#define IGcadLayer_put_Lock(This,Block)	\
    ( (This)->lpVtbl -> put_Lock(This,Block) ) 

#define IGcadLayer_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadLayer_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadLayer_get_Plottable(This,bPlottable)	\
    ( (This)->lpVtbl -> get_Plottable(This,bPlottable) ) 

#define IGcadLayer_put_Plottable(This,bPlottable)	\
    ( (This)->lpVtbl -> put_Plottable(This,bPlottable) ) 

#define IGcadLayer_get_ViewportDefault(This,bDefault)	\
    ( (This)->lpVtbl -> get_ViewportDefault(This,bDefault) ) 

#define IGcadLayer_put_ViewportDefault(This,bDefault)	\
    ( (This)->lpVtbl -> put_ViewportDefault(This,bDefault) ) 

#define IGcadLayer_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLayer_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLayer_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLayer_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLayer_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IGcadLayer_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IGcadLayer_get_Used(This,bUsed)	\
    ( (This)->lpVtbl -> get_Used(This,bUsed) ) 

#define IGcadLayer_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLayer_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLayer_INTERFACE_DEFINED__ */


#ifndef __IGcadLineTypes_INTERFACE_DEFINED__
#define __IGcadLineTypes_INTERFACE_DEFINED__

/* interface IGcadLineTypes */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLineTypes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D3855C97-5A8D-482A-BC6A-1FC20E79638B")
    IGcadLineTypes : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLineType **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLineType **pLinetype) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR FileName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLineTypesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLineTypes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLineTypes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLineTypes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLineTypes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLineTypes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLineTypes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLineTypes * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLineTypes * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLineTypes * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLineTypes * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLineTypes * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLineTypes * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLineTypes * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLineTypes * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLineTypes * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLineTypes * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLineTypes * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLineTypes * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLineTypes * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLineTypes * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLineTypes * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLineTypes * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadLineTypes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLineType **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadLineTypes * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadLineTypes * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadLineTypes * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLineType **pLinetype);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Load )( 
            IGcadLineTypes * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR FileName);
        
        END_INTERFACE
    } IGcadLineTypesVtbl;

    interface IGcadLineTypes
    {
        CONST_VTBL struct IGcadLineTypesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLineTypes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLineTypes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLineTypes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLineTypes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLineTypes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLineTypes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLineTypes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLineTypes_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLineTypes_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLineTypes_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLineTypes_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLineTypes_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLineTypes_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLineTypes_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLineTypes_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLineTypes_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLineTypes_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLineTypes_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLineTypes_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLineTypes_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLineTypes_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLineTypes_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLineTypes_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadLineTypes_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadLineTypes_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadLineTypes_Add(This,Name,pLinetype)	\
    ( (This)->lpVtbl -> Add(This,Name,pLinetype) ) 

#define IGcadLineTypes_Load(This,Name,FileName)	\
    ( (This)->lpVtbl -> Load(This,Name,FileName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLineTypes_INTERFACE_DEFINED__ */


#ifndef __IGcadLineType_INTERFACE_DEFINED__
#define __IGcadLineType_INTERFACE_DEFINED__

/* interface IGcadLineType */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLineType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74F20CD6-B755-4981-8113-1CCCD81B6E40")
    IGcadLineType : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *bstrDes) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDes) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLineTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLineType * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLineType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLineType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLineType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLineType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLineType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLineType * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLineType * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLineType * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLineType * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLineType * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLineType * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLineType * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLineType * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLineType * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLineType * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLineType * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLineType * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLineType * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLineType * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLineType * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLineType * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IGcadLineType * This,
            /* [retval][out] */ BSTR *bstrDes);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IGcadLineType * This,
            /* [in] */ BSTR bstrDes);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLineType * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLineType * This,
            /* [in] */ BSTR bstrName);
        
        END_INTERFACE
    } IGcadLineTypeVtbl;

    interface IGcadLineType
    {
        CONST_VTBL struct IGcadLineTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLineType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLineType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLineType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLineType_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLineType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLineType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLineType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLineType_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLineType_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLineType_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLineType_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLineType_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLineType_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLineType_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLineType_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLineType_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLineType_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLineType_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLineType_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLineType_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLineType_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLineType_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLineType_get_Description(This,bstrDes)	\
    ( (This)->lpVtbl -> get_Description(This,bstrDes) ) 

#define IGcadLineType_put_Description(This,bstrDes)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDes) ) 

#define IGcadLineType_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadLineType_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLineType_INTERFACE_DEFINED__ */


#ifndef __IGcadDictionaries_INTERFACE_DEFINED__
#define __IGcadDictionaries_INTERFACE_DEFINED__

/* interface IGcadDictionaries */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5746495B-F1EA-41CC-80B5-3265259A3B84")
    IGcadDictionaries : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadObject **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadDictionary **pDimStyle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDictionaries * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDictionaries * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDictionaries * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDictionaries * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDictionaries * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDictionaries * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDictionaries * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDictionaries * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDictionaries * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDictionaries * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDictionaries * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDictionaries * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDictionaries * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDictionaries * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDictionaries * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDictionaries * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadDictionaries * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadObject **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadDictionaries * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadDictionaries * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadDictionaries * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadDictionary **pDimStyle);
        
        END_INTERFACE
    } IGcadDictionariesVtbl;

    interface IGcadDictionaries
    {
        CONST_VTBL struct IGcadDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDictionaries_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDictionaries_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDictionaries_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDictionaries_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDictionaries_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDictionaries_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDictionaries_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDictionaries_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDictionaries_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDictionaries_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDictionaries_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDictionaries_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDictionaries_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDictionaries_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDictionaries_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDictionaries_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadDictionaries_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadDictionaries_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadDictionaries_Add(This,Name,pDimStyle)	\
    ( (This)->lpVtbl -> Add(This,Name,pDimStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDictionaries_INTERFACE_DEFINED__ */


#ifndef __IGcadDictionary_INTERFACE_DEFINED__
#define __IGcadDictionary_INTERFACE_DEFINED__

/* interface IGcadDictionary */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("602F7938-A443-4DB2-AEB7-E52C82522048")
    IGcadDictionary : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddObject( 
            /* [in] */ BSTR Keyword,
            /* [in] */ BSTR ObjectName,
            /* [retval][out] */ IGcadObject **pNewObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ IGcadObject *Object,
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadObject **pObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadObject **pObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Rename( 
            /* [in] */ BSTR OldName,
            /* [in] */ BSTR NewName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Replace( 
            /* [in] */ BSTR OldName,
            /* [in] */ IGcadObject *pObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadObject **pItem) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddXRecord( 
            /* [in] */ BSTR Keyword,
            /* [retval][out] */ IGcadXRecord **pNewXRecord) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDictionary * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadDictionary * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadDictionary * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadDictionary * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadDictionary * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadDictionary * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadDictionary * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDictionary * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadDictionary * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadDictionary * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadDictionary * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadDictionary * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadDictionary * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadDictionary * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadDictionary * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadDictionary * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadDictionary * This,
            /* [in] */ BSTR pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddObject )( 
            IGcadDictionary * This,
            /* [in] */ BSTR Keyword,
            /* [in] */ BSTR ObjectName,
            /* [retval][out] */ IGcadObject **pNewObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IGcadDictionary * This,
            /* [in] */ IGcadObject *Object,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IGcadDictionary * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadObject **pObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IGcadDictionary * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadObject **pObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rename )( 
            IGcadDictionary * This,
            /* [in] */ BSTR OldName,
            /* [in] */ BSTR NewName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Replace )( 
            IGcadDictionary * This,
            /* [in] */ BSTR OldName,
            /* [in] */ IGcadObject *pObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadDictionary * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadObject **pItem);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadDictionary * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadDictionary * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddXRecord )( 
            IGcadDictionary * This,
            /* [in] */ BSTR Keyword,
            /* [retval][out] */ IGcadXRecord **pNewXRecord);
        
        END_INTERFACE
    } IGcadDictionaryVtbl;

    interface IGcadDictionary
    {
        CONST_VTBL struct IGcadDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDictionary_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadDictionary_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadDictionary_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadDictionary_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadDictionary_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadDictionary_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadDictionary_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadDictionary_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadDictionary_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadDictionary_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadDictionary_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadDictionary_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadDictionary_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadDictionary_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadDictionary_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadDictionary_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadDictionary_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadDictionary_AddObject(This,Keyword,ObjectName,pNewObj)	\
    ( (This)->lpVtbl -> AddObject(This,Keyword,ObjectName,pNewObj) ) 

#define IGcadDictionary_GetName(This,Object,bstrName)	\
    ( (This)->lpVtbl -> GetName(This,Object,bstrName) ) 

#define IGcadDictionary_GetObject(This,Name,pObj)	\
    ( (This)->lpVtbl -> GetObject(This,Name,pObj) ) 

#define IGcadDictionary_Remove(This,Name,pObj)	\
    ( (This)->lpVtbl -> Remove(This,Name,pObj) ) 

#define IGcadDictionary_Rename(This,OldName,NewName)	\
    ( (This)->lpVtbl -> Rename(This,OldName,NewName) ) 

#define IGcadDictionary_Replace(This,OldName,pObj)	\
    ( (This)->lpVtbl -> Replace(This,OldName,pObj) ) 

#define IGcadDictionary_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadDictionary_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadDictionary_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadDictionary_AddXRecord(This,Keyword,pNewXRecord)	\
    ( (This)->lpVtbl -> AddXRecord(This,Keyword,pNewXRecord) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDictionary_INTERFACE_DEFINED__ */


#ifndef __IGcadXRecord_INTERFACE_DEFINED__
#define __IGcadXRecord_INTERFACE_DEFINED__

/* interface IGcadXRecord */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadXRecord;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01F1ECD2-70F6-4DF7-A738-2C8CDE881F6D")
    IGcadXRecord : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetXRecordData( 
            /* [out] */ VARIANT *XRecordDataType,
            /* [out] */ VARIANT *XRecordDataValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetXRecordData( 
            /* [in] */ VARIANT XRecordDataType,
            /* [in] */ VARIANT XRecordDataValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TranslateIDs( 
            /* [retval][out] */ VARIANT_BOOL *xlateIds) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TranslateIDs( 
            /* [in] */ VARIANT_BOOL xlateIds) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadXRecordVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadXRecord * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadXRecord * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadXRecord * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadXRecord * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadXRecord * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadXRecord * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadXRecord * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadXRecord * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadXRecord * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadXRecord * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadXRecord * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadXRecord * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadXRecord * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadXRecord * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadXRecord * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadXRecord * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadXRecord * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadXRecord * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadXRecord * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadXRecord * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadXRecord * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadXRecord * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadXRecord * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadXRecord * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXRecordData )( 
            IGcadXRecord * This,
            /* [out] */ VARIANT *XRecordDataType,
            /* [out] */ VARIANT *XRecordDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXRecordData )( 
            IGcadXRecord * This,
            /* [in] */ VARIANT XRecordDataType,
            /* [in] */ VARIANT XRecordDataValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TranslateIDs )( 
            IGcadXRecord * This,
            /* [retval][out] */ VARIANT_BOOL *xlateIds);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TranslateIDs )( 
            IGcadXRecord * This,
            /* [in] */ VARIANT_BOOL xlateIds);
        
        END_INTERFACE
    } IGcadXRecordVtbl;

    interface IGcadXRecord
    {
        CONST_VTBL struct IGcadXRecordVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadXRecord_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadXRecord_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadXRecord_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadXRecord_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadXRecord_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadXRecord_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadXRecord_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadXRecord_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadXRecord_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadXRecord_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadXRecord_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadXRecord_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadXRecord_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadXRecord_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadXRecord_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadXRecord_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadXRecord_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadXRecord_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadXRecord_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadXRecord_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadXRecord_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadXRecord_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadXRecord_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadXRecord_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadXRecord_GetXRecordData(This,XRecordDataType,XRecordDataValue)	\
    ( (This)->lpVtbl -> GetXRecordData(This,XRecordDataType,XRecordDataValue) ) 

#define IGcadXRecord_SetXRecordData(This,XRecordDataType,XRecordDataValue)	\
    ( (This)->lpVtbl -> SetXRecordData(This,XRecordDataType,XRecordDataValue) ) 

#define IGcadXRecord_get_TranslateIDs(This,xlateIds)	\
    ( (This)->lpVtbl -> get_TranslateIDs(This,xlateIds) ) 

#define IGcadXRecord_put_TranslateIDs(This,xlateIds)	\
    ( (This)->lpVtbl -> put_TranslateIDs(This,xlateIds) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadXRecord_INTERFACE_DEFINED__ */


#ifndef __IGcadDatabase_INTERFACE_DEFINED__
#define __IGcadDatabase_INTERFACE_DEFINED__

/* interface IGcadDatabase */
/* [unique][oleautomation][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadDatabase;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2FA4E35A-68BA-4595-92B1-73788B8357AE")
    IGcadDatabase : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ModelSpace( 
            /* [retval][out] */ IGcadModelSpace **pMSpace) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PaperSpace( 
            /* [retval][out] */ IGcadPaperSpace **pPSpace) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Blocks( 
            /* [retval][out] */ IGcadBlocks **pBlocks) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CopyObjects( 
            /* [in] */ VARIANT Objects,
            /* [optional][in] */ VARIANT Owner,
            /* [optional][out][in] */ VARIANT *IdPairs,
            /* [retval][out] */ VARIANT *pNewObjects) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Groups( 
            /* [retval][out] */ IGcadGroups **pGroups) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimStyles( 
            /* [retval][out] */ IGcadDimStyles **pDimStyles) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layers( 
            /* [retval][out] */ IGcadLayers **pLayers) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Linetypes( 
            /* [retval][out] */ IGcadLineTypes **pLinetypes) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dictionaries( 
            /* [retval][out] */ IGcadDictionaries **pDictionaries) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RegisteredApplications( 
            /* [retval][out] */ IGcadRegisteredApplications **pRegApps) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyles( 
            /* [retval][out] */ IGcadTextStyles **pTextStyles) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserCoordinateSystems( 
            /* [retval][out] */ IGcadUCSs **pUCSs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Views( 
            /* [retval][out] */ IGcadViews **pViews) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Viewports( 
            /* [retval][out] */ IGcadViewports **pViewports) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ElevationModelSpace( 
            /* [retval][out] */ double *Elevation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ElevationModelSpace( 
            /* [in] */ double Elevation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ElevationPaperSpace( 
            /* [retval][out] */ double *Elevation) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ElevationPaperSpace( 
            /* [in] */ double Elevation) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Limits( 
            /* [retval][out] */ VARIANT *Limits) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Limits( 
            /* [in] */ VARIANT Limits) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE HandleToObject( 
            /* [in] */ BSTR Handle,
            /* [retval][out] */ IDispatch **pObj) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ObjectIdToObject( 
            /* [in] */ LONG_PTR ObjectID,
            /* [retval][out] */ IDispatch **pObj) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layouts( 
            /* [retval][out] */ IGcadLayouts **pLayouts) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotConfigurations( 
            /* [retval][out] */ IGcadPlotConfigurations **pPlotConfigs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Preferences( 
            /* [retval][out] */ IGcadDatabasePreferences **pPref) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileDependencies( 
            /* [retval][out] */ IGcadFileDependencies **pFDM) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SummaryInfo( 
            /* [retval][out] */ IGcadSummaryInfo **pSummaryInfo) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionManager( 
            /* [retval][out] */ IGcadSectionManager **pSecMgr) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Materials( 
            /* [retval][out] */ IGcadMaterials **pMaterials) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ObjectIdToObject32( 
            /* [in] */ long ObjectID,
            /* [retval][out] */ IDispatch **pObj) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDatabaseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDatabase * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDatabase * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDatabase * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDatabase * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDatabase * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDatabase * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ModelSpace )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadModelSpace **pMSpace);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PaperSpace )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadPaperSpace **pPSpace);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Blocks )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadBlocks **pBlocks);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CopyObjects )( 
            IGcadDatabase * This,
            /* [in] */ VARIANT Objects,
            /* [optional][in] */ VARIANT Owner,
            /* [optional][out][in] */ VARIANT *IdPairs,
            /* [retval][out] */ VARIANT *pNewObjects);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Groups )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadGroups **pGroups);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimStyles )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadDimStyles **pDimStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layers )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadLayers **pLayers);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetypes )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadLineTypes **pLinetypes);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dictionaries )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadDictionaries **pDictionaries);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RegisteredApplications )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadRegisteredApplications **pRegApps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyles )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadTextStyles **pTextStyles);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserCoordinateSystems )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadUCSs **pUCSs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Views )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadViews **pViews);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Viewports )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadViewports **pViewports);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ElevationModelSpace )( 
            IGcadDatabase * This,
            /* [retval][out] */ double *Elevation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ElevationModelSpace )( 
            IGcadDatabase * This,
            /* [in] */ double Elevation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ElevationPaperSpace )( 
            IGcadDatabase * This,
            /* [retval][out] */ double *Elevation);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ElevationPaperSpace )( 
            IGcadDatabase * This,
            /* [in] */ double Elevation);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IGcadDatabase * This,
            /* [retval][out] */ VARIANT *Limits);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Limits )( 
            IGcadDatabase * This,
            /* [in] */ VARIANT Limits);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *HandleToObject )( 
            IGcadDatabase * This,
            /* [in] */ BSTR Handle,
            /* [retval][out] */ IDispatch **pObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ObjectIdToObject )( 
            IGcadDatabase * This,
            /* [in] */ LONG_PTR ObjectID,
            /* [retval][out] */ IDispatch **pObj);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layouts )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadLayouts **pLayouts);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotConfigurations )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadPlotConfigurations **pPlotConfigs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadDatabasePreferences **pPref);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileDependencies )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadFileDependencies **pFDM);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SummaryInfo )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadSummaryInfo **pSummaryInfo);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionManager )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadSectionManager **pSecMgr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Materials )( 
            IGcadDatabase * This,
            /* [retval][out] */ IGcadMaterials **pMaterials);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ObjectIdToObject32 )( 
            IGcadDatabase * This,
            /* [in] */ long ObjectID,
            /* [retval][out] */ IDispatch **pObj);
        
        END_INTERFACE
    } IGcadDatabaseVtbl;

    interface IGcadDatabase
    {
        CONST_VTBL struct IGcadDatabaseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDatabase_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDatabase_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDatabase_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDatabase_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDatabase_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDatabase_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDatabase_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDatabase_get_ModelSpace(This,pMSpace)	\
    ( (This)->lpVtbl -> get_ModelSpace(This,pMSpace) ) 

#define IGcadDatabase_get_PaperSpace(This,pPSpace)	\
    ( (This)->lpVtbl -> get_PaperSpace(This,pPSpace) ) 

#define IGcadDatabase_get_Blocks(This,pBlocks)	\
    ( (This)->lpVtbl -> get_Blocks(This,pBlocks) ) 

#define IGcadDatabase_CopyObjects(This,Objects,Owner,IdPairs,pNewObjects)	\
    ( (This)->lpVtbl -> CopyObjects(This,Objects,Owner,IdPairs,pNewObjects) ) 

#define IGcadDatabase_get_Groups(This,pGroups)	\
    ( (This)->lpVtbl -> get_Groups(This,pGroups) ) 

#define IGcadDatabase_get_DimStyles(This,pDimStyles)	\
    ( (This)->lpVtbl -> get_DimStyles(This,pDimStyles) ) 

#define IGcadDatabase_get_Layers(This,pLayers)	\
    ( (This)->lpVtbl -> get_Layers(This,pLayers) ) 

#define IGcadDatabase_get_Linetypes(This,pLinetypes)	\
    ( (This)->lpVtbl -> get_Linetypes(This,pLinetypes) ) 

#define IGcadDatabase_get_Dictionaries(This,pDictionaries)	\
    ( (This)->lpVtbl -> get_Dictionaries(This,pDictionaries) ) 

#define IGcadDatabase_get_RegisteredApplications(This,pRegApps)	\
    ( (This)->lpVtbl -> get_RegisteredApplications(This,pRegApps) ) 

#define IGcadDatabase_get_TextStyles(This,pTextStyles)	\
    ( (This)->lpVtbl -> get_TextStyles(This,pTextStyles) ) 

#define IGcadDatabase_get_UserCoordinateSystems(This,pUCSs)	\
    ( (This)->lpVtbl -> get_UserCoordinateSystems(This,pUCSs) ) 

#define IGcadDatabase_get_Views(This,pViews)	\
    ( (This)->lpVtbl -> get_Views(This,pViews) ) 

#define IGcadDatabase_get_Viewports(This,pViewports)	\
    ( (This)->lpVtbl -> get_Viewports(This,pViewports) ) 

#define IGcadDatabase_get_ElevationModelSpace(This,Elevation)	\
    ( (This)->lpVtbl -> get_ElevationModelSpace(This,Elevation) ) 

#define IGcadDatabase_put_ElevationModelSpace(This,Elevation)	\
    ( (This)->lpVtbl -> put_ElevationModelSpace(This,Elevation) ) 

#define IGcadDatabase_get_ElevationPaperSpace(This,Elevation)	\
    ( (This)->lpVtbl -> get_ElevationPaperSpace(This,Elevation) ) 

#define IGcadDatabase_put_ElevationPaperSpace(This,Elevation)	\
    ( (This)->lpVtbl -> put_ElevationPaperSpace(This,Elevation) ) 

#define IGcadDatabase_get_Limits(This,Limits)	\
    ( (This)->lpVtbl -> get_Limits(This,Limits) ) 

#define IGcadDatabase_put_Limits(This,Limits)	\
    ( (This)->lpVtbl -> put_Limits(This,Limits) ) 

#define IGcadDatabase_HandleToObject(This,Handle,pObj)	\
    ( (This)->lpVtbl -> HandleToObject(This,Handle,pObj) ) 

#define IGcadDatabase_ObjectIdToObject(This,ObjectID,pObj)	\
    ( (This)->lpVtbl -> ObjectIdToObject(This,ObjectID,pObj) ) 

#define IGcadDatabase_get_Layouts(This,pLayouts)	\
    ( (This)->lpVtbl -> get_Layouts(This,pLayouts) ) 

#define IGcadDatabase_get_PlotConfigurations(This,pPlotConfigs)	\
    ( (This)->lpVtbl -> get_PlotConfigurations(This,pPlotConfigs) ) 

#define IGcadDatabase_get_Preferences(This,pPref)	\
    ( (This)->lpVtbl -> get_Preferences(This,pPref) ) 

#define IGcadDatabase_get_FileDependencies(This,pFDM)	\
    ( (This)->lpVtbl -> get_FileDependencies(This,pFDM) ) 

#define IGcadDatabase_get_SummaryInfo(This,pSummaryInfo)	\
    ( (This)->lpVtbl -> get_SummaryInfo(This,pSummaryInfo) ) 

#define IGcadDatabase_get_SectionManager(This,pSecMgr)	\
    ( (This)->lpVtbl -> get_SectionManager(This,pSecMgr) ) 

#define IGcadDatabase_get_Materials(This,pMaterials)	\
    ( (This)->lpVtbl -> get_Materials(This,pMaterials) ) 

#define IGcadDatabase_ObjectIdToObject32(This,ObjectID,pObj)	\
    ( (This)->lpVtbl -> ObjectIdToObject32(This,ObjectID,pObj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDatabase_INTERFACE_DEFINED__ */


#ifndef __IGcadSectionSettings_INTERFACE_DEFINED__
#define __IGcadSectionSettings_INTERFACE_DEFINED__

/* interface IGcadSectionSettings */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSectionSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1E7C33BB-06C6-49AC-80EA-D92EEE292C90")
    IGcadSectionSettings : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentSectionType( 
            /* [retval][out] */ GcSectionType *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentSectionType( 
            /* [in] */ GcSectionType pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSectionTypeSettings( 
            /* [in] */ GcSectionType secType,
            /* [retval][out] */ IGcadSectionTypeSettings **pUnk) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSectionSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSectionSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSectionSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSectionSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSectionSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSectionSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSectionSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSectionSettings * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSectionSettings * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSectionSettings * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSectionSettings * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSectionSettings * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentSectionType )( 
            IGcadSectionSettings * This,
            /* [retval][out] */ GcSectionType *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentSectionType )( 
            IGcadSectionSettings * This,
            /* [in] */ GcSectionType pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSectionTypeSettings )( 
            IGcadSectionSettings * This,
            /* [in] */ GcSectionType secType,
            /* [retval][out] */ IGcadSectionTypeSettings **pUnk);
        
        END_INTERFACE
    } IGcadSectionSettingsVtbl;

    interface IGcadSectionSettings
    {
        CONST_VTBL struct IGcadSectionSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSectionSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSectionSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSectionSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSectionSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSectionSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSectionSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSectionSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSectionSettings_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSectionSettings_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSectionSettings_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSectionSettings_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSectionSettings_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSectionSettings_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSectionSettings_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSectionSettings_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSectionSettings_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSectionSettings_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSectionSettings_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSectionSettings_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSectionSettings_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSectionSettings_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSectionSettings_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSectionSettings_get_CurrentSectionType(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentSectionType(This,pVal) ) 

#define IGcadSectionSettings_put_CurrentSectionType(This,pVal)	\
    ( (This)->lpVtbl -> put_CurrentSectionType(This,pVal) ) 

#define IGcadSectionSettings_GetSectionTypeSettings(This,secType,pUnk)	\
    ( (This)->lpVtbl -> GetSectionTypeSettings(This,secType,pUnk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSectionSettings_INTERFACE_DEFINED__ */


#ifndef __IGcadPaperSpace_INTERFACE_DEFINED__
#define __IGcadPaperSpace_INTERFACE_DEFINED__

/* interface IGcadPaperSpace */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPaperSpace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("62F4EC29-A890-4FB4-A104-A89F025C1C0A")
    IGcadPaperSpace : public IGcadBlock
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddPViewport( 
            /* [in] */ VARIANT Center,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadPViewport **pPViewport) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPaperSpaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPaperSpace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPaperSpace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPaperSpace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPaperSpace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPaperSpace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPaperSpace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPaperSpace * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPaperSpace * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPaperSpace * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadEntity **pItem);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomObject )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR ClassName,
            /* [retval][out] */ IDispatch **pObject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DFace )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcad3DFace **pFace3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DMesh )( 
            IGcadPaperSpace * This,
            /* [in] */ int M,
            /* [in] */ int N,
            /* [in] */ VARIANT PointsMatrix,
            /* [retval][out] */ IGcadPolygonMesh **pMesh3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add3DPoly )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcad3DPolyline **pPoly3d);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddArc )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double StartAngle,
            /* [in] */ double EndAngle,
            /* [retval][out] */ IGcadArc **pArc);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IGcadPaperSpace * This,
            /* [in] */ double Height,
            /* [in] */ GcAttributeMode Mode,
            /* [in] */ BSTR Prompt,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Tag,
            /* [in] */ BSTR Value,
            /* [retval][out] */ IGcadAttribute **pAttr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddBox )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Origin,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pBox);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCircle )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcadCircle **pCircle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCone )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double BaseRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCylinder )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAligned )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT TextPosition,
            /* [retval][out] */ IGcadDimAligned **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimAngular )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDimAngular **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT FarChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimDiametric **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRotated )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT ExtLine1Point,
            /* [in] */ VARIANT ExtLine2Point,
            /* [in] */ VARIANT DimLineLocation,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadDimRotated **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT DefinitionPoint,
            /* [in] */ VARIANT LeaderEndPoint,
            /* [in] */ int UseXAxis,
            /* [retval][out] */ IGcadDimOrdinate **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadial )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ double LeaderLength,
            /* [retval][out] */ IGcadDimRadial **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipse )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT MajorAxis,
            /* [in] */ double RadiusRatio,
            /* [retval][out] */ IGcadEllipse **pEllipse);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCone);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double MajorRadius,
            /* [in] */ double MinorRadius,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pEllipCyl);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )( 
            IGcadPaperSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ double Height,
            /* [in] */ double TaperAngle,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )( 
            IGcadPaperSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ IDispatch *Path,
            /* [retval][out] */ IGcad3DSolid **pExtrSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeader )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ IGcadEntity *Annotation,
            /* [in] */ GcLeaderType Type,
            /* [retval][out] */ IGcadLeader **pLeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMText )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Width,
            /* [in] */ BSTR Text,
            /* [retval][out] */ IGcadMText **pMtext);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPoint )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Point,
            /* [retval][out] */ IGcadPoint **pPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadLWPolyline **pLWPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT VerticesList,
            /* [retval][out] */ IGcadPolyline **pPolyline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRay )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadRay **pRay);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRegion )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT ObjectList,
            /* [retval][out] */ VARIANT *pRegions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )( 
            IGcadPaperSpace * This,
            /* [in] */ IGcadRegion *Profile,
            /* [in] */ VARIANT AxisPoint,
            /* [in] */ VARIANT AxisDir,
            /* [in] */ double Angle,
            /* [retval][out] */ IGcad3DSolid **pRevolSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadShape **pShape);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSolid )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [in] */ VARIANT Point4,
            /* [retval][out] */ IGcadSolid **pSolid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSphere )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Radius,
            /* [retval][out] */ IGcad3DSolid **pSphere);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSpline )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [in] */ VARIANT StartTangent,
            /* [in] */ VARIANT EndTangent,
            /* [retval][out] */ IGcadSpline **pSpline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddText )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR TextString,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadText **pText);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTolerance )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR Text,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ VARIANT Direction,
            /* [retval][out] */ IGcadTolerance **pTolerance);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTorus )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double TorusRadius,
            /* [in] */ double TubeRadius,
            /* [retval][out] */ IGcad3DSolid **pTorus);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTrace )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [retval][out] */ IGcadTrace **pTrace);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddWedge )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Length,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcad3DSolid **pWedge);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddXline )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IGcadXline **pXline);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBlock )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadBlockReference **pBlkRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddHatch )( 
            IGcadPaperSpace * This,
            /* [in] */ int PatternType,
            /* [in] */ BSTR PatternName,
            /* [in] */ VARIANT_BOOL Associativity,
            /* [optional][in] */ VARIANT HatchObjectType,
            /* [retval][out] */ IGcadHatch **pHatch);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddRaster )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR imageFileName,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double ScaleFactor,
            /* [in] */ double RotationAngle,
            /* [retval][out] */ IGcadRasterImage **pRaster);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT StartPoint,
            /* [in] */ VARIANT EndPoint,
            /* [retval][out] */ IGcadLine **pLine);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLayout )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bIsLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IGcadLayout **pLayout);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsXRef )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT_BOOL *pIsXRref);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ BSTR Name,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [in] */ long RowSpacing,
            /* [in] */ long ColumnSpacing,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadMInsertBlock **pMInsertBlk);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT VertexList,
            /* [in] */ VARIANT FaceList,
            /* [retval][out] */ IGcadPolyfaceMesh **pPFMesh);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLine )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT VertexList,
            /* [retval][out] */ IGcadMLine **pMLine);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT AngleVertex,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT TextPoint,
            /* [retval][out] */ IGcadDim3PointAngular **pDim);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR PathName,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ double Xscale,
            /* [in] */ double Yscale,
            /* [in] */ double Zscale,
            /* [in] */ double Rotation,
            /* [in] */ VARIANT_BOOL bOverlay,
            /* [optional][in] */ VARIANT Password,
            /* [retval][out] */ IGcadExternalReference **pXRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Unload )( 
            IGcadPaperSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            IGcadPaperSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Bind )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT_BOOL bPrefixName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IGcadPaperSpace * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddTable )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT InsertionPoint,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [in] */ double RowHeight,
            /* [in] */ double ColWidth,
            /* [retval][out] */ IGcadTable **pTable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comments )( 
            IGcadPaperSpace * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Units )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ GcInsertUnits *pIU);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Units )( 
            IGcadPaperSpace * This,
            /* [in] */ GcInsertUnits pIU);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Explodable )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT_BOOL *bExplodable);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Explodable )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT_BOOL bExplodable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ GcBlockScaling *pBS);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )( 
            IGcadPaperSpace * This,
            /* [in] */ GcBlockScaling pBS);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )( 
            IGcadPaperSpace * This,
            /* [retval][out] */ VARIANT_BOOL *pDynamicBlock);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimArc )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT ArcCenter,
            /* [in] */ VARIANT FirstEndPoint,
            /* [in] */ VARIANT SecondEndPoint,
            /* [in] */ VARIANT ArcPoint,
            /* [retval][out] */ IGcadDimArcLength **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ VARIANT ChordPoint,
            /* [in] */ VARIANT OverrideCenter,
            /* [in] */ VARIANT JogPoint,
            /* [in] */ double JogAngle,
            /* [retval][out] */ IGcadDimRadialLarge **pDim);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddSection )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint,
            /* [in] */ VARIANT planeVector,
            /* [retval][out] */ IGcadSection **ppSecPlane);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMLeader )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT PointsArray,
            /* [out] */ int *leaderLineIndex,
            /* [retval][out] */ IGcadMLeader **pMLeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddPViewport )( 
            IGcadPaperSpace * This,
            /* [in] */ VARIANT Center,
            /* [in] */ double Width,
            /* [in] */ double Height,
            /* [retval][out] */ IGcadPViewport **pPViewport);
        
        END_INTERFACE
    } IGcadPaperSpaceVtbl;

    interface IGcadPaperSpace
    {
        CONST_VTBL struct IGcadPaperSpaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPaperSpace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPaperSpace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPaperSpace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPaperSpace_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPaperSpace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPaperSpace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPaperSpace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPaperSpace_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPaperSpace_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPaperSpace_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPaperSpace_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPaperSpace_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPaperSpace_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPaperSpace_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPaperSpace_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPaperSpace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPaperSpace_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPaperSpace_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPaperSpace_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPaperSpace_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPaperSpace_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPaperSpace_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPaperSpace_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadPaperSpace_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadPaperSpace_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadPaperSpace_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadPaperSpace_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadPaperSpace_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadPaperSpace_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadPaperSpace_AddCustomObject(This,ClassName,pObject)	\
    ( (This)->lpVtbl -> AddCustomObject(This,ClassName,pObject) ) 

#define IGcadPaperSpace_Add3DFace(This,Point1,Point2,point3,Point4,pFace3d)	\
    ( (This)->lpVtbl -> Add3DFace(This,Point1,Point2,point3,Point4,pFace3d) ) 

#define IGcadPaperSpace_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ( (This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d) ) 

#define IGcadPaperSpace_Add3DPoly(This,PointsArray,pPoly3d)	\
    ( (This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d) ) 

#define IGcadPaperSpace_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ( (This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc) ) 

#define IGcadPaperSpace_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ( (This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr) ) 

#define IGcadPaperSpace_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ( (This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox) ) 

#define IGcadPaperSpace_AddCircle(This,Center,Radius,pCircle)	\
    ( (This)->lpVtbl -> AddCircle(This,Center,Radius,pCircle) ) 

#define IGcadPaperSpace_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ( (This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone) ) 

#define IGcadPaperSpace_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ( (This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl) ) 

#define IGcadPaperSpace_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ( (This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim) ) 

#define IGcadPaperSpace_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadPaperSpace_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim) ) 

#define IGcadPaperSpace_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim) ) 

#define IGcadPaperSpace_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ( (This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim) ) 

#define IGcadPaperSpace_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ( (This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim) ) 

#define IGcadPaperSpace_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ( (This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse) ) 

#define IGcadPaperSpace_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ( (This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone) ) 

#define IGcadPaperSpace_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ( (This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl) ) 

#define IGcadPaperSpace_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid) ) 

#define IGcadPaperSpace_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ( (This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid) ) 

#define IGcadPaperSpace_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ( (This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader) ) 

#define IGcadPaperSpace_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ( (This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext) ) 

#define IGcadPaperSpace_AddPoint(This,Point,pPoint)	\
    ( (This)->lpVtbl -> AddPoint(This,Point,pPoint) ) 

#define IGcadPaperSpace_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ( (This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline) ) 

#define IGcadPaperSpace_AddPolyline(This,VerticesList,pPolyline)	\
    ( (This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline) ) 

#define IGcadPaperSpace_AddRay(This,Point1,Point2,pRay)	\
    ( (This)->lpVtbl -> AddRay(This,Point1,Point2,pRay) ) 

#define IGcadPaperSpace_AddRegion(This,ObjectList,pRegions)	\
    ( (This)->lpVtbl -> AddRegion(This,ObjectList,pRegions) ) 

#define IGcadPaperSpace_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ( (This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid) ) 

#define IGcadPaperSpace_AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape)	\
    ( (This)->lpVtbl -> AddShape(This,Name,InsertionPoint,ScaleFactor,RotationAngle,pShape) ) 

#define IGcadPaperSpace_AddSolid(This,Point1,Point2,point3,Point4,pSolid)	\
    ( (This)->lpVtbl -> AddSolid(This,Point1,Point2,point3,Point4,pSolid) ) 

#define IGcadPaperSpace_AddSphere(This,Center,Radius,pSphere)	\
    ( (This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere) ) 

#define IGcadPaperSpace_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ( (This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline) ) 

#define IGcadPaperSpace_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ( (This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText) ) 

#define IGcadPaperSpace_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ( (This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance) ) 

#define IGcadPaperSpace_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ( (This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus) ) 

#define IGcadPaperSpace_AddTrace(This,PointsArray,pTrace)	\
    ( (This)->lpVtbl -> AddTrace(This,PointsArray,pTrace) ) 

#define IGcadPaperSpace_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ( (This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge) ) 

#define IGcadPaperSpace_AddXline(This,Point1,Point2,pXline)	\
    ( (This)->lpVtbl -> AddXline(This,Point1,Point2,pXline) ) 

#define IGcadPaperSpace_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ( (This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef) ) 

#define IGcadPaperSpace_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ( (This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch) ) 

#define IGcadPaperSpace_AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ( (This)->lpVtbl -> AddRaster(This,imageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster) ) 

#define IGcadPaperSpace_AddLine(This,StartPoint,EndPoint,pLine)	\
    ( (This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine) ) 

#define IGcadPaperSpace_get_IsLayout(This,bIsLayout)	\
    ( (This)->lpVtbl -> get_IsLayout(This,bIsLayout) ) 

#define IGcadPaperSpace_get_Layout(This,pLayout)	\
    ( (This)->lpVtbl -> get_Layout(This,pLayout) ) 

#define IGcadPaperSpace_get_IsXRef(This,pIsXRref)	\
    ( (This)->lpVtbl -> get_IsXRef(This,pIsXRref) ) 

#define IGcadPaperSpace_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ( (This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk) ) 

#define IGcadPaperSpace_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ( (This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh) ) 

#define IGcadPaperSpace_AddMLine(This,VertexList,pMLine)	\
    ( (This)->lpVtbl -> AddMLine(This,VertexList,pMLine) ) 

#define IGcadPaperSpace_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ( (This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim) ) 

#define IGcadPaperSpace_get_XRefDatabase(This,pDatabase)	\
    ( (This)->lpVtbl -> get_XRefDatabase(This,pDatabase) ) 

#define IGcadPaperSpace_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ( (This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef) ) 

#define IGcadPaperSpace_Unload(This)	\
    ( (This)->lpVtbl -> Unload(This) ) 

#define IGcadPaperSpace_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define IGcadPaperSpace_Bind(This,bPrefixName)	\
    ( (This)->lpVtbl -> Bind(This,bPrefixName) ) 

#define IGcadPaperSpace_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#define IGcadPaperSpace_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ( (This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable) ) 

#define IGcadPaperSpace_get_Path(This,bstrName)	\
    ( (This)->lpVtbl -> get_Path(This,bstrName) ) 

#define IGcadPaperSpace_put_Path(This,bstrName)	\
    ( (This)->lpVtbl -> put_Path(This,bstrName) ) 

#define IGcadPaperSpace_get_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> get_Comments(This,bstrName) ) 

#define IGcadPaperSpace_put_Comments(This,bstrName)	\
    ( (This)->lpVtbl -> put_Comments(This,bstrName) ) 

#define IGcadPaperSpace_get_Units(This,pIU)	\
    ( (This)->lpVtbl -> get_Units(This,pIU) ) 

#define IGcadPaperSpace_put_Units(This,pIU)	\
    ( (This)->lpVtbl -> put_Units(This,pIU) ) 

#define IGcadPaperSpace_get_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> get_Explodable(This,bExplodable) ) 

#define IGcadPaperSpace_put_Explodable(This,bExplodable)	\
    ( (This)->lpVtbl -> put_Explodable(This,bExplodable) ) 

#define IGcadPaperSpace_get_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> get_BlockScaling(This,pBS) ) 

#define IGcadPaperSpace_put_BlockScaling(This,pBS)	\
    ( (This)->lpVtbl -> put_BlockScaling(This,pBS) ) 

#define IGcadPaperSpace_get_IsDynamicBlock(This,pDynamicBlock)	\
    ( (This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock) ) 

#define IGcadPaperSpace_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ( (This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim) ) 

#define IGcadPaperSpace_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ( (This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim) ) 

#define IGcadPaperSpace_AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane)	\
    ( (This)->lpVtbl -> AddSection(This,FromPoint,ToPoint,planeVector,ppSecPlane) ) 

#define IGcadPaperSpace_AddMLeader(This,PointsArray,leaderLineIndex,pMLeader)	\
    ( (This)->lpVtbl -> AddMLeader(This,PointsArray,leaderLineIndex,pMLeader) ) 


#define IGcadPaperSpace_AddPViewport(This,Center,Width,Height,pPViewport)	\
    ( (This)->lpVtbl -> AddPViewport(This,Center,Width,Height,pPViewport) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPaperSpace_INTERFACE_DEFINED__ */


#ifndef __IGcadRegisteredApplications_INTERFACE_DEFINED__
#define __IGcadRegisteredApplications_INTERFACE_DEFINED__

/* interface IGcadRegisteredApplications */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadRegisteredApplications;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FEAD6776-7899-4D39-A083-4B7D6ECA11A5")
    IGcadRegisteredApplications : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadRegisteredApplication **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadRegisteredApplication **pRegApp) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadRegisteredApplicationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadRegisteredApplications * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadRegisteredApplications * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadRegisteredApplications * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadRegisteredApplications * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadRegisteredApplications * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadRegisteredApplications * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadRegisteredApplications * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadRegisteredApplications * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadRegisteredApplications * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadRegisteredApplications * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadRegisteredApplications * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadRegisteredApplications * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadRegisteredApplication **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadRegisteredApplications * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadRegisteredApplications * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadRegisteredApplication **pRegApp);
        
        END_INTERFACE
    } IGcadRegisteredApplicationsVtbl;

    interface IGcadRegisteredApplications
    {
        CONST_VTBL struct IGcadRegisteredApplicationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadRegisteredApplications_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadRegisteredApplications_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadRegisteredApplications_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadRegisteredApplications_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadRegisteredApplications_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadRegisteredApplications_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadRegisteredApplications_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadRegisteredApplications_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadRegisteredApplications_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadRegisteredApplications_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadRegisteredApplications_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadRegisteredApplications_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadRegisteredApplications_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadRegisteredApplications_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadRegisteredApplications_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadRegisteredApplications_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadRegisteredApplications_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadRegisteredApplications_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadRegisteredApplications_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadRegisteredApplications_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadRegisteredApplications_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadRegisteredApplications_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadRegisteredApplications_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadRegisteredApplications_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadRegisteredApplications_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadRegisteredApplications_Add(This,Name,pRegApp)	\
    ( (This)->lpVtbl -> Add(This,Name,pRegApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadRegisteredApplications_INTERFACE_DEFINED__ */


#ifndef __IGcadTextStyles_INTERFACE_DEFINED__
#define __IGcadTextStyles_INTERFACE_DEFINED__

/* interface IGcadTextStyles */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadTextStyles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C5681EEF-1832-4FF3-BF03-6A67FD2BE549")
    IGcadTextStyles : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadTextStyle **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadTextStyle **pTextStyle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTextStylesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTextStyles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTextStyles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTextStyles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTextStyles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTextStyles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTextStyles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTextStyles * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTextStyles * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTextStyles * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTextStyles * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTextStyles * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTextStyles * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTextStyles * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTextStyles * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTextStyles * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTextStyles * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTextStyles * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTextStyles * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTextStyles * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTextStyles * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTextStyles * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTextStyles * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadTextStyles * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadTextStyle **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadTextStyles * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadTextStyles * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadTextStyles * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadTextStyle **pTextStyle);
        
        END_INTERFACE
    } IGcadTextStylesVtbl;

    interface IGcadTextStyles
    {
        CONST_VTBL struct IGcadTextStylesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTextStyles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTextStyles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTextStyles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTextStyles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTextStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTextStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTextStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTextStyles_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTextStyles_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTextStyles_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTextStyles_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTextStyles_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTextStyles_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTextStyles_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTextStyles_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTextStyles_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTextStyles_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTextStyles_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTextStyles_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTextStyles_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTextStyles_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTextStyles_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTextStyles_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadTextStyles_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadTextStyles_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadTextStyles_Add(This,Name,pTextStyle)	\
    ( (This)->lpVtbl -> Add(This,Name,pTextStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadTextStyles_INTERFACE_DEFINED__ */


#ifndef __IGcadTextStyle_INTERFACE_DEFINED__
#define __IGcadTextStyle_INTERFACE_DEFINED__

/* interface IGcadTextStyle */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadTextStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04B795E5-EB3C-45D4-B965-2E721D1CEDE5")
    IGcadTextStyle : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BigFontFile( 
            /* [retval][out] */ BSTR *fontFile) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BigFontFile( 
            /* [in] */ BSTR fontFile) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_fontFile( 
            /* [retval][out] */ BSTR *fontFile) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_fontFile( 
            /* [in] */ BSTR fontFile) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LastHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObliqueAngle( 
            /* [retval][out] */ GCAD_ANGLE *obliAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObliqueAngle( 
            /* [in] */ GCAD_ANGLE obliAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextGenerationFlag( 
            /* [retval][out] */ GcTextGenerationFlag *textGenFlag) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextGenerationFlag( 
            /* [in] */ GcTextGenerationFlag textGenFlag) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetFont( 
            /* [out] */ BSTR *TypeFace,
            /* [out] */ VARIANT_BOOL *Bold,
            /* [out] */ VARIANT_BOOL *Italic,
            /* [out] */ long *Charset,
            /* [out] */ long *PitchAndFamily) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetFont( 
            /* [in] */ BSTR TypeFace,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL Italic,
            /* [in] */ long Charset,
            /* [in] */ long PitchAndFamily) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadTextStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadTextStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadTextStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadTextStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadTextStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadTextStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadTextStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadTextStyle * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadTextStyle * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadTextStyle * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadTextStyle * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadTextStyle * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadTextStyle * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadTextStyle * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadTextStyle * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadTextStyle * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadTextStyle * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadTextStyle * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadTextStyle * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadTextStyle * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadTextStyle * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadTextStyle * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadTextStyle * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BigFontFile )( 
            IGcadTextStyle * This,
            /* [retval][out] */ BSTR *fontFile);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BigFontFile )( 
            IGcadTextStyle * This,
            /* [in] */ BSTR fontFile);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_fontFile )( 
            IGcadTextStyle * This,
            /* [retval][out] */ BSTR *fontFile);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_fontFile )( 
            IGcadTextStyle * This,
            /* [in] */ BSTR fontFile);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadTextStyle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadTextStyle * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastHeight )( 
            IGcadTextStyle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LastHeight )( 
            IGcadTextStyle * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadTextStyle * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )( 
            IGcadTextStyle * This,
            /* [retval][out] */ GCAD_ANGLE *obliAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )( 
            IGcadTextStyle * This,
            /* [in] */ GCAD_ANGLE obliAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )( 
            IGcadTextStyle * This,
            /* [retval][out] */ GcTextGenerationFlag *textGenFlag);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )( 
            IGcadTextStyle * This,
            /* [in] */ GcTextGenerationFlag textGenFlag);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadTextStyle * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadTextStyle * This,
            /* [in] */ double Width);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetFont )( 
            IGcadTextStyle * This,
            /* [out] */ BSTR *TypeFace,
            /* [out] */ VARIANT_BOOL *Bold,
            /* [out] */ VARIANT_BOOL *Italic,
            /* [out] */ long *Charset,
            /* [out] */ long *PitchAndFamily);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetFont )( 
            IGcadTextStyle * This,
            /* [in] */ BSTR TypeFace,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL Italic,
            /* [in] */ long Charset,
            /* [in] */ long PitchAndFamily);
        
        END_INTERFACE
    } IGcadTextStyleVtbl;

    interface IGcadTextStyle
    {
        CONST_VTBL struct IGcadTextStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadTextStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadTextStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadTextStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadTextStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadTextStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadTextStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadTextStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadTextStyle_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadTextStyle_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadTextStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadTextStyle_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadTextStyle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadTextStyle_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadTextStyle_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadTextStyle_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadTextStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadTextStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadTextStyle_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadTextStyle_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadTextStyle_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadTextStyle_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadTextStyle_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadTextStyle_get_BigFontFile(This,fontFile)	\
    ( (This)->lpVtbl -> get_BigFontFile(This,fontFile) ) 

#define IGcadTextStyle_put_BigFontFile(This,fontFile)	\
    ( (This)->lpVtbl -> put_BigFontFile(This,fontFile) ) 

#define IGcadTextStyle_get_fontFile(This,fontFile)	\
    ( (This)->lpVtbl -> get_fontFile(This,fontFile) ) 

#define IGcadTextStyle_put_fontFile(This,fontFile)	\
    ( (This)->lpVtbl -> put_fontFile(This,fontFile) ) 

#define IGcadTextStyle_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadTextStyle_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadTextStyle_get_LastHeight(This,Height)	\
    ( (This)->lpVtbl -> get_LastHeight(This,Height) ) 

#define IGcadTextStyle_put_LastHeight(This,Height)	\
    ( (This)->lpVtbl -> put_LastHeight(This,Height) ) 

#define IGcadTextStyle_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadTextStyle_get_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> get_ObliqueAngle(This,obliAngle) ) 

#define IGcadTextStyle_put_ObliqueAngle(This,obliAngle)	\
    ( (This)->lpVtbl -> put_ObliqueAngle(This,obliAngle) ) 

#define IGcadTextStyle_get_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadTextStyle_put_TextGenerationFlag(This,textGenFlag)	\
    ( (This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag) ) 

#define IGcadTextStyle_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadTextStyle_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadTextStyle_GetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily)	\
    ( (This)->lpVtbl -> GetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily) ) 

#define IGcadTextStyle_SetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily)	\
    ( (This)->lpVtbl -> SetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadTextStyle_INTERFACE_DEFINED__ */


#ifndef __IGcadUCSs_INTERFACE_DEFINED__
#define __IGcadUCSs_INTERFACE_DEFINED__

/* interface IGcadUCSs */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadUCSs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96613BFF-6A8C-46FD-9F1C-0077AE4A8208")
    IGcadUCSs : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadUCS **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT Origin,
            /* [in] */ VARIANT XAxisPoint,
            /* [in] */ VARIANT YAxisPoint,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadUCS **pUCS) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadUCSsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadUCSs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadUCSs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadUCSs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadUCSs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadUCSs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadUCSs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadUCSs * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadUCSs * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadUCSs * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadUCSs * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadUCSs * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadUCSs * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadUCSs * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadUCSs * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadUCSs * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadUCSs * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadUCSs * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadUCSs * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadUCSs * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadUCSs * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadUCSs * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadUCSs * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadUCSs * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadUCS **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadUCSs * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadUCSs * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadUCSs * This,
            /* [in] */ VARIANT Origin,
            /* [in] */ VARIANT XAxisPoint,
            /* [in] */ VARIANT YAxisPoint,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadUCS **pUCS);
        
        END_INTERFACE
    } IGcadUCSsVtbl;

    interface IGcadUCSs
    {
        CONST_VTBL struct IGcadUCSsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadUCSs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadUCSs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadUCSs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadUCSs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadUCSs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadUCSs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadUCSs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadUCSs_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadUCSs_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadUCSs_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadUCSs_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadUCSs_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadUCSs_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadUCSs_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadUCSs_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadUCSs_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadUCSs_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadUCSs_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadUCSs_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadUCSs_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadUCSs_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadUCSs_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadUCSs_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadUCSs_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadUCSs_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadUCSs_Add(This,Origin,XAxisPoint,YAxisPoint,Name,pUCS)	\
    ( (This)->lpVtbl -> Add(This,Origin,XAxisPoint,YAxisPoint,Name,pUCS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadUCSs_INTERFACE_DEFINED__ */


#ifndef __IGcadUCS_INTERFACE_DEFINED__
#define __IGcadUCS_INTERFACE_DEFINED__

/* interface IGcadUCS */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadUCS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50C00ECE-104F-435B-8567-71430F3C479A")
    IGcadUCS : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Origin( 
            /* [retval][out] */ VARIANT *Origin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Origin( 
            /* [in] */ VARIANT Origin) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XVector( 
            /* [retval][out] */ VARIANT *XVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XVector( 
            /* [in] */ VARIANT XVector) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_YVector( 
            /* [retval][out] */ VARIANT *YVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_YVector( 
            /* [in] */ VARIANT YVector) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetUCSMatrix( 
            /* [retval][out] */ VARIANT *transMatrix) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadUCSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadUCS * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadUCS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadUCS * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadUCS * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadUCS * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadUCS * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadUCS * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadUCS * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadUCS * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadUCS * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadUCS * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadUCS * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadUCS * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadUCS * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadUCS * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadUCS * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadUCS * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadUCS * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadUCS * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadUCS * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadUCS * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadUCS * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadUCS * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadUCS * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Origin )( 
            IGcadUCS * This,
            /* [retval][out] */ VARIANT *Origin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Origin )( 
            IGcadUCS * This,
            /* [in] */ VARIANT Origin);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XVector )( 
            IGcadUCS * This,
            /* [retval][out] */ VARIANT *XVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XVector )( 
            IGcadUCS * This,
            /* [in] */ VARIANT XVector);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_YVector )( 
            IGcadUCS * This,
            /* [retval][out] */ VARIANT *YVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_YVector )( 
            IGcadUCS * This,
            /* [in] */ VARIANT YVector);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetUCSMatrix )( 
            IGcadUCS * This,
            /* [retval][out] */ VARIANT *transMatrix);
        
        END_INTERFACE
    } IGcadUCSVtbl;

    interface IGcadUCS
    {
        CONST_VTBL struct IGcadUCSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadUCS_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadUCS_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadUCS_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadUCS_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadUCS_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadUCS_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadUCS_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadUCS_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadUCS_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadUCS_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadUCS_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadUCS_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadUCS_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadUCS_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadUCS_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadUCS_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadUCS_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadUCS_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadUCS_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadUCS_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadUCS_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadUCS_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadUCS_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadUCS_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadUCS_get_Origin(This,Origin)	\
    ( (This)->lpVtbl -> get_Origin(This,Origin) ) 

#define IGcadUCS_put_Origin(This,Origin)	\
    ( (This)->lpVtbl -> put_Origin(This,Origin) ) 

#define IGcadUCS_get_XVector(This,XVector)	\
    ( (This)->lpVtbl -> get_XVector(This,XVector) ) 

#define IGcadUCS_put_XVector(This,XVector)	\
    ( (This)->lpVtbl -> put_XVector(This,XVector) ) 

#define IGcadUCS_get_YVector(This,YVector)	\
    ( (This)->lpVtbl -> get_YVector(This,YVector) ) 

#define IGcadUCS_put_YVector(This,YVector)	\
    ( (This)->lpVtbl -> put_YVector(This,YVector) ) 

#define IGcadUCS_GetUCSMatrix(This,transMatrix)	\
    ( (This)->lpVtbl -> GetUCSMatrix(This,transMatrix) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadUCS_INTERFACE_DEFINED__ */


#ifndef __IGcadViews_INTERFACE_DEFINED__
#define __IGcadViews_INTERFACE_DEFINED__

/* interface IGcadViews */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadViews;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E15849E7-3869-4A7E-B56A-B2E5B16D1A97")
    IGcadViews : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadView **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadView **pRegApp) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadViewsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadViews * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadViews * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadViews * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadViews * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadViews * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadViews * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadViews * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadViews * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadViews * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadViews * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadViews * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadViews * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadViews * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadViews * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadViews * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadViews * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadViews * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadViews * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadViews * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadViews * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadViews * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadViews * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadViews * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadView **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadViews * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadViews * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadViews * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadView **pRegApp);
        
        END_INTERFACE
    } IGcadViewsVtbl;

    interface IGcadViews
    {
        CONST_VTBL struct IGcadViewsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadViews_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadViews_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadViews_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadViews_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadViews_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadViews_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadViews_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadViews_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadViews_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadViews_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadViews_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadViews_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadViews_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadViews_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadViews_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadViews_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadViews_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadViews_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadViews_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadViews_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadViews_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadViews_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadViews_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadViews_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadViews_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadViews_Add(This,Name,pRegApp)	\
    ( (This)->lpVtbl -> Add(This,Name,pRegApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadViews_INTERFACE_DEFINED__ */


#ifndef __IGcadViewports_INTERFACE_DEFINED__
#define __IGcadViewports_INTERFACE_DEFINED__

/* interface IGcadViewports */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadViewports;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("075C505F-362B-438B-BB06-A0A4568A9DEB")
    IGcadViewports : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadViewport **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadViewport **pRegApp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteConfiguration( 
            /* [in] */ BSTR Name) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadViewportsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadViewports * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadViewports * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadViewports * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadViewports * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadViewports * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadViewports * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadViewports * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadViewports * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadViewports * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadViewports * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadViewports * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadViewports * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadViewports * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadViewports * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadViewports * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadViewports * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadViewports * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadViewports * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadViewports * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadViewports * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadViewports * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadViewports * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadViewports * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadViewport **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadViewports * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadViewports * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadViewports * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadViewport **pRegApp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteConfiguration )( 
            IGcadViewports * This,
            /* [in] */ BSTR Name);
        
        END_INTERFACE
    } IGcadViewportsVtbl;

    interface IGcadViewports
    {
        CONST_VTBL struct IGcadViewportsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadViewports_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadViewports_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadViewports_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadViewports_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadViewports_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadViewports_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadViewports_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadViewports_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadViewports_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadViewports_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadViewports_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadViewports_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadViewports_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadViewports_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadViewports_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadViewports_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadViewports_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadViewports_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadViewports_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadViewports_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadViewports_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadViewports_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadViewports_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadViewports_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadViewports_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadViewports_Add(This,Name,pRegApp)	\
    ( (This)->lpVtbl -> Add(This,Name,pRegApp) ) 

#define IGcadViewports_DeleteConfiguration(This,Name)	\
    ( (This)->lpVtbl -> DeleteConfiguration(This,Name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadViewports_INTERFACE_DEFINED__ */


#ifndef __IGcadViewport_INTERFACE_DEFINED__
#define __IGcadViewport_INTERFACE_DEFINED__

/* interface IGcadViewport */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadViewport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E4F93427-6244-4B4F-8E63-F2808BA43C9F")
    IGcadViewport : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *Center) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT Center) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ VARIANT *targetPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ VARIANT targetPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ VARIANT *dirVec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ VARIANT dirVec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOn( 
            /* [retval][out] */ VARIANT_BOOL *bGridOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOn( 
            /* [in] */ VARIANT_BOOL bGridOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OrthoOn( 
            /* [retval][out] */ VARIANT_BOOL *bOrthoOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OrthoOn( 
            /* [in] */ VARIANT_BOOL bOrthoOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapBasePoint( 
            /* [retval][out] */ VARIANT *lowLeft) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapBasePoint( 
            /* [in] */ VARIANT lowLeft) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapOn( 
            /* [retval][out] */ VARIANT_BOOL *bSnapOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapOn( 
            /* [in] */ VARIANT_BOOL bSnapOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapRotationAngle( 
            /* [retval][out] */ GCAD_ANGLE *Angle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapRotationAngle( 
            /* [in] */ GCAD_ANGLE Angle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UCSIconOn( 
            /* [retval][out] */ VARIANT_BOOL *bIconOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UCSIconOn( 
            /* [in] */ VARIANT_BOOL bIconOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UCSIconAtOrigin( 
            /* [retval][out] */ VARIANT_BOOL *bIconAtOrigin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UCSIconAtOrigin( 
            /* [in] */ VARIANT_BOOL bIconAtOrigin) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LowerLeftCorner( 
            /* [retval][out] */ VARIANT *lowLeft) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpperRightCorner( 
            /* [retval][out] */ VARIANT *UpperRight) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [in] */ GcViewportSplitType NumWins) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGridSpacing( 
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGridSpacing( 
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSnapSpacing( 
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSnapSpacing( 
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetView( 
            /* [in] */ IGcadView *View) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcSmoothness( 
            /* [retval][out] */ long *arcSmooth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcSmoothness( 
            /* [in] */ long arcSmooth) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadViewportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadViewport * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadViewport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadViewport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadViewport * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadViewport * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadViewport * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadViewport * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadViewport * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadViewport * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadViewport * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadViewport * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadViewport * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadViewport * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadViewport * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadViewport * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadViewport * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadViewport * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadViewport * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadViewport * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadViewport * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadViewport * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *Center);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadViewport * This,
            /* [in] */ VARIANT Center);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadViewport * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadViewport * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadViewport * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadViewport * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *targetPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadViewport * This,
            /* [in] */ VARIANT targetPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *dirVec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            IGcadViewport * This,
            /* [in] */ VARIANT dirVec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadViewport * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadViewport * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOn )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bGridOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOn )( 
            IGcadViewport * This,
            /* [in] */ VARIANT_BOOL bGridOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OrthoOn )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bOrthoOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OrthoOn )( 
            IGcadViewport * This,
            /* [in] */ VARIANT_BOOL bOrthoOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapBasePoint )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *lowLeft);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapBasePoint )( 
            IGcadViewport * This,
            /* [in] */ VARIANT lowLeft);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapOn )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bSnapOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapOn )( 
            IGcadViewport * This,
            /* [in] */ VARIANT_BOOL bSnapOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapRotationAngle )( 
            IGcadViewport * This,
            /* [retval][out] */ GCAD_ANGLE *Angle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapRotationAngle )( 
            IGcadViewport * This,
            /* [in] */ GCAD_ANGLE Angle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UCSIconOn )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bIconOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UCSIconOn )( 
            IGcadViewport * This,
            /* [in] */ VARIANT_BOOL bIconOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UCSIconAtOrigin )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bIconAtOrigin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UCSIconAtOrigin )( 
            IGcadViewport * This,
            /* [in] */ VARIANT_BOOL bIconAtOrigin);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LowerLeftCorner )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *lowLeft);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpperRightCorner )( 
            IGcadViewport * This,
            /* [retval][out] */ VARIANT *UpperRight);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            IGcadViewport * This,
            /* [in] */ GcViewportSplitType NumWins);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGridSpacing )( 
            IGcadViewport * This,
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGridSpacing )( 
            IGcadViewport * This,
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSnapSpacing )( 
            IGcadViewport * This,
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSnapSpacing )( 
            IGcadViewport * This,
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetView )( 
            IGcadViewport * This,
            /* [in] */ IGcadView *View);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcSmoothness )( 
            IGcadViewport * This,
            /* [retval][out] */ long *arcSmooth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcSmoothness )( 
            IGcadViewport * This,
            /* [in] */ long arcSmooth);
        
        END_INTERFACE
    } IGcadViewportVtbl;

    interface IGcadViewport
    {
        CONST_VTBL struct IGcadViewportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadViewport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadViewport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadViewport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadViewport_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadViewport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadViewport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadViewport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadViewport_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadViewport_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadViewport_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadViewport_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadViewport_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadViewport_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadViewport_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadViewport_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadViewport_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadViewport_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadViewport_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadViewport_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadViewport_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadViewport_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadViewport_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadViewport_get_Center(This,Center)	\
    ( (This)->lpVtbl -> get_Center(This,Center) ) 

#define IGcadViewport_put_Center(This,Center)	\
    ( (This)->lpVtbl -> put_Center(This,Center) ) 

#define IGcadViewport_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadViewport_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadViewport_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadViewport_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadViewport_get_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> get_Target(This,targetPoint) ) 

#define IGcadViewport_put_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> put_Target(This,targetPoint) ) 

#define IGcadViewport_get_Direction(This,dirVec)	\
    ( (This)->lpVtbl -> get_Direction(This,dirVec) ) 

#define IGcadViewport_put_Direction(This,dirVec)	\
    ( (This)->lpVtbl -> put_Direction(This,dirVec) ) 

#define IGcadViewport_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadViewport_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadViewport_get_GridOn(This,bGridOn)	\
    ( (This)->lpVtbl -> get_GridOn(This,bGridOn) ) 

#define IGcadViewport_put_GridOn(This,bGridOn)	\
    ( (This)->lpVtbl -> put_GridOn(This,bGridOn) ) 

#define IGcadViewport_get_OrthoOn(This,bOrthoOn)	\
    ( (This)->lpVtbl -> get_OrthoOn(This,bOrthoOn) ) 

#define IGcadViewport_put_OrthoOn(This,bOrthoOn)	\
    ( (This)->lpVtbl -> put_OrthoOn(This,bOrthoOn) ) 

#define IGcadViewport_get_SnapBasePoint(This,lowLeft)	\
    ( (This)->lpVtbl -> get_SnapBasePoint(This,lowLeft) ) 

#define IGcadViewport_put_SnapBasePoint(This,lowLeft)	\
    ( (This)->lpVtbl -> put_SnapBasePoint(This,lowLeft) ) 

#define IGcadViewport_get_SnapOn(This,bSnapOn)	\
    ( (This)->lpVtbl -> get_SnapOn(This,bSnapOn) ) 

#define IGcadViewport_put_SnapOn(This,bSnapOn)	\
    ( (This)->lpVtbl -> put_SnapOn(This,bSnapOn) ) 

#define IGcadViewport_get_SnapRotationAngle(This,Angle)	\
    ( (This)->lpVtbl -> get_SnapRotationAngle(This,Angle) ) 

#define IGcadViewport_put_SnapRotationAngle(This,Angle)	\
    ( (This)->lpVtbl -> put_SnapRotationAngle(This,Angle) ) 

#define IGcadViewport_get_UCSIconOn(This,bIconOn)	\
    ( (This)->lpVtbl -> get_UCSIconOn(This,bIconOn) ) 

#define IGcadViewport_put_UCSIconOn(This,bIconOn)	\
    ( (This)->lpVtbl -> put_UCSIconOn(This,bIconOn) ) 

#define IGcadViewport_get_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ( (This)->lpVtbl -> get_UCSIconAtOrigin(This,bIconAtOrigin) ) 

#define IGcadViewport_put_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ( (This)->lpVtbl -> put_UCSIconAtOrigin(This,bIconAtOrigin) ) 

#define IGcadViewport_get_LowerLeftCorner(This,lowLeft)	\
    ( (This)->lpVtbl -> get_LowerLeftCorner(This,lowLeft) ) 

#define IGcadViewport_get_UpperRightCorner(This,UpperRight)	\
    ( (This)->lpVtbl -> get_UpperRightCorner(This,UpperRight) ) 

#define IGcadViewport_Split(This,NumWins)	\
    ( (This)->lpVtbl -> Split(This,NumWins) ) 

#define IGcadViewport_GetGridSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> GetGridSpacing(This,XSpacing,YSpacing) ) 

#define IGcadViewport_SetGridSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> SetGridSpacing(This,XSpacing,YSpacing) ) 

#define IGcadViewport_GetSnapSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> GetSnapSpacing(This,XSpacing,YSpacing) ) 

#define IGcadViewport_SetSnapSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> SetSnapSpacing(This,XSpacing,YSpacing) ) 

#define IGcadViewport_SetView(This,View)	\
    ( (This)->lpVtbl -> SetView(This,View) ) 

#define IGcadViewport_get_ArcSmoothness(This,arcSmooth)	\
    ( (This)->lpVtbl -> get_ArcSmoothness(This,arcSmooth) ) 

#define IGcadViewport_put_ArcSmoothness(This,arcSmooth)	\
    ( (This)->lpVtbl -> put_ArcSmoothness(This,arcSmooth) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadViewport_INTERFACE_DEFINED__ */


#ifndef __IGcadLayouts_INTERFACE_DEFINED__
#define __IGcadLayouts_INTERFACE_DEFINED__

/* interface IGcadLayouts */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadLayouts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9504884C-F1B3-4B6D-8E26-F85B82213C77")
    IGcadLayouts : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLayout **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLayout **pLayout) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLayoutsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLayouts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLayouts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLayouts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLayouts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLayouts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLayouts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLayouts * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLayouts * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLayouts * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLayouts * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLayouts * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLayouts * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLayouts * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLayouts * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLayouts * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLayouts * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLayouts * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLayouts * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLayouts * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLayouts * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLayouts * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLayouts * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadLayouts * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadLayout **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadLayouts * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadLayouts * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadLayouts * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadLayout **pLayout);
        
        END_INTERFACE
    } IGcadLayoutsVtbl;

    interface IGcadLayouts
    {
        CONST_VTBL struct IGcadLayoutsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLayouts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLayouts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLayouts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLayouts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLayouts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLayouts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLayouts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLayouts_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLayouts_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLayouts_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLayouts_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLayouts_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLayouts_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLayouts_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLayouts_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLayouts_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLayouts_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLayouts_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLayouts_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLayouts_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLayouts_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLayouts_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLayouts_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadLayouts_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadLayouts_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadLayouts_Add(This,Name,pLayout)	\
    ( (This)->lpVtbl -> Add(This,Name,pLayout) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLayouts_INTERFACE_DEFINED__ */


#ifndef __IGcadPlotConfigurations_INTERFACE_DEFINED__
#define __IGcadPlotConfigurations_INTERFACE_DEFINED__

/* interface IGcadPlotConfigurations */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPlotConfigurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F7FA7E53-B1DD-4AD9-90CA-69A8AFAD99BB")
    IGcadPlotConfigurations : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadPlotConfiguration **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT ModelType,
            /* [retval][out] */ IGcadPlotConfiguration **pPlotConfig) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPlotConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPlotConfigurations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPlotConfigurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPlotConfigurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPlotConfigurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPlotConfigurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPlotConfigurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPlotConfigurations * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPlotConfigurations * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPlotConfigurations * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPlotConfigurations * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPlotConfigurations * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadPlotConfigurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadPlotConfiguration **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadPlotConfigurations * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadPlotConfigurations * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT ModelType,
            /* [retval][out] */ IGcadPlotConfiguration **pPlotConfig);
        
        END_INTERFACE
    } IGcadPlotConfigurationsVtbl;

    interface IGcadPlotConfigurations
    {
        CONST_VTBL struct IGcadPlotConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPlotConfigurations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPlotConfigurations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPlotConfigurations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPlotConfigurations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPlotConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPlotConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPlotConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPlotConfigurations_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPlotConfigurations_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPlotConfigurations_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPlotConfigurations_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPlotConfigurations_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPlotConfigurations_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPlotConfigurations_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPlotConfigurations_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPlotConfigurations_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPlotConfigurations_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPlotConfigurations_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPlotConfigurations_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPlotConfigurations_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPlotConfigurations_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPlotConfigurations_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPlotConfigurations_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadPlotConfigurations_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadPlotConfigurations_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadPlotConfigurations_Add(This,Name,ModelType,pPlotConfig)	\
    ( (This)->lpVtbl -> Add(This,Name,ModelType,pPlotConfig) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPlotConfigurations_INTERFACE_DEFINED__ */


#ifndef __IGcadDatabasePreferences_INTERFACE_DEFINED__
#define __IGcadDatabasePreferences_INTERFACE_DEFINED__

/* interface IGcadDatabasePreferences */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadDatabasePreferences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("601D7033-D254-4748-BCF3-D8F61BDDD344")
    IGcadDatabasePreferences : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **pAppObj) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolidFill( 
            /* [retval][out] */ VARIANT_BOOL *Fill) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SolidFill( 
            /* [in] */ VARIANT_BOOL Fill) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XRefEdit( 
            /* [retval][out] */ VARIANT_BOOL *Edit) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XRefEdit( 
            /* [in] */ VARIANT_BOOL Edit) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XRefLayerVisibility( 
            /* [retval][out] */ VARIANT_BOOL *XRefLayerVis) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XRefLayerVisibility( 
            /* [in] */ VARIANT_BOOL XRefLayerVis) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLELaunch( 
            /* [retval][out] */ VARIANT_BOOL *Launch) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_OLELaunch( 
            /* [in] */ VARIANT_BOOL Launch) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowLongSymbolNames( 
            /* [retval][out] */ VARIANT_BOOL *LongNames) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowLongSymbolNames( 
            /* [in] */ VARIANT_BOOL LongNames) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortBySelection( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortBySelection( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortBySnap( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortBySnap( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortByRedraws( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortByRedraws( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortByRegens( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortByRegens( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortByPlotting( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortByPlotting( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectSortByPSOutput( 
            /* [retval][out] */ VARIANT_BOOL *Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectSortByPSOutput( 
            /* [in] */ VARIANT_BOOL Sort) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContourLinesPerSurface( 
            /* [in] */ long Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContourLinesPerSurface( 
            /* [retval][out] */ long *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplaySilhouette( 
            /* [in] */ VARIANT_BOOL Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplaySilhouette( 
            /* [retval][out] */ VARIANT_BOOL *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MaxActiveViewports( 
            /* [in] */ long Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaxActiveViewports( 
            /* [retval][out] */ long *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RenderSmoothness( 
            /* [in] */ double Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RenderSmoothness( 
            /* [retval][out] */ double *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SegmentPerPolyline( 
            /* [in] */ long Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SegmentPerPolyline( 
            /* [retval][out] */ long *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextFrameDisplay( 
            /* [in] */ VARIANT_BOOL Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrameDisplay( 
            /* [retval][out] */ VARIANT_BOOL *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Lineweight( 
            /* [in] */ GcLineWeight Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lineweight( 
            /* [retval][out] */ GcLineWeight *Path) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineWeightDisplay( 
            /* [in] */ VARIANT_BOOL Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineWeightDisplay( 
            /* [retval][out] */ VARIANT_BOOL *Path) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadDatabasePreferencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadDatabasePreferences * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadDatabasePreferences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadDatabasePreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadDatabasePreferences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadDatabasePreferences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadDatabasePreferences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadDatabasePreferences * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ IDispatch **pAppObj);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolidFill )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Fill);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SolidFill )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Fill);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XRefEdit )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Edit);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XRefEdit )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Edit);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XRefLayerVisibility )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *XRefLayerVis);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XRefLayerVisibility )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL XRefLayerVis);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLELaunch )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Launch);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OLELaunch )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Launch);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowLongSymbolNames )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *LongNames);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowLongSymbolNames )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL LongNames);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortBySelection )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortBySelection )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortBySnap )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortBySnap )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByRedraws )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByRedraws )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByRegens )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByRegens )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByPlotting )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByPlotting )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByPSOutput )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByPSOutput )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Sort);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContourLinesPerSurface )( 
            IGcadDatabasePreferences * This,
            /* [in] */ long Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContourLinesPerSurface )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ long *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySilhouette )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySilhouette )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaxActiveViewports )( 
            IGcadDatabasePreferences * This,
            /* [in] */ long Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaxActiveViewports )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ long *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RenderSmoothness )( 
            IGcadDatabasePreferences * This,
            /* [in] */ double Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RenderSmoothness )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ double *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SegmentPerPolyline )( 
            IGcadDatabasePreferences * This,
            /* [in] */ long Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SegmentPerPolyline )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ long *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFrameDisplay )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrameDisplay )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadDatabasePreferences * This,
            /* [in] */ GcLineWeight Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ GcLineWeight *Path);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineWeightDisplay )( 
            IGcadDatabasePreferences * This,
            /* [in] */ VARIANT_BOOL Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineWeightDisplay )( 
            IGcadDatabasePreferences * This,
            /* [retval][out] */ VARIANT_BOOL *Path);
        
        END_INTERFACE
    } IGcadDatabasePreferencesVtbl;

    interface IGcadDatabasePreferences
    {
        CONST_VTBL struct IGcadDatabasePreferencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadDatabasePreferences_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadDatabasePreferences_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadDatabasePreferences_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadDatabasePreferences_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadDatabasePreferences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadDatabasePreferences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadDatabasePreferences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadDatabasePreferences_get_Application(This,pAppObj)	\
    ( (This)->lpVtbl -> get_Application(This,pAppObj) ) 

#define IGcadDatabasePreferences_get_SolidFill(This,Fill)	\
    ( (This)->lpVtbl -> get_SolidFill(This,Fill) ) 

#define IGcadDatabasePreferences_put_SolidFill(This,Fill)	\
    ( (This)->lpVtbl -> put_SolidFill(This,Fill) ) 

#define IGcadDatabasePreferences_get_XRefEdit(This,Edit)	\
    ( (This)->lpVtbl -> get_XRefEdit(This,Edit) ) 

#define IGcadDatabasePreferences_put_XRefEdit(This,Edit)	\
    ( (This)->lpVtbl -> put_XRefEdit(This,Edit) ) 

#define IGcadDatabasePreferences_get_XRefLayerVisibility(This,XRefLayerVis)	\
    ( (This)->lpVtbl -> get_XRefLayerVisibility(This,XRefLayerVis) ) 

#define IGcadDatabasePreferences_put_XRefLayerVisibility(This,XRefLayerVis)	\
    ( (This)->lpVtbl -> put_XRefLayerVisibility(This,XRefLayerVis) ) 

#define IGcadDatabasePreferences_get_OLELaunch(This,Launch)	\
    ( (This)->lpVtbl -> get_OLELaunch(This,Launch) ) 

#define IGcadDatabasePreferences_put_OLELaunch(This,Launch)	\
    ( (This)->lpVtbl -> put_OLELaunch(This,Launch) ) 

#define IGcadDatabasePreferences_get_AllowLongSymbolNames(This,LongNames)	\
    ( (This)->lpVtbl -> get_AllowLongSymbolNames(This,LongNames) ) 

#define IGcadDatabasePreferences_put_AllowLongSymbolNames(This,LongNames)	\
    ( (This)->lpVtbl -> put_AllowLongSymbolNames(This,LongNames) ) 

#define IGcadDatabasePreferences_get_ObjectSortBySelection(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortBySelection(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortBySelection(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortBySelection(This,Sort) ) 

#define IGcadDatabasePreferences_get_ObjectSortBySnap(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortBySnap(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortBySnap(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortBySnap(This,Sort) ) 

#define IGcadDatabasePreferences_get_ObjectSortByRedraws(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortByRedraws(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortByRedraws(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortByRedraws(This,Sort) ) 

#define IGcadDatabasePreferences_get_ObjectSortByRegens(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortByRegens(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortByRegens(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortByRegens(This,Sort) ) 

#define IGcadDatabasePreferences_get_ObjectSortByPlotting(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortByPlotting(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortByPlotting(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortByPlotting(This,Sort) ) 

#define IGcadDatabasePreferences_get_ObjectSortByPSOutput(This,Sort)	\
    ( (This)->lpVtbl -> get_ObjectSortByPSOutput(This,Sort) ) 

#define IGcadDatabasePreferences_put_ObjectSortByPSOutput(This,Sort)	\
    ( (This)->lpVtbl -> put_ObjectSortByPSOutput(This,Sort) ) 

#define IGcadDatabasePreferences_put_ContourLinesPerSurface(This,Path)	\
    ( (This)->lpVtbl -> put_ContourLinesPerSurface(This,Path) ) 

#define IGcadDatabasePreferences_get_ContourLinesPerSurface(This,Path)	\
    ( (This)->lpVtbl -> get_ContourLinesPerSurface(This,Path) ) 

#define IGcadDatabasePreferences_put_DisplaySilhouette(This,Path)	\
    ( (This)->lpVtbl -> put_DisplaySilhouette(This,Path) ) 

#define IGcadDatabasePreferences_get_DisplaySilhouette(This,Path)	\
    ( (This)->lpVtbl -> get_DisplaySilhouette(This,Path) ) 

#define IGcadDatabasePreferences_put_MaxActiveViewports(This,Path)	\
    ( (This)->lpVtbl -> put_MaxActiveViewports(This,Path) ) 

#define IGcadDatabasePreferences_get_MaxActiveViewports(This,Path)	\
    ( (This)->lpVtbl -> get_MaxActiveViewports(This,Path) ) 

#define IGcadDatabasePreferences_put_RenderSmoothness(This,Path)	\
    ( (This)->lpVtbl -> put_RenderSmoothness(This,Path) ) 

#define IGcadDatabasePreferences_get_RenderSmoothness(This,Path)	\
    ( (This)->lpVtbl -> get_RenderSmoothness(This,Path) ) 

#define IGcadDatabasePreferences_put_SegmentPerPolyline(This,Path)	\
    ( (This)->lpVtbl -> put_SegmentPerPolyline(This,Path) ) 

#define IGcadDatabasePreferences_get_SegmentPerPolyline(This,Path)	\
    ( (This)->lpVtbl -> get_SegmentPerPolyline(This,Path) ) 

#define IGcadDatabasePreferences_put_TextFrameDisplay(This,Path)	\
    ( (This)->lpVtbl -> put_TextFrameDisplay(This,Path) ) 

#define IGcadDatabasePreferences_get_TextFrameDisplay(This,Path)	\
    ( (This)->lpVtbl -> get_TextFrameDisplay(This,Path) ) 

#define IGcadDatabasePreferences_put_Lineweight(This,Path)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Path) ) 

#define IGcadDatabasePreferences_get_Lineweight(This,Path)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Path) ) 

#define IGcadDatabasePreferences_put_LineWeightDisplay(This,Path)	\
    ( (This)->lpVtbl -> put_LineWeightDisplay(This,Path) ) 

#define IGcadDatabasePreferences_get_LineWeightDisplay(This,Path)	\
    ( (This)->lpVtbl -> get_LineWeightDisplay(This,Path) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadDatabasePreferences_INTERFACE_DEFINED__ */


#ifndef __IGcadFileDependencies_INTERFACE_DEFINED__
#define __IGcadFileDependencies_INTERFACE_DEFINED__

/* interface IGcadFileDependencies */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadFileDependencies;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22EC1ECD-B548-4E70-8F2F-574715EFC88E")
    IGcadFileDependencies : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadFileDependency **pItem) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **pAppObj) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateEntry( 
            /* [in] */ BSTR Feature,
            /* [in] */ BSTR FullFileName,
            /* [in] */ VARIANT_BOOL AffectsGraphics,
            /* [in] */ VARIANT_BOOL noIncrement,
            /* [retval][out] */ long *Index) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ BSTR Feature,
            /* [in] */ BSTR FullFileName,
            /* [retval][out] */ long *Index) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveEntry( 
            /* [in] */ long Index,
            /* [in] */ VARIANT_BOOL forceRemove) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UpdateEntry( 
            /* [in] */ long Index) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadFileDependenciesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadFileDependencies * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadFileDependencies * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadFileDependencies * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadFileDependencies * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadFileDependencies * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadFileDependencies * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadFileDependencies * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadFileDependencies * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadFileDependency **pItem);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadFileDependencies * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadFileDependencies * This,
            /* [retval][out] */ IDispatch **pAppObj);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadFileDependencies * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEntry )( 
            IGcadFileDependencies * This,
            /* [in] */ BSTR Feature,
            /* [in] */ BSTR FullFileName,
            /* [in] */ VARIANT_BOOL AffectsGraphics,
            /* [in] */ VARIANT_BOOL noIncrement,
            /* [retval][out] */ long *Index);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            IGcadFileDependencies * This,
            /* [in] */ BSTR Feature,
            /* [in] */ BSTR FullFileName,
            /* [retval][out] */ long *Index);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveEntry )( 
            IGcadFileDependencies * This,
            /* [in] */ long Index,
            /* [in] */ VARIANT_BOOL forceRemove);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateEntry )( 
            IGcadFileDependencies * This,
            /* [in] */ long Index);
        
        END_INTERFACE
    } IGcadFileDependenciesVtbl;

    interface IGcadFileDependencies
    {
        CONST_VTBL struct IGcadFileDependenciesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadFileDependencies_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadFileDependencies_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadFileDependencies_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadFileDependencies_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadFileDependencies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadFileDependencies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadFileDependencies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadFileDependencies_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadFileDependencies_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadFileDependencies_get_Application(This,pAppObj)	\
    ( (This)->lpVtbl -> get_Application(This,pAppObj) ) 

#define IGcadFileDependencies_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadFileDependencies_CreateEntry(This,Feature,FullFileName,AffectsGraphics,noIncrement,Index)	\
    ( (This)->lpVtbl -> CreateEntry(This,Feature,FullFileName,AffectsGraphics,noIncrement,Index) ) 

#define IGcadFileDependencies_IndexOf(This,Feature,FullFileName,Index)	\
    ( (This)->lpVtbl -> IndexOf(This,Feature,FullFileName,Index) ) 

#define IGcadFileDependencies_RemoveEntry(This,Index,forceRemove)	\
    ( (This)->lpVtbl -> RemoveEntry(This,Index,forceRemove) ) 

#define IGcadFileDependencies_UpdateEntry(This,Index)	\
    ( (This)->lpVtbl -> UpdateEntry(This,Index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadFileDependencies_INTERFACE_DEFINED__ */


#ifndef __IGcadFileDependency_INTERFACE_DEFINED__
#define __IGcadFileDependency_INTERFACE_DEFINED__

/* interface IGcadFileDependency */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadFileDependency;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2C3FE696-C453-44FD-862D-F41F64C0175A")
    IGcadFileDependency : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullFileName( 
            /* [retval][out] */ BSTR *FullFileName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *FileName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FoundPath( 
            /* [retval][out] */ BSTR *FoundPath) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FingerprintGuid( 
            /* [retval][out] */ BSTR *FingerprintGuid) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VersionGuid( 
            /* [retval][out] */ BSTR *VersionGuid) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Feature( 
            /* [retval][out] */ BSTR *Feature) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsModified( 
            /* [retval][out] */ VARIANT_BOOL *IsModified) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AffectsGraphics( 
            /* [retval][out] */ VARIANT_BOOL *AffectsGraphics) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *Index) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeStamp( 
            /* [retval][out] */ long *TimeStamp) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileSize( 
            /* [retval][out] */ long *FileSize) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReferenceCount( 
            /* [retval][out] */ long *refCount) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadFileDependencyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadFileDependency * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadFileDependency * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadFileDependency * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadFileDependency * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadFileDependency * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadFileDependency * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadFileDependency * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullFileName )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *FullFileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *FileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FoundPath )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *FoundPath);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FingerprintGuid )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *FingerprintGuid);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VersionGuid )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *VersionGuid);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Feature )( 
            IGcadFileDependency * This,
            /* [retval][out] */ BSTR *Feature);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsModified )( 
            IGcadFileDependency * This,
            /* [retval][out] */ VARIANT_BOOL *IsModified);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AffectsGraphics )( 
            IGcadFileDependency * This,
            /* [retval][out] */ VARIANT_BOOL *AffectsGraphics);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            IGcadFileDependency * This,
            /* [retval][out] */ long *Index);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeStamp )( 
            IGcadFileDependency * This,
            /* [retval][out] */ long *TimeStamp);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileSize )( 
            IGcadFileDependency * This,
            /* [retval][out] */ long *FileSize);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceCount )( 
            IGcadFileDependency * This,
            /* [retval][out] */ long *refCount);
        
        END_INTERFACE
    } IGcadFileDependencyVtbl;

    interface IGcadFileDependency
    {
        CONST_VTBL struct IGcadFileDependencyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadFileDependency_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadFileDependency_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadFileDependency_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadFileDependency_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadFileDependency_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadFileDependency_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadFileDependency_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadFileDependency_get_FullFileName(This,FullFileName)	\
    ( (This)->lpVtbl -> get_FullFileName(This,FullFileName) ) 

#define IGcadFileDependency_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define IGcadFileDependency_get_FoundPath(This,FoundPath)	\
    ( (This)->lpVtbl -> get_FoundPath(This,FoundPath) ) 

#define IGcadFileDependency_get_FingerprintGuid(This,FingerprintGuid)	\
    ( (This)->lpVtbl -> get_FingerprintGuid(This,FingerprintGuid) ) 

#define IGcadFileDependency_get_VersionGuid(This,VersionGuid)	\
    ( (This)->lpVtbl -> get_VersionGuid(This,VersionGuid) ) 

#define IGcadFileDependency_get_Feature(This,Feature)	\
    ( (This)->lpVtbl -> get_Feature(This,Feature) ) 

#define IGcadFileDependency_get_IsModified(This,IsModified)	\
    ( (This)->lpVtbl -> get_IsModified(This,IsModified) ) 

#define IGcadFileDependency_get_AffectsGraphics(This,AffectsGraphics)	\
    ( (This)->lpVtbl -> get_AffectsGraphics(This,AffectsGraphics) ) 

#define IGcadFileDependency_get_Index(This,Index)	\
    ( (This)->lpVtbl -> get_Index(This,Index) ) 

#define IGcadFileDependency_get_TimeStamp(This,TimeStamp)	\
    ( (This)->lpVtbl -> get_TimeStamp(This,TimeStamp) ) 

#define IGcadFileDependency_get_FileSize(This,FileSize)	\
    ( (This)->lpVtbl -> get_FileSize(This,FileSize) ) 

#define IGcadFileDependency_get_ReferenceCount(This,refCount)	\
    ( (This)->lpVtbl -> get_ReferenceCount(This,refCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadFileDependency_INTERFACE_DEFINED__ */


#ifndef __IGcadSummaryInfo_INTERFACE_DEFINED__
#define __IGcadSummaryInfo_INTERFACE_DEFINED__

/* interface IGcadSummaryInfo */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSummaryInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C29AB03-ABF4-4432-B1ED-E4F453EB980E")
    IGcadSummaryInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *pAuthor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Author( 
            /* [in] */ BSTR pAuthor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ BSTR *pComments) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comments( 
            /* [in] */ BSTR pComments) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HyperlinkBase( 
            /* [retval][out] */ BSTR *pHyperlinkBase) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HyperlinkBase( 
            /* [in] */ BSTR pHyperlinkBase) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Keywords( 
            /* [retval][out] */ BSTR *pKeywords) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Keywords( 
            /* [in] */ BSTR pKeywords) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastSavedBy( 
            /* [retval][out] */ BSTR *pLastSavedBy) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LastSavedBy( 
            /* [in] */ BSTR pLastSavedBy) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionNumber( 
            /* [retval][out] */ BSTR *pRevisionNumber) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionNumber( 
            /* [in] */ BSTR pRevisionNumber) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *pSubject) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR pSubject) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *pTitle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR pTitle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE NumCustomInfo( 
            /* [retval][out] */ int *Index) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCustomByIndex( 
            /* [in] */ int Index,
            /* [out] */ BSTR *pKey,
            /* [out] */ BSTR *pValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetCustomByKey( 
            /* [in] */ BSTR key,
            /* [out] */ BSTR *pValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCustomByIndex( 
            /* [in] */ int Index,
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetCustomByKey( 
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddCustomInfo( 
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveCustomByIndex( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveCustomByKey( 
            /* [in] */ BSTR key) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSummaryInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSummaryInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSummaryInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSummaryInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSummaryInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSummaryInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSummaryInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSummaryInfo * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pAuthor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Author )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pAuthor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pComments);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comments )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pComments);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HyperlinkBase )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pHyperlinkBase);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HyperlinkBase )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pHyperlinkBase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Keywords )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pKeywords);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Keywords )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pKeywords);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastSavedBy )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pLastSavedBy);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LastSavedBy )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pLastSavedBy);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionNumber )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pRevisionNumber);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionNumber )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pRevisionNumber);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pSubject);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pSubject);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ BSTR *pTitle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR pTitle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NumCustomInfo )( 
            IGcadSummaryInfo * This,
            /* [retval][out] */ int *Index);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomByIndex )( 
            IGcadSummaryInfo * This,
            /* [in] */ int Index,
            /* [out] */ BSTR *pKey,
            /* [out] */ BSTR *pValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetCustomByKey )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR key,
            /* [out] */ BSTR *pValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCustomByIndex )( 
            IGcadSummaryInfo * This,
            /* [in] */ int Index,
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetCustomByKey )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddCustomInfo )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR key,
            /* [in] */ BSTR Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomByIndex )( 
            IGcadSummaryInfo * This,
            /* [in] */ int Index);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCustomByKey )( 
            IGcadSummaryInfo * This,
            /* [in] */ BSTR key);
        
        END_INTERFACE
    } IGcadSummaryInfoVtbl;

    interface IGcadSummaryInfo
    {
        CONST_VTBL struct IGcadSummaryInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSummaryInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSummaryInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSummaryInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSummaryInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSummaryInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSummaryInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSummaryInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSummaryInfo_get_Author(This,pAuthor)	\
    ( (This)->lpVtbl -> get_Author(This,pAuthor) ) 

#define IGcadSummaryInfo_put_Author(This,pAuthor)	\
    ( (This)->lpVtbl -> put_Author(This,pAuthor) ) 

#define IGcadSummaryInfo_get_Comments(This,pComments)	\
    ( (This)->lpVtbl -> get_Comments(This,pComments) ) 

#define IGcadSummaryInfo_put_Comments(This,pComments)	\
    ( (This)->lpVtbl -> put_Comments(This,pComments) ) 

#define IGcadSummaryInfo_get_HyperlinkBase(This,pHyperlinkBase)	\
    ( (This)->lpVtbl -> get_HyperlinkBase(This,pHyperlinkBase) ) 

#define IGcadSummaryInfo_put_HyperlinkBase(This,pHyperlinkBase)	\
    ( (This)->lpVtbl -> put_HyperlinkBase(This,pHyperlinkBase) ) 

#define IGcadSummaryInfo_get_Keywords(This,pKeywords)	\
    ( (This)->lpVtbl -> get_Keywords(This,pKeywords) ) 

#define IGcadSummaryInfo_put_Keywords(This,pKeywords)	\
    ( (This)->lpVtbl -> put_Keywords(This,pKeywords) ) 

#define IGcadSummaryInfo_get_LastSavedBy(This,pLastSavedBy)	\
    ( (This)->lpVtbl -> get_LastSavedBy(This,pLastSavedBy) ) 

#define IGcadSummaryInfo_put_LastSavedBy(This,pLastSavedBy)	\
    ( (This)->lpVtbl -> put_LastSavedBy(This,pLastSavedBy) ) 

#define IGcadSummaryInfo_get_RevisionNumber(This,pRevisionNumber)	\
    ( (This)->lpVtbl -> get_RevisionNumber(This,pRevisionNumber) ) 

#define IGcadSummaryInfo_put_RevisionNumber(This,pRevisionNumber)	\
    ( (This)->lpVtbl -> put_RevisionNumber(This,pRevisionNumber) ) 

#define IGcadSummaryInfo_get_Subject(This,pSubject)	\
    ( (This)->lpVtbl -> get_Subject(This,pSubject) ) 

#define IGcadSummaryInfo_put_Subject(This,pSubject)	\
    ( (This)->lpVtbl -> put_Subject(This,pSubject) ) 

#define IGcadSummaryInfo_get_Title(This,pTitle)	\
    ( (This)->lpVtbl -> get_Title(This,pTitle) ) 

#define IGcadSummaryInfo_put_Title(This,pTitle)	\
    ( (This)->lpVtbl -> put_Title(This,pTitle) ) 

#define IGcadSummaryInfo_NumCustomInfo(This,Index)	\
    ( (This)->lpVtbl -> NumCustomInfo(This,Index) ) 

#define IGcadSummaryInfo_GetCustomByIndex(This,Index,pKey,pValue)	\
    ( (This)->lpVtbl -> GetCustomByIndex(This,Index,pKey,pValue) ) 

#define IGcadSummaryInfo_GetCustomByKey(This,key,pValue)	\
    ( (This)->lpVtbl -> GetCustomByKey(This,key,pValue) ) 

#define IGcadSummaryInfo_SetCustomByIndex(This,Index,key,Value)	\
    ( (This)->lpVtbl -> SetCustomByIndex(This,Index,key,Value) ) 

#define IGcadSummaryInfo_SetCustomByKey(This,key,Value)	\
    ( (This)->lpVtbl -> SetCustomByKey(This,key,Value) ) 

#define IGcadSummaryInfo_AddCustomInfo(This,key,Value)	\
    ( (This)->lpVtbl -> AddCustomInfo(This,key,Value) ) 

#define IGcadSummaryInfo_RemoveCustomByIndex(This,Index)	\
    ( (This)->lpVtbl -> RemoveCustomByIndex(This,Index) ) 

#define IGcadSummaryInfo_RemoveCustomByKey(This,key)	\
    ( (This)->lpVtbl -> RemoveCustomByKey(This,key) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSummaryInfo_INTERFACE_DEFINED__ */


#ifndef __IGcadSectionManager_INTERFACE_DEFINED__
#define __IGcadSectionManager_INTERFACE_DEFINED__

/* interface IGcadSectionManager */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSectionManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46772CC0-5BD0-4B3E-BC74-74835D6B1D34")
    IGcadSectionManager : public IGcadObject
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadSection **pSection) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetLiveSection( 
            /* [retval][out] */ IGcadSection **pSection) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetUniqueSectionName( 
            /* [in] */ BSTR pBaseName,
            /* [retval][out] */ BSTR *ppUniqueName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSectionManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSectionManager * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSectionManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSectionManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSectionManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSectionManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSectionManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSectionManager * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSectionManager * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSectionManager * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSectionManager * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSectionManager * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSectionManager * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSectionManager * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSectionManager * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSectionManager * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSectionManager * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSectionManager * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSectionManager * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadSectionManager * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadSection **pSection);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadSectionManager * This,
            /* [retval][out] */ long *pVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLiveSection )( 
            IGcadSectionManager * This,
            /* [retval][out] */ IGcadSection **pSection);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUniqueSectionName )( 
            IGcadSectionManager * This,
            /* [in] */ BSTR pBaseName,
            /* [retval][out] */ BSTR *ppUniqueName);
        
        END_INTERFACE
    } IGcadSectionManagerVtbl;

    interface IGcadSectionManager
    {
        CONST_VTBL struct IGcadSectionManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSectionManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSectionManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSectionManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSectionManager_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSectionManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSectionManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSectionManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSectionManager_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSectionManager_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSectionManager_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSectionManager_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSectionManager_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSectionManager_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSectionManager_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSectionManager_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSectionManager_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSectionManager_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSectionManager_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSectionManager_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSectionManager_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSectionManager_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSectionManager_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSectionManager_Item(This,Index,pSection)	\
    ( (This)->lpVtbl -> Item(This,Index,pSection) ) 

#define IGcadSectionManager_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadSectionManager_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IGcadSectionManager_GetLiveSection(This,pSection)	\
    ( (This)->lpVtbl -> GetLiveSection(This,pSection) ) 

#define IGcadSectionManager_GetUniqueSectionName(This,pBaseName,ppUniqueName)	\
    ( (This)->lpVtbl -> GetUniqueSectionName(This,pBaseName,ppUniqueName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSectionManager_INTERFACE_DEFINED__ */


#ifndef __IGcadMaterials_INTERFACE_DEFINED__
#define __IGcadMaterials_INTERFACE_DEFINED__

/* interface IGcadMaterials */
/* [unique][oleautomation][dual][uuid][object] */ 


EXTERN_C const IID IID_IGcadMaterials;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2EFC6D54-715E-4A76-844A-7394A60491A0")
    IGcadMaterials : public IGcadObject
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadMaterial **pItem) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [hidden][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadMaterial **pDimStyle) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMaterialsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMaterials * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMaterials * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMaterials * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMaterials * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMaterials * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMaterials * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMaterials * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMaterials * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMaterials * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMaterials * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMaterials * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMaterials * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMaterials * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMaterials * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMaterials * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMaterials * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMaterials * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMaterials * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMaterials * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMaterials * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMaterials * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMaterials * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IGcadMaterials * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ IGcadMaterial **pItem);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IGcadMaterials * This,
            /* [retval][out] */ long *pCount);
        
        /* [hidden][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IGcadMaterials * This,
            /* [retval][out] */ IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IGcadMaterials * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IGcadMaterial **pDimStyle);
        
        END_INTERFACE
    } IGcadMaterialsVtbl;

    interface IGcadMaterials
    {
        CONST_VTBL struct IGcadMaterialsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMaterials_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMaterials_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMaterials_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMaterials_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMaterials_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMaterials_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMaterials_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMaterials_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMaterials_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMaterials_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMaterials_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMaterials_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMaterials_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMaterials_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMaterials_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMaterials_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMaterials_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMaterials_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMaterials_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMaterials_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMaterials_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMaterials_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMaterials_Item(This,Index,pItem)	\
    ( (This)->lpVtbl -> Item(This,Index,pItem) ) 

#define IGcadMaterials_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IGcadMaterials_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IGcadMaterials_Add(This,Name,pDimStyle)	\
    ( (This)->lpVtbl -> Add(This,Name,pDimStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMaterials_INTERFACE_DEFINED__ */


#ifndef __IGcadMaterial_INTERFACE_DEFINED__
#define __IGcadMaterial_INTERFACE_DEFINED__

/* interface IGcadMaterial */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadMaterial;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1938AD17-8388-411B-9D68-642C319880B9")
    IGcadMaterial : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *bstrDes) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDes) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMaterialVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMaterial * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMaterial * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMaterial * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMaterial * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMaterial * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMaterial * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMaterial * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMaterial * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMaterial * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMaterial * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMaterial * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMaterial * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMaterial * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMaterial * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMaterial * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMaterial * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMaterial * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMaterial * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMaterial * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMaterial * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMaterial * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMaterial * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IGcadMaterial * This,
            /* [retval][out] */ BSTR *bstrDes);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IGcadMaterial * This,
            /* [in] */ BSTR bstrDes);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadMaterial * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadMaterial * This,
            /* [in] */ BSTR bstrName);
        
        END_INTERFACE
    } IGcadMaterialVtbl;

    interface IGcadMaterial
    {
        CONST_VTBL struct IGcadMaterialVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMaterial_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMaterial_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMaterial_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMaterial_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMaterial_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMaterial_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMaterial_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMaterial_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMaterial_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMaterial_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMaterial_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMaterial_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMaterial_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMaterial_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMaterial_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMaterial_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMaterial_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMaterial_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMaterial_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMaterial_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMaterial_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMaterial_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMaterial_get_Description(This,bstrDes)	\
    ( (This)->lpVtbl -> get_Description(This,bstrDes) ) 

#define IGcadMaterial_put_Description(This,bstrDes)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDes) ) 

#define IGcadMaterial_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadMaterial_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadMaterial_INTERFACE_DEFINED__ */


#ifndef __IGcadSectionTypeSettings_INTERFACE_DEFINED__
#define __IGcadSectionTypeSettings_INTERFACE_DEFINED__

/* interface IGcadSectionTypeSettings */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadSectionTypeSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AF4261EE-A61F-4386-B2AB-65FA96812917")
    IGcadSectionTypeSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GenerationOptions( 
            /* [retval][out] */ GcSectionGeneration *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GenerationOptions( 
            /* [in] */ GcSectionGeneration pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceObjects( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceObjects( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DestinationBlock( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DestinationBlock( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DestinationFile( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DestinationFile( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLayer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLayer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryPlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryPlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryDivisionLines( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryDivisionLines( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillVisible( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillVisible( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchPatternType( 
            /* [retval][out] */ GcPatternType *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchPatternType( 
            /* [in] */ GcPatternType pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchPatternName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchPatternName( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchAngle( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchAngle( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchScale( 
            /* [retval][out] */ GCAD_NOUNITS *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchScale( 
            /* [in] */ GCAD_NOUNITS pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchSpacing( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchSpacing( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillLayer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillLayer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillLinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillLinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillPlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillPlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillLineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IntersectionFillFaceTransparency( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IntersectionFillFaceTransparency( 
            /* [in] */ long pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesVisible( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesVisible( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesHiddenLine( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesHiddenLine( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesLayer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesLayer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesLinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesLinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesPlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesPlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundLinesLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundLinesLineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesVisible( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesVisible( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesHiddenLine( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesHiddenLine( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesLayer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesLayer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesLinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesLinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesPlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesPlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesLineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesFaceTransparency( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesFaceTransparency( 
            /* [in] */ long pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundLinesEdgeTransparency( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundLinesEdgeTransparency( 
            /* [in] */ long pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesVisible( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesVisible( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesColor( 
            /* [retval][out] */ IGcadAcCmColor **pColor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesColor( 
            /* [in] */ IGcadAcCmColor *pColor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLayer( 
            /* [retval][out] */ BSTR *Layer) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLayer( 
            /* [in] */ BSTR Layer) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLinetype( 
            /* [retval][out] */ BSTR *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLinetype( 
            /* [in] */ BSTR Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLinetypeScale( 
            /* [retval][out] */ GCAD_NOUNITS *ltScale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLinetypeScale( 
            /* [in] */ GCAD_NOUNITS ltScale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesPlotStyleName( 
            /* [retval][out] */ BSTR *plotStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesPlotStyleName( 
            /* [in] */ BSTR plotStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLineweight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLineweight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSectionTypeSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSectionTypeSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSectionTypeSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSectionTypeSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSectionTypeSettings * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GenerationOptions )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GcSectionGeneration *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GenerationOptions )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GcSectionGeneration pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceObjects )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceObjects )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationBlock )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DestinationBlock )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationFile )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DestinationFile )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryColor )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryColor )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLayer )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLayer )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryDivisionLines )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryDivisionLines )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillVisible )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillVisible )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternType )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GcPatternType *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternType )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GcPatternType pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchAngle )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchAngle )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchSpacing )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchSpacing )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillColor )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillColor )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLayer )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLayer )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillFaceTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillFaceTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ long pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesHiddenLine )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesHiddenLine )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesHiddenLine )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesHiddenLine )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesFaceTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesFaceTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ long pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesEdgeTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ long *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesEdgeTransparency )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ long pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesVisible )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesColor )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLayer )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetype )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetypeScale )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesPlotStyleName )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLineweight )( 
            IGcadSectionTypeSettings * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        END_INTERFACE
    } IGcadSectionTypeSettingsVtbl;

    interface IGcadSectionTypeSettings
    {
        CONST_VTBL struct IGcadSectionTypeSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSectionTypeSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSectionTypeSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSectionTypeSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSectionTypeSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSectionTypeSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSectionTypeSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSectionTypeSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSectionTypeSettings_get_GenerationOptions(This,pVal)	\
    ( (This)->lpVtbl -> get_GenerationOptions(This,pVal) ) 

#define IGcadSectionTypeSettings_put_GenerationOptions(This,pVal)	\
    ( (This)->lpVtbl -> put_GenerationOptions(This,pVal) ) 

#define IGcadSectionTypeSettings_get_SourceObjects(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceObjects(This,pVal) ) 

#define IGcadSectionTypeSettings_put_SourceObjects(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceObjects(This,pVal) ) 

#define IGcadSectionTypeSettings_get_DestinationBlock(This,pVal)	\
    ( (This)->lpVtbl -> get_DestinationBlock(This,pVal) ) 

#define IGcadSectionTypeSettings_put_DestinationBlock(This,pVal)	\
    ( (This)->lpVtbl -> put_DestinationBlock(This,pVal) ) 

#define IGcadSectionTypeSettings_get_DestinationFile(This,pVal)	\
    ( (This)->lpVtbl -> get_DestinationFile(This,pVal) ) 

#define IGcadSectionTypeSettings_put_DestinationFile(This,pVal)	\
    ( (This)->lpVtbl -> put_DestinationFile(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryColor(This,pColor)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryColor(This,pColor) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryColor(This,pColor)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryColor(This,pColor) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryLayer(This,Layer)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryLayer(This,Layer)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_get_IntersectionBoundaryDivisionLines(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionBoundaryDivisionLines(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionBoundaryDivisionLines(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionBoundaryDivisionLines(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillHatchPatternType(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillHatchPatternType(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillHatchPatternType(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillHatchPatternType(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillHatchPatternName(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillHatchPatternName(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillHatchPatternName(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillHatchPatternName(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillHatchAngle(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillHatchAngle(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillHatchAngle(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillHatchAngle(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillHatchScale(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillHatchScale(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillHatchScale(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillHatchScale(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillHatchSpacing(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillHatchSpacing(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillHatchSpacing(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillHatchSpacing(This,pVal) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillColor(This,pColor)	\
    ( (This)->lpVtbl -> get_IntersectionFillColor(This,pColor) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillColor(This,pColor)	\
    ( (This)->lpVtbl -> put_IntersectionFillColor(This,pColor) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillLayer(This,Layer)	\
    ( (This)->lpVtbl -> get_IntersectionFillLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillLayer(This,Layer)	\
    ( (This)->lpVtbl -> put_IntersectionFillLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_IntersectionFillLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_IntersectionFillLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_IntersectionFillLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_IntersectionFillLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_IntersectionFillPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_IntersectionFillPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_IntersectionFillLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_IntersectionFillLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_get_IntersectionFillFaceTransparency(This,pVal)	\
    ( (This)->lpVtbl -> get_IntersectionFillFaceTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_put_IntersectionFillFaceTransparency(This,pVal)	\
    ( (This)->lpVtbl -> put_IntersectionFillFaceTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_BackgroundLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_BackgroundLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesHiddenLine(This,pVal)	\
    ( (This)->lpVtbl -> get_BackgroundLinesHiddenLine(This,pVal) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesHiddenLine(This,pVal)	\
    ( (This)->lpVtbl -> put_BackgroundLinesHiddenLine(This,pVal) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> get_BackgroundLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> put_BackgroundLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> get_BackgroundLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> put_BackgroundLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_BackgroundLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_BackgroundLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_BackgroundLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_BackgroundLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_BackgroundLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_BackgroundLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_get_BackgroundLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_BackgroundLinesLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_put_BackgroundLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_BackgroundLinesLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_ForegroundLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_ForegroundLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesHiddenLine(This,pVal)	\
    ( (This)->lpVtbl -> get_ForegroundLinesHiddenLine(This,pVal) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesHiddenLine(This,pVal)	\
    ( (This)->lpVtbl -> put_ForegroundLinesHiddenLine(This,pVal) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> get_ForegroundLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> put_ForegroundLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> get_ForegroundLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> put_ForegroundLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_ForegroundLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_ForegroundLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_ForegroundLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_ForegroundLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_ForegroundLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_ForegroundLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_ForegroundLinesLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_ForegroundLinesLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesFaceTransparency(This,pVal)	\
    ( (This)->lpVtbl -> get_ForegroundLinesFaceTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesFaceTransparency(This,pVal)	\
    ( (This)->lpVtbl -> put_ForegroundLinesFaceTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_get_ForegroundLinesEdgeTransparency(This,pVal)	\
    ( (This)->lpVtbl -> get_ForegroundLinesEdgeTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_put_ForegroundLinesEdgeTransparency(This,pVal)	\
    ( (This)->lpVtbl -> put_ForegroundLinesEdgeTransparency(This,pVal) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesVisible(This,pVal) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesColor(This,pColor)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesColor(This,pColor) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesLayer(This,Layer)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesLayer(This,Layer) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesLinetype(This,Linetype) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesLinetypeScale(This,ltScale) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesPlotStyleName(This,plotStyle) ) 

#define IGcadSectionTypeSettings_get_CurveTangencyLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_CurveTangencyLinesLineweight(This,Lineweight) ) 

#define IGcadSectionTypeSettings_put_CurveTangencyLinesLineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_CurveTangencyLinesLineweight(This,Lineweight) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSectionTypeSettings_INTERFACE_DEFINED__ */


#ifndef __IGcadPViewport_INTERFACE_DEFINED__
#define __IGcadPViewport_INTERFACE_DEFINED__

/* interface IGcadPViewport */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadPViewport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66460563-4FE3-497D-8FA0-45FBFBB6E0E8")
    IGcadPViewport : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *CenterPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT CenterPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ VARIANT *dirVector) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ VARIANT dirVector) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOn( 
            /* [retval][out] */ VARIANT_BOOL *bGridOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOn( 
            /* [in] */ VARIANT_BOOL bGridOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewportOn( 
            /* [retval][out] */ VARIANT_BOOL *bOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewportOn( 
            /* [in] */ VARIANT_BOOL bOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Clipped( 
            /* [retval][out] */ VARIANT_BOOL *bClipped) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayLocked( 
            /* [retval][out] */ VARIANT_BOOL *bLocked) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayLocked( 
            /* [in] */ VARIANT_BOOL bLocked) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StandardScale( 
            /* [retval][out] */ GcViewportScale *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StandardScale( 
            /* [in] */ GcViewportScale scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomScale( 
            /* [retval][out] */ double *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CustomScale( 
            /* [in] */ double scale) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleSheet( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleSheet( 
            /* [in] */ BSTR pName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UCSPerViewport( 
            /* [retval][out] */ VARIANT_BOOL *UCSSaved) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UCSPerViewport( 
            /* [in] */ VARIANT_BOOL UCSSaved) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapBasePoint( 
            /* [retval][out] */ VARIANT *lowLeft) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapBasePoint( 
            /* [in] */ VARIANT lowLeft) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapOn( 
            /* [retval][out] */ VARIANT_BOOL *bSnapOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapOn( 
            /* [in] */ VARIANT_BOOL bSnapOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapRotationAngle( 
            /* [retval][out] */ double *Angle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapRotationAngle( 
            /* [in] */ double Angle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UCSIconOn( 
            /* [retval][out] */ VARIANT_BOOL *bIconOn) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UCSIconOn( 
            /* [in] */ VARIANT_BOOL bIconOn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_UCSIconAtOrigin( 
            /* [retval][out] */ VARIANT_BOOL *bIconAtOrigin) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_UCSIconAtOrigin( 
            /* [in] */ VARIANT_BOOL bIconAtOrigin) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetGridSpacing( 
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetGridSpacing( 
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSnapSpacing( 
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSnapSpacing( 
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ VARIANT_BOOL bStatus) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TwistAngle( 
            /* [retval][out] */ GCAD_ANGLE *Angle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TwistAngle( 
            /* [in] */ GCAD_ANGLE Angle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LensLength( 
            /* [retval][out] */ double *Length) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LensLength( 
            /* [in] */ double Length) = 0;
        
        virtual /* [helpstring][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_RemoveHiddenLines( 
            /* [retval][out] */ VARIANT_BOOL *bRemoval) = 0;
        
        virtual /* [helpstring][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_RemoveHiddenLines( 
            /* [in] */ VARIANT_BOOL bRemoval) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ VARIANT *targetPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ VARIANT targetPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcSmoothness( 
            /* [retval][out] */ long *arcSmooth) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcSmoothness( 
            /* [in] */ long arcSmooth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisualStyle( 
            /* [retval][out] */ int *pVisualStyleIndex) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisualStyle( 
            /* [in] */ int pVisualStyleIndex) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadePlot( 
            /* [retval][out] */ int *pShadePlotIndex) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadePlot( 
            /* [in] */ int pShadePlotIndex) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ModelView( 
            /* [retval][out] */ IGcadView **View) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ModelView( 
            /* [in] */ IGcadView *View) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SheetView( 
            /* [retval][out] */ IGcadView **View) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SheetView( 
            /* [in] */ IGcadView *View) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LabelBlockId( 
            /* [retval][out] */ long *ObjectID) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LabelBlockId( 
            /* [in] */ long *ObjectID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSheetView( 
            /* [retval][out] */ VARIANT_BOOL *bSheetView) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SyncModelView( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayerPropertyOverrides( 
            /* [retval][out] */ VARIANT_BOOL *__MIDL__IGcadPViewport0000) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StandardScale2( 
            /* [retval][out] */ int *__MIDL__IGcadPViewport0001) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StandardScale2( 
            /* [in] */ int rhs) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LabelBlockId32( 
            /* [retval][out] */ long *ObjectID) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LabelBlockId32( 
            /* [in] */ long *ObjectID) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadPViewportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadPViewport * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadPViewport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadPViewport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadPViewport * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadPViewport * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadPViewport * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadPViewport * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadPViewport * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadPViewport * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadPViewport * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadPViewport * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadPViewport * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadPViewport * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadPViewport * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadPViewport * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadPViewport * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadPViewport * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadPViewport * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadPViewport * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadPViewport * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadPViewport * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadPViewport * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadPViewport * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadPViewport * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadPViewport * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadPViewport * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadPViewport * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadPViewport * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadPViewport * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadPViewport * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadPViewport * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadPViewport * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadPViewport * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadPViewport * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadPViewport * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT *CenterPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT CenterPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT *dirVector);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT dirVector);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOn )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bGridOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOn )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bGridOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadPViewport * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadPViewport * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadPViewport * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadPViewport * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewportOn )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewportOn )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Clipped )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bClipped);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayLocked )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bLocked);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayLocked )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bLocked);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StandardScale )( 
            IGcadPViewport * This,
            /* [retval][out] */ GcViewportScale *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StandardScale )( 
            IGcadPViewport * This,
            /* [in] */ GcViewportScale scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomScale )( 
            IGcadPViewport * This,
            /* [retval][out] */ double *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CustomScale )( 
            IGcadPViewport * This,
            /* [in] */ double scale);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )( 
            IGcadPViewport * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )( 
            IGcadPViewport * This,
            /* [in] */ BSTR pName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UCSPerViewport )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *UCSSaved);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UCSPerViewport )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL UCSSaved);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapBasePoint )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT *lowLeft);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapBasePoint )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT lowLeft);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapOn )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bSnapOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapOn )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bSnapOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapRotationAngle )( 
            IGcadPViewport * This,
            /* [retval][out] */ double *Angle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapRotationAngle )( 
            IGcadPViewport * This,
            /* [in] */ double Angle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UCSIconOn )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bIconOn);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UCSIconOn )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bIconOn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UCSIconAtOrigin )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bIconAtOrigin);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UCSIconAtOrigin )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bIconAtOrigin);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetGridSpacing )( 
            IGcadPViewport * This,
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetGridSpacing )( 
            IGcadPViewport * This,
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSnapSpacing )( 
            IGcadPViewport * This,
            /* [out] */ double *XSpacing,
            /* [out] */ double *YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSnapSpacing )( 
            IGcadPViewport * This,
            /* [in] */ double XSpacing,
            /* [in] */ double YSpacing);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Display )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TwistAngle )( 
            IGcadPViewport * This,
            /* [retval][out] */ GCAD_ANGLE *Angle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TwistAngle )( 
            IGcadPViewport * This,
            /* [in] */ GCAD_ANGLE Angle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LensLength )( 
            IGcadPViewport * This,
            /* [retval][out] */ double *Length);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LensLength )( 
            IGcadPViewport * This,
            /* [in] */ double Length);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveHiddenLines )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bRemoval);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveHiddenLines )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT_BOOL bRemoval);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT *targetPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadPViewport * This,
            /* [in] */ VARIANT targetPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcSmoothness )( 
            IGcadPViewport * This,
            /* [retval][out] */ long *arcSmooth);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcSmoothness )( 
            IGcadPViewport * This,
            /* [in] */ long arcSmooth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisualStyle )( 
            IGcadPViewport * This,
            /* [retval][out] */ int *pVisualStyleIndex);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisualStyle )( 
            IGcadPViewport * This,
            /* [in] */ int pVisualStyleIndex);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadePlot )( 
            IGcadPViewport * This,
            /* [retval][out] */ int *pShadePlotIndex);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadePlot )( 
            IGcadPViewport * This,
            /* [in] */ int pShadePlotIndex);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ModelView )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadView **View);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ModelView )( 
            IGcadPViewport * This,
            /* [in] */ IGcadView *View);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SheetView )( 
            IGcadPViewport * This,
            /* [retval][out] */ IGcadView **View);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SheetView )( 
            IGcadPViewport * This,
            /* [in] */ IGcadView *View);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LabelBlockId )( 
            IGcadPViewport * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LabelBlockId )( 
            IGcadPViewport * This,
            /* [in] */ long *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSheetView )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *bSheetView);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SyncModelView )( 
            IGcadPViewport * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayerPropertyOverrides )( 
            IGcadPViewport * This,
            /* [retval][out] */ VARIANT_BOOL *__MIDL__IGcadPViewport0000);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StandardScale2 )( 
            IGcadPViewport * This,
            /* [retval][out] */ int *__MIDL__IGcadPViewport0001);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StandardScale2 )( 
            IGcadPViewport * This,
            /* [in] */ int rhs);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LabelBlockId32 )( 
            IGcadPViewport * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LabelBlockId32 )( 
            IGcadPViewport * This,
            /* [in] */ long *ObjectID);
        
        END_INTERFACE
    } IGcadPViewportVtbl;

    interface IGcadPViewport
    {
        CONST_VTBL struct IGcadPViewportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadPViewport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadPViewport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadPViewport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadPViewport_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadPViewport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadPViewport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadPViewport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadPViewport_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadPViewport_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadPViewport_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadPViewport_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadPViewport_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadPViewport_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadPViewport_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadPViewport_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadPViewport_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadPViewport_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadPViewport_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadPViewport_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadPViewport_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadPViewport_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadPViewport_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadPViewport_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadPViewport_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadPViewport_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadPViewport_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadPViewport_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadPViewport_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadPViewport_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadPViewport_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadPViewport_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadPViewport_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadPViewport_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadPViewport_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadPViewport_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadPViewport_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadPViewport_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadPViewport_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadPViewport_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadPViewport_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadPViewport_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadPViewport_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadPViewport_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadPViewport_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadPViewport_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadPViewport_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadPViewport_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadPViewport_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadPViewport_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadPViewport_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadPViewport_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadPViewport_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadPViewport_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadPViewport_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadPViewport_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadPViewport_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadPViewport_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadPViewport_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadPViewport_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadPViewport_get_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> get_Center(This,CenterPoint) ) 

#define IGcadPViewport_put_Center(This,CenterPoint)	\
    ( (This)->lpVtbl -> put_Center(This,CenterPoint) ) 

#define IGcadPViewport_get_Direction(This,dirVector)	\
    ( (This)->lpVtbl -> get_Direction(This,dirVector) ) 

#define IGcadPViewport_put_Direction(This,dirVector)	\
    ( (This)->lpVtbl -> put_Direction(This,dirVector) ) 

#define IGcadPViewport_get_GridOn(This,bGridOn)	\
    ( (This)->lpVtbl -> get_GridOn(This,bGridOn) ) 

#define IGcadPViewport_put_GridOn(This,bGridOn)	\
    ( (This)->lpVtbl -> put_GridOn(This,bGridOn) ) 

#define IGcadPViewport_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadPViewport_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadPViewport_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadPViewport_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadPViewport_get_ViewportOn(This,bOn)	\
    ( (This)->lpVtbl -> get_ViewportOn(This,bOn) ) 

#define IGcadPViewport_put_ViewportOn(This,bOn)	\
    ( (This)->lpVtbl -> put_ViewportOn(This,bOn) ) 

#define IGcadPViewport_get_Clipped(This,bClipped)	\
    ( (This)->lpVtbl -> get_Clipped(This,bClipped) ) 

#define IGcadPViewport_get_DisplayLocked(This,bLocked)	\
    ( (This)->lpVtbl -> get_DisplayLocked(This,bLocked) ) 

#define IGcadPViewport_put_DisplayLocked(This,bLocked)	\
    ( (This)->lpVtbl -> put_DisplayLocked(This,bLocked) ) 

#define IGcadPViewport_get_StandardScale(This,scale)	\
    ( (This)->lpVtbl -> get_StandardScale(This,scale) ) 

#define IGcadPViewport_put_StandardScale(This,scale)	\
    ( (This)->lpVtbl -> put_StandardScale(This,scale) ) 

#define IGcadPViewport_get_CustomScale(This,scale)	\
    ( (This)->lpVtbl -> get_CustomScale(This,scale) ) 

#define IGcadPViewport_put_CustomScale(This,scale)	\
    ( (This)->lpVtbl -> put_CustomScale(This,scale) ) 

#define IGcadPViewport_get_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> get_StyleSheet(This,pName) ) 

#define IGcadPViewport_put_StyleSheet(This,pName)	\
    ( (This)->lpVtbl -> put_StyleSheet(This,pName) ) 

#define IGcadPViewport_get_UCSPerViewport(This,UCSSaved)	\
    ( (This)->lpVtbl -> get_UCSPerViewport(This,UCSSaved) ) 

#define IGcadPViewport_put_UCSPerViewport(This,UCSSaved)	\
    ( (This)->lpVtbl -> put_UCSPerViewport(This,UCSSaved) ) 

#define IGcadPViewport_get_SnapBasePoint(This,lowLeft)	\
    ( (This)->lpVtbl -> get_SnapBasePoint(This,lowLeft) ) 

#define IGcadPViewport_put_SnapBasePoint(This,lowLeft)	\
    ( (This)->lpVtbl -> put_SnapBasePoint(This,lowLeft) ) 

#define IGcadPViewport_get_SnapOn(This,bSnapOn)	\
    ( (This)->lpVtbl -> get_SnapOn(This,bSnapOn) ) 

#define IGcadPViewport_put_SnapOn(This,bSnapOn)	\
    ( (This)->lpVtbl -> put_SnapOn(This,bSnapOn) ) 

#define IGcadPViewport_get_SnapRotationAngle(This,Angle)	\
    ( (This)->lpVtbl -> get_SnapRotationAngle(This,Angle) ) 

#define IGcadPViewport_put_SnapRotationAngle(This,Angle)	\
    ( (This)->lpVtbl -> put_SnapRotationAngle(This,Angle) ) 

#define IGcadPViewport_get_UCSIconOn(This,bIconOn)	\
    ( (This)->lpVtbl -> get_UCSIconOn(This,bIconOn) ) 

#define IGcadPViewport_put_UCSIconOn(This,bIconOn)	\
    ( (This)->lpVtbl -> put_UCSIconOn(This,bIconOn) ) 

#define IGcadPViewport_get_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ( (This)->lpVtbl -> get_UCSIconAtOrigin(This,bIconAtOrigin) ) 

#define IGcadPViewport_put_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ( (This)->lpVtbl -> put_UCSIconAtOrigin(This,bIconAtOrigin) ) 

#define IGcadPViewport_GetGridSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> GetGridSpacing(This,XSpacing,YSpacing) ) 

#define IGcadPViewport_SetGridSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> SetGridSpacing(This,XSpacing,YSpacing) ) 

#define IGcadPViewport_GetSnapSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> GetSnapSpacing(This,XSpacing,YSpacing) ) 

#define IGcadPViewport_SetSnapSpacing(This,XSpacing,YSpacing)	\
    ( (This)->lpVtbl -> SetSnapSpacing(This,XSpacing,YSpacing) ) 

#define IGcadPViewport_Display(This,bStatus)	\
    ( (This)->lpVtbl -> Display(This,bStatus) ) 

#define IGcadPViewport_get_TwistAngle(This,Angle)	\
    ( (This)->lpVtbl -> get_TwistAngle(This,Angle) ) 

#define IGcadPViewport_put_TwistAngle(This,Angle)	\
    ( (This)->lpVtbl -> put_TwistAngle(This,Angle) ) 

#define IGcadPViewport_get_LensLength(This,Length)	\
    ( (This)->lpVtbl -> get_LensLength(This,Length) ) 

#define IGcadPViewport_put_LensLength(This,Length)	\
    ( (This)->lpVtbl -> put_LensLength(This,Length) ) 

#define IGcadPViewport_get_RemoveHiddenLines(This,bRemoval)	\
    ( (This)->lpVtbl -> get_RemoveHiddenLines(This,bRemoval) ) 

#define IGcadPViewport_put_RemoveHiddenLines(This,bRemoval)	\
    ( (This)->lpVtbl -> put_RemoveHiddenLines(This,bRemoval) ) 

#define IGcadPViewport_get_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> get_Target(This,targetPoint) ) 

#define IGcadPViewport_put_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> put_Target(This,targetPoint) ) 

#define IGcadPViewport_get_ArcSmoothness(This,arcSmooth)	\
    ( (This)->lpVtbl -> get_ArcSmoothness(This,arcSmooth) ) 

#define IGcadPViewport_put_ArcSmoothness(This,arcSmooth)	\
    ( (This)->lpVtbl -> put_ArcSmoothness(This,arcSmooth) ) 

#define IGcadPViewport_get_VisualStyle(This,pVisualStyleIndex)	\
    ( (This)->lpVtbl -> get_VisualStyle(This,pVisualStyleIndex) ) 

#define IGcadPViewport_put_VisualStyle(This,pVisualStyleIndex)	\
    ( (This)->lpVtbl -> put_VisualStyle(This,pVisualStyleIndex) ) 

#define IGcadPViewport_get_ShadePlot(This,pShadePlotIndex)	\
    ( (This)->lpVtbl -> get_ShadePlot(This,pShadePlotIndex) ) 

#define IGcadPViewport_put_ShadePlot(This,pShadePlotIndex)	\
    ( (This)->lpVtbl -> put_ShadePlot(This,pShadePlotIndex) ) 

#define IGcadPViewport_get_ModelView(This,View)	\
    ( (This)->lpVtbl -> get_ModelView(This,View) ) 

#define IGcadPViewport_put_ModelView(This,View)	\
    ( (This)->lpVtbl -> put_ModelView(This,View) ) 

#define IGcadPViewport_get_SheetView(This,View)	\
    ( (This)->lpVtbl -> get_SheetView(This,View) ) 

#define IGcadPViewport_put_SheetView(This,View)	\
    ( (This)->lpVtbl -> put_SheetView(This,View) ) 

#define IGcadPViewport_get_LabelBlockId(This,ObjectID)	\
    ( (This)->lpVtbl -> get_LabelBlockId(This,ObjectID) ) 

#define IGcadPViewport_put_LabelBlockId(This,ObjectID)	\
    ( (This)->lpVtbl -> put_LabelBlockId(This,ObjectID) ) 

#define IGcadPViewport_get_HasSheetView(This,bSheetView)	\
    ( (This)->lpVtbl -> get_HasSheetView(This,bSheetView) ) 

#define IGcadPViewport_SyncModelView(This)	\
    ( (This)->lpVtbl -> SyncModelView(This) ) 

#define IGcadPViewport_get_LayerPropertyOverrides(This,__MIDL__IGcadPViewport0000)	\
    ( (This)->lpVtbl -> get_LayerPropertyOverrides(This,__MIDL__IGcadPViewport0000) ) 

#define IGcadPViewport_get_StandardScale2(This,__MIDL__IGcadPViewport0001)	\
    ( (This)->lpVtbl -> get_StandardScale2(This,__MIDL__IGcadPViewport0001) ) 

#define IGcadPViewport_put_StandardScale2(This,rhs)	\
    ( (This)->lpVtbl -> put_StandardScale2(This,rhs) ) 

#define IGcadPViewport_get_LabelBlockId32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_LabelBlockId32(This,ObjectID) ) 

#define IGcadPViewport_put_LabelBlockId32(This,ObjectID)	\
    ( (This)->lpVtbl -> put_LabelBlockId32(This,ObjectID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadPViewport_INTERFACE_DEFINED__ */


#ifndef __IGcadView_INTERFACE_DEFINED__
#define __IGcadView_INTERFACE_DEFINED__

/* interface IGcadView */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CD455A12-9537-4EFC-85FE-5A2A57A38517")
    IGcadView : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *Center) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT Center) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ VARIANT *targetPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ VARIANT targetPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ VARIANT *dirVec) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ VARIANT dirVec) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CategoryName( 
            /* [retval][out] */ BSTR *category) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_CategoryName( 
            /* [in] */ BSTR category) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutId( 
            /* [retval][out] */ LONG_PTR *ObjectID) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutId( 
            /* [in] */ LONG_PTR ObjectID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayerState( 
            /* [retval][out] */ BSTR *LayerState) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayerState( 
            /* [in] */ BSTR LayerState) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasVpAssociation( 
            /* [retval][out] */ VARIANT_BOOL *bVpAssoc) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasVpAssociation( 
            /* [in] */ VARIANT_BOOL bVpAssoc) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutId32( 
            /* [retval][out] */ long *ObjectID) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutId32( 
            /* [in] */ long ObjectID) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadView * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadView * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadView * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadView * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadView * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadView * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadView * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadView * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadView * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadView * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadView * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadView * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadView * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadView * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadView * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadView * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadView * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadView * This,
            /* [retval][out] */ VARIANT *Center);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadView * This,
            /* [in] */ VARIANT Center);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadView * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadView * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IGcadView * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IGcadView * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadView * This,
            /* [retval][out] */ VARIANT *targetPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadView * This,
            /* [in] */ VARIANT targetPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            IGcadView * This,
            /* [retval][out] */ VARIANT *dirVec);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            IGcadView * This,
            /* [in] */ VARIANT dirVec);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadView * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadView * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CategoryName )( 
            IGcadView * This,
            /* [retval][out] */ BSTR *category);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CategoryName )( 
            IGcadView * This,
            /* [in] */ BSTR category);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutId )( 
            IGcadView * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutId )( 
            IGcadView * This,
            /* [in] */ LONG_PTR ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayerState )( 
            IGcadView * This,
            /* [retval][out] */ BSTR *LayerState);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayerState )( 
            IGcadView * This,
            /* [in] */ BSTR LayerState);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasVpAssociation )( 
            IGcadView * This,
            /* [retval][out] */ VARIANT_BOOL *bVpAssoc);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasVpAssociation )( 
            IGcadView * This,
            /* [in] */ VARIANT_BOOL bVpAssoc);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutId32 )( 
            IGcadView * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutId32 )( 
            IGcadView * This,
            /* [in] */ long ObjectID);
        
        END_INTERFACE
    } IGcadViewVtbl;

    interface IGcadView
    {
        CONST_VTBL struct IGcadViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadView_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadView_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadView_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadView_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadView_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadView_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadView_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadView_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadView_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadView_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadView_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadView_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadView_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadView_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadView_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadView_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadView_get_Center(This,Center)	\
    ( (This)->lpVtbl -> get_Center(This,Center) ) 

#define IGcadView_put_Center(This,Center)	\
    ( (This)->lpVtbl -> put_Center(This,Center) ) 

#define IGcadView_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IGcadView_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IGcadView_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IGcadView_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IGcadView_get_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> get_Target(This,targetPoint) ) 

#define IGcadView_put_Target(This,targetPoint)	\
    ( (This)->lpVtbl -> put_Target(This,targetPoint) ) 

#define IGcadView_get_Direction(This,dirVec)	\
    ( (This)->lpVtbl -> get_Direction(This,dirVec) ) 

#define IGcadView_put_Direction(This,dirVec)	\
    ( (This)->lpVtbl -> put_Direction(This,dirVec) ) 

#define IGcadView_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadView_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IGcadView_get_CategoryName(This,category)	\
    ( (This)->lpVtbl -> get_CategoryName(This,category) ) 

#define IGcadView_put_CategoryName(This,category)	\
    ( (This)->lpVtbl -> put_CategoryName(This,category) ) 

#define IGcadView_get_LayoutId(This,ObjectID)	\
    ( (This)->lpVtbl -> get_LayoutId(This,ObjectID) ) 

#define IGcadView_put_LayoutId(This,ObjectID)	\
    ( (This)->lpVtbl -> put_LayoutId(This,ObjectID) ) 

#define IGcadView_get_LayerState(This,LayerState)	\
    ( (This)->lpVtbl -> get_LayerState(This,LayerState) ) 

#define IGcadView_put_LayerState(This,LayerState)	\
    ( (This)->lpVtbl -> put_LayerState(This,LayerState) ) 

#define IGcadView_get_HasVpAssociation(This,bVpAssoc)	\
    ( (This)->lpVtbl -> get_HasVpAssociation(This,bVpAssoc) ) 

#define IGcadView_put_HasVpAssociation(This,bVpAssoc)	\
    ( (This)->lpVtbl -> put_HasVpAssociation(This,bVpAssoc) ) 

#define IGcadView_get_LayoutId32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_LayoutId32(This,ObjectID) ) 

#define IGcadView_put_LayoutId32(This,ObjectID)	\
    ( (This)->lpVtbl -> put_LayoutId32(This,ObjectID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadView_INTERFACE_DEFINED__ */


#ifndef __IGcadRegisteredApplication_INTERFACE_DEFINED__
#define __IGcadRegisteredApplication_INTERFACE_DEFINED__

/* interface IGcadRegisteredApplication */
/* [unique][oleautomation][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IGcadRegisteredApplication;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68127075-60D2-404A-928D-111E6EA2FAF1")
    IGcadRegisteredApplication : public IGcadObject
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadRegisteredApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadRegisteredApplication * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadRegisteredApplication * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadRegisteredApplication * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadRegisteredApplication * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadRegisteredApplication * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadRegisteredApplication * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadRegisteredApplication * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadRegisteredApplication * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadRegisteredApplication * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadRegisteredApplication * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadRegisteredApplication * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadRegisteredApplication * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadRegisteredApplication * This,
            /* [in] */ BSTR bstrName);
        
        END_INTERFACE
    } IGcadRegisteredApplicationVtbl;

    interface IGcadRegisteredApplication
    {
        CONST_VTBL struct IGcadRegisteredApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadRegisteredApplication_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadRegisteredApplication_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadRegisteredApplication_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadRegisteredApplication_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadRegisteredApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadRegisteredApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadRegisteredApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadRegisteredApplication_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadRegisteredApplication_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadRegisteredApplication_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadRegisteredApplication_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadRegisteredApplication_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadRegisteredApplication_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadRegisteredApplication_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadRegisteredApplication_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadRegisteredApplication_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadRegisteredApplication_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadRegisteredApplication_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadRegisteredApplication_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadRegisteredApplication_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadRegisteredApplication_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadRegisteredApplication_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadRegisteredApplication_get_Name(This,bstrName)	\
    ( (This)->lpVtbl -> get_Name(This,bstrName) ) 

#define IGcadRegisteredApplication_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadRegisteredApplication_INTERFACE_DEFINED__ */


#ifndef __IGcadMLeader_INTERFACE_DEFINED__
#define __IGcadMLeader_INTERFACE_DEFINED__

/* interface IGcadMLeader */
/* [object][unique][oleautomation][dual][helpstring][uuid] */ 


EXTERN_C const IID IID_IGcadMLeader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DDB9AE9B-C95B-42CA-8AB6-2EB7970CD600")
    IGcadMLeader : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleFactor( 
            /* [retval][out] */ double *scale) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleFactor( 
            /* [in] */ double scale) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderType( 
            /* [retval][out] */ GcMLeaderType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderType( 
            /* [in] */ GcMLeaderType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLineColor( 
            /* [retval][out] */ IGcadAcCmColor **Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLineColor( 
            /* [in] */ IGcadAcCmColor *Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLinetype( 
            /* [retval][out] */ GCAD_LTYPE *Linetype) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLinetype( 
            /* [in] */ GCAD_LTYPE Linetype) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLineWeight( 
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeaderLineWeight( 
            /* [in] */ GCAD_LWEIGHT Lineweight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadType( 
            /* [retval][out] */ GcDimArrowheadType *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadType( 
            /* [in] */ GcDimArrowheadType BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadSize( 
            /* [retval][out] */ double *size) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadSize( 
            /* [in] */ double size) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DogLegged( 
            /* [retval][out] */ VARIANT_BOOL *val) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DogLegged( 
            /* [in] */ VARIANT_BOOL val) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoglegLength( 
            /* [retval][out] */ double *DoglegLength) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoglegLength( 
            /* [in] */ double DoglegLength) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContentBlockName( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContentBlockName( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockConnectionType( 
            /* [retval][out] */ GcBlockConnectionType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockConnectionType( 
            /* [in] */ GcBlockConnectionType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlockScale( 
            /* [retval][out] */ GCAD_NOUNITS *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlockScale( 
            /* [in] */ GCAD_NOUNITS factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextString( 
            /* [retval][out] */ BSTR *bstrText) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextString( 
            /* [in] */ BSTR bstrText) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyleName( 
            /* [retval][out] */ BSTR *bstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextStyleName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextJustify( 
            /* [retval][out] */ GcAttachmentPoint *attPoint) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextJustify( 
            /* [in] */ GcAttachmentPoint attPoint) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDirection( 
            /* [retval][out] */ GcDrawingDirection *drawDir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextDirection( 
            /* [in] */ GcDrawingDirection drawDir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextWidth( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextWidth( 
            /* [in] */ double Width) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextHeight( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextHeight( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRotation( 
            /* [retval][out] */ GCAD_ANGLE *rotAngle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextRotation( 
            /* [in] */ GCAD_ANGLE rotAngle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLineSpacingFactor( 
            /* [retval][out] */ double *factor) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLineSpacingFactor( 
            /* [in] */ double factor) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLineSpacingDistance( 
            /* [retval][out] */ double *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLineSpacingDistance( 
            /* [in] */ double Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLineSpacingStyle( 
            /* [retval][out] */ GcLineSpacingStyle *style) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLineSpacingStyle( 
            /* [in] */ GcLineSpacingStyle style) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextBackgroundFill( 
            /* [retval][out] */ VARIANT_BOOL *bUseBackgroundFill) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextBackgroundFill( 
            /* [in] */ VARIANT_BOOL bUseBackgroundFill) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextAttachmentDirection( 
            /* [retval][out] */ GcTextAttachmentDirection *dir) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextAttachmentDirection( 
            /* [in] */ GcTextAttachmentDirection dir) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLeftAttachmentType( 
            /* [retval][out] */ GcTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLeftAttachmentType( 
            /* [in] */ GcTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRightAttachmentType( 
            /* [retval][out] */ GcTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextRightAttachmentType( 
            /* [in] */ GcTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextTopAttachmentType( 
            /* [retval][out] */ GcVerticalTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextTopAttachmentType( 
            /* [in] */ GcVerticalTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextBottomAttachmentType( 
            /* [retval][out] */ GcVerticalTextAttachmentType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextBottomAttachmentType( 
            /* [in] */ GcVerticalTextAttachmentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LandingGap( 
            /* [retval][out] */ double *gap) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LandingGap( 
            /* [in] */ double gap) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrowheadBlock( 
            /* [retval][out] */ BSTR *BlockName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrowheadBlock( 
            /* [in] */ BSTR BlockName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContentBlockType( 
            /* [retval][out] */ GcPredefBlockType *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContentBlockType( 
            /* [in] */ GcPredefBlockType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderCount( 
            /* [retval][out] */ int *number) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLeader( 
            /* [retval][out] */ int *leaderIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveLeader( 
            /* [in] */ int leaderIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLeaderLine( 
            /* [in] */ int leaderIndex,
            /* [in] */ VARIANT pointArray,
            /* [retval][out] */ int *leaderLineIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddLeaderLineEx( 
            /* [in] */ VARIANT pointArray,
            /* [retval][out] */ int *leaderLineIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveLeaderLine( 
            /* [in] */ int leaderLineIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetLeaderLineVertices( 
            /* [in] */ int leaderLineIndex,
            /* [in] */ VARIANT pointArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLeaderLineVertices( 
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ VARIANT *pointArray) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContentType( 
            /* [in] */ GcMLeaderContentType Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContentType( 
            /* [retval][out] */ GcMLeaderContentType *Type) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLeaderIndex( 
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ int *leaderIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLeaderLineIndexes( 
            /* [in] */ int leaderIndex,
            /* [retval][out] */ VARIANT *leaderLineIndexes) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetVertexCount( 
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ int *number) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrameDisplay( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextFrameDisplay( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDoglegDirection( 
            /* [in] */ int leaderIndex,
            /* [retval][out] */ VARIANT *dirVec) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetDoglegDirection( 
            /* [in] */ int leaderIndex,
            /* [in] */ VARIANT dirVec) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetBlockAttributeValue( 
            /* [in] */ LONG_PTR attdefId,
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetBlockAttributeValue( 
            /* [in] */ LONG_PTR attdefId,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetBlockAttributeValue32( 
            /* [in] */ long attdefId,
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetBlockAttributeValue32( 
            /* [in] */ long attdefId,
            /* [in] */ BSTR Value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadMLeaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadMLeader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadMLeader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadMLeader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadMLeader * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadMLeader * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadMLeader * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadMLeader * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadMLeader * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadMLeader * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadMLeader * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadMLeader * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadMLeader * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadMLeader * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadMLeader * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadMLeader * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadMLeader * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadMLeader * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadMLeader * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadMLeader * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadMLeader * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadMLeader * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadMLeader * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadMLeader * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadMLeader * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadMLeader * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadMLeader * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadMLeader * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadMLeader * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadMLeader * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadMLeader * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadMLeader * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadMLeader * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadMLeader * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadMLeader * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *scale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )( 
            IGcadMLeader * This,
            /* [in] */ double scale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcMLeaderType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderType )( 
            IGcadMLeader * This,
            /* [in] */ GcMLeaderType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLineColor )( 
            IGcadMLeader * This,
            /* [retval][out] */ IGcadAcCmColor **Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLineColor )( 
            IGcadMLeader * This,
            /* [in] */ IGcadAcCmColor *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLinetype )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_LTYPE *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLinetype )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_LTYPE Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLineWeight )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeaderLineWeight )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcDimArrowheadType *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )( 
            IGcadMLeader * This,
            /* [in] */ GcDimArrowheadType BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *size);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )( 
            IGcadMLeader * This,
            /* [in] */ double size);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DogLegged )( 
            IGcadMLeader * This,
            /* [retval][out] */ VARIANT_BOOL *val);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DogLegged )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT_BOOL val);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoglegLength )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *DoglegLength);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoglegLength )( 
            IGcadMLeader * This,
            /* [in] */ double DoglegLength);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContentBlockName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContentBlockName )( 
            IGcadMLeader * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockConnectionType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcBlockConnectionType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockConnectionType )( 
            IGcadMLeader * This,
            /* [in] */ GcBlockConnectionType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlockScale )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_NOUNITS *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlockScale )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_NOUNITS factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextString )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *bstrText);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextString )( 
            IGcadMLeader * This,
            /* [in] */ BSTR bstrText);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyleName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *bstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextStyleName )( 
            IGcadMLeader * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextJustify )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcAttachmentPoint *attPoint);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextJustify )( 
            IGcadMLeader * This,
            /* [in] */ GcAttachmentPoint attPoint);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDirection )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcDrawingDirection *drawDir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextDirection )( 
            IGcadMLeader * This,
            /* [in] */ GcDrawingDirection drawDir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextWidth )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *Width);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextWidth )( 
            IGcadMLeader * This,
            /* [in] */ double Width);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextHeight )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *Height);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextHeight )( 
            IGcadMLeader * This,
            /* [in] */ double Height);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRotation )( 
            IGcadMLeader * This,
            /* [retval][out] */ GCAD_ANGLE *rotAngle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRotation )( 
            IGcadMLeader * This,
            /* [in] */ GCAD_ANGLE rotAngle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingFactor )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *factor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingFactor )( 
            IGcadMLeader * This,
            /* [in] */ double factor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingDistance )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingDistance )( 
            IGcadMLeader * This,
            /* [in] */ double Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingStyle )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcLineSpacingStyle *style);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingStyle )( 
            IGcadMLeader * This,
            /* [in] */ GcLineSpacingStyle style);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextBackgroundFill )( 
            IGcadMLeader * This,
            /* [retval][out] */ VARIANT_BOOL *bUseBackgroundFill);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextBackgroundFill )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT_BOOL bUseBackgroundFill);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextAttachmentDirection )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcTextAttachmentDirection *dir);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextAttachmentDirection )( 
            IGcadMLeader * This,
            /* [in] */ GcTextAttachmentDirection dir);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLeftAttachmentType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLeftAttachmentType )( 
            IGcadMLeader * This,
            /* [in] */ GcTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRightAttachmentType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRightAttachmentType )( 
            IGcadMLeader * This,
            /* [in] */ GcTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextTopAttachmentType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcVerticalTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextTopAttachmentType )( 
            IGcadMLeader * This,
            /* [in] */ GcVerticalTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextBottomAttachmentType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcVerticalTextAttachmentType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextBottomAttachmentType )( 
            IGcadMLeader * This,
            /* [in] */ GcVerticalTextAttachmentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LandingGap )( 
            IGcadMLeader * This,
            /* [retval][out] */ double *gap);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LandingGap )( 
            IGcadMLeader * This,
            /* [in] */ double gap);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *BlockName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )( 
            IGcadMLeader * This,
            /* [in] */ BSTR BlockName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContentBlockType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcPredefBlockType *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContentBlockType )( 
            IGcadMLeader * This,
            /* [in] */ GcPredefBlockType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderCount )( 
            IGcadMLeader * This,
            /* [retval][out] */ int *number);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeader )( 
            IGcadMLeader * This,
            /* [retval][out] */ int *leaderIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveLeader )( 
            IGcadMLeader * This,
            /* [in] */ int leaderIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeaderLine )( 
            IGcadMLeader * This,
            /* [in] */ int leaderIndex,
            /* [in] */ VARIANT pointArray,
            /* [retval][out] */ int *leaderLineIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddLeaderLineEx )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT pointArray,
            /* [retval][out] */ int *leaderLineIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveLeaderLine )( 
            IGcadMLeader * This,
            /* [in] */ int leaderLineIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetLeaderLineVertices )( 
            IGcadMLeader * This,
            /* [in] */ int leaderLineIndex,
            /* [in] */ VARIANT pointArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLeaderLineVertices )( 
            IGcadMLeader * This,
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ VARIANT *pointArray);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContentType )( 
            IGcadMLeader * This,
            /* [in] */ GcMLeaderContentType Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContentType )( 
            IGcadMLeader * This,
            /* [retval][out] */ GcMLeaderContentType *Type);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLeaderIndex )( 
            IGcadMLeader * This,
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ int *leaderIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLeaderLineIndexes )( 
            IGcadMLeader * This,
            /* [in] */ int leaderIndex,
            /* [retval][out] */ VARIANT *leaderLineIndexes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetVertexCount )( 
            IGcadMLeader * This,
            /* [in] */ int leaderLineIndex,
            /* [retval][out] */ int *number);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrameDisplay )( 
            IGcadMLeader * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextFrameDisplay )( 
            IGcadMLeader * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            IGcadMLeader * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleName )( 
            IGcadMLeader * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDoglegDirection )( 
            IGcadMLeader * This,
            /* [in] */ int leaderIndex,
            /* [retval][out] */ VARIANT *dirVec);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDoglegDirection )( 
            IGcadMLeader * This,
            /* [in] */ int leaderIndex,
            /* [in] */ VARIANT dirVec);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue )( 
            IGcadMLeader * This,
            /* [in] */ LONG_PTR attdefId,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue )( 
            IGcadMLeader * This,
            /* [in] */ LONG_PTR attdefId,
            /* [in] */ BSTR Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue32 )( 
            IGcadMLeader * This,
            /* [in] */ long attdefId,
            /* [retval][out] */ BSTR *Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue32 )( 
            IGcadMLeader * This,
            /* [in] */ long attdefId,
            /* [in] */ BSTR Value);
        
        END_INTERFACE
    } IGcadMLeaderVtbl;

    interface IGcadMLeader
    {
        CONST_VTBL struct IGcadMLeaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadMLeader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadMLeader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadMLeader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadMLeader_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadMLeader_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadMLeader_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadMLeader_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadMLeader_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadMLeader_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadMLeader_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadMLeader_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadMLeader_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadMLeader_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadMLeader_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadMLeader_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadMLeader_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadMLeader_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadMLeader_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadMLeader_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadMLeader_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadMLeader_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadMLeader_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadMLeader_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadMLeader_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadMLeader_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadMLeader_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadMLeader_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadMLeader_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadMLeader_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadMLeader_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadMLeader_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadMLeader_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadMLeader_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadMLeader_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadMLeader_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadMLeader_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadMLeader_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadMLeader_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadMLeader_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadMLeader_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadMLeader_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadMLeader_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadMLeader_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadMLeader_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadMLeader_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadMLeader_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadMLeader_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadMLeader_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadMLeader_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadMLeader_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadMLeader_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadMLeader_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadMLeader_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadMLeader_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadMLeader_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadMLeader_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadMLeader_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadMLeader_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadMLeader_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadMLeader_get_ScaleFactor(This,scale)	\
    ( (This)->lpVtbl -> get_ScaleFactor(This,scale) ) 

#define IGcadMLeader_put_ScaleFactor(This,scale)	\
    ( (This)->lpVtbl -> put_ScaleFactor(This,scale) ) 

#define IGcadMLeader_get_LeaderType(This,Type)	\
    ( (This)->lpVtbl -> get_LeaderType(This,Type) ) 

#define IGcadMLeader_put_LeaderType(This,Type)	\
    ( (This)->lpVtbl -> put_LeaderType(This,Type) ) 

#define IGcadMLeader_get_LeaderLineColor(This,Type)	\
    ( (This)->lpVtbl -> get_LeaderLineColor(This,Type) ) 

#define IGcadMLeader_put_LeaderLineColor(This,Type)	\
    ( (This)->lpVtbl -> put_LeaderLineColor(This,Type) ) 

#define IGcadMLeader_get_LeaderLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_LeaderLinetype(This,Linetype) ) 

#define IGcadMLeader_put_LeaderLinetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_LeaderLinetype(This,Linetype) ) 

#define IGcadMLeader_get_LeaderLineWeight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_LeaderLineWeight(This,Lineweight) ) 

#define IGcadMLeader_put_LeaderLineWeight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_LeaderLineWeight(This,Lineweight) ) 

#define IGcadMLeader_get_ArrowheadType(This,BlockName)	\
    ( (This)->lpVtbl -> get_ArrowheadType(This,BlockName) ) 

#define IGcadMLeader_put_ArrowheadType(This,BlockName)	\
    ( (This)->lpVtbl -> put_ArrowheadType(This,BlockName) ) 

#define IGcadMLeader_get_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> get_ArrowheadSize(This,size) ) 

#define IGcadMLeader_put_ArrowheadSize(This,size)	\
    ( (This)->lpVtbl -> put_ArrowheadSize(This,size) ) 

#define IGcadMLeader_get_DogLegged(This,val)	\
    ( (This)->lpVtbl -> get_DogLegged(This,val) ) 

#define IGcadMLeader_put_DogLegged(This,val)	\
    ( (This)->lpVtbl -> put_DogLegged(This,val) ) 

#define IGcadMLeader_get_DoglegLength(This,DoglegLength)	\
    ( (This)->lpVtbl -> get_DoglegLength(This,DoglegLength) ) 

#define IGcadMLeader_put_DoglegLength(This,DoglegLength)	\
    ( (This)->lpVtbl -> put_DoglegLength(This,DoglegLength) ) 

#define IGcadMLeader_get_ContentBlockName(This,BlockName)	\
    ( (This)->lpVtbl -> get_ContentBlockName(This,BlockName) ) 

#define IGcadMLeader_put_ContentBlockName(This,BlockName)	\
    ( (This)->lpVtbl -> put_ContentBlockName(This,BlockName) ) 

#define IGcadMLeader_get_BlockConnectionType(This,Type)	\
    ( (This)->lpVtbl -> get_BlockConnectionType(This,Type) ) 

#define IGcadMLeader_put_BlockConnectionType(This,Type)	\
    ( (This)->lpVtbl -> put_BlockConnectionType(This,Type) ) 

#define IGcadMLeader_get_BlockScale(This,factor)	\
    ( (This)->lpVtbl -> get_BlockScale(This,factor) ) 

#define IGcadMLeader_put_BlockScale(This,factor)	\
    ( (This)->lpVtbl -> put_BlockScale(This,factor) ) 

#define IGcadMLeader_get_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> get_TextString(This,bstrText) ) 

#define IGcadMLeader_put_TextString(This,bstrText)	\
    ( (This)->lpVtbl -> put_TextString(This,bstrText) ) 

#define IGcadMLeader_get_TextStyleName(This,bstrName)	\
    ( (This)->lpVtbl -> get_TextStyleName(This,bstrName) ) 

#define IGcadMLeader_put_TextStyleName(This,bstrName)	\
    ( (This)->lpVtbl -> put_TextStyleName(This,bstrName) ) 

#define IGcadMLeader_get_TextJustify(This,attPoint)	\
    ( (This)->lpVtbl -> get_TextJustify(This,attPoint) ) 

#define IGcadMLeader_put_TextJustify(This,attPoint)	\
    ( (This)->lpVtbl -> put_TextJustify(This,attPoint) ) 

#define IGcadMLeader_get_TextDirection(This,drawDir)	\
    ( (This)->lpVtbl -> get_TextDirection(This,drawDir) ) 

#define IGcadMLeader_put_TextDirection(This,drawDir)	\
    ( (This)->lpVtbl -> put_TextDirection(This,drawDir) ) 

#define IGcadMLeader_get_TextWidth(This,Width)	\
    ( (This)->lpVtbl -> get_TextWidth(This,Width) ) 

#define IGcadMLeader_put_TextWidth(This,Width)	\
    ( (This)->lpVtbl -> put_TextWidth(This,Width) ) 

#define IGcadMLeader_get_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> get_TextHeight(This,Height) ) 

#define IGcadMLeader_put_TextHeight(This,Height)	\
    ( (This)->lpVtbl -> put_TextHeight(This,Height) ) 

#define IGcadMLeader_get_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> get_TextRotation(This,rotAngle) ) 

#define IGcadMLeader_put_TextRotation(This,rotAngle)	\
    ( (This)->lpVtbl -> put_TextRotation(This,rotAngle) ) 

#define IGcadMLeader_get_TextLineSpacingFactor(This,factor)	\
    ( (This)->lpVtbl -> get_TextLineSpacingFactor(This,factor) ) 

#define IGcadMLeader_put_TextLineSpacingFactor(This,factor)	\
    ( (This)->lpVtbl -> put_TextLineSpacingFactor(This,factor) ) 

#define IGcadMLeader_get_TextLineSpacingDistance(This,Value)	\
    ( (This)->lpVtbl -> get_TextLineSpacingDistance(This,Value) ) 

#define IGcadMLeader_put_TextLineSpacingDistance(This,Value)	\
    ( (This)->lpVtbl -> put_TextLineSpacingDistance(This,Value) ) 

#define IGcadMLeader_get_TextLineSpacingStyle(This,style)	\
    ( (This)->lpVtbl -> get_TextLineSpacingStyle(This,style) ) 

#define IGcadMLeader_put_TextLineSpacingStyle(This,style)	\
    ( (This)->lpVtbl -> put_TextLineSpacingStyle(This,style) ) 

#define IGcadMLeader_get_TextBackgroundFill(This,bUseBackgroundFill)	\
    ( (This)->lpVtbl -> get_TextBackgroundFill(This,bUseBackgroundFill) ) 

#define IGcadMLeader_put_TextBackgroundFill(This,bUseBackgroundFill)	\
    ( (This)->lpVtbl -> put_TextBackgroundFill(This,bUseBackgroundFill) ) 

#define IGcadMLeader_get_TextAttachmentDirection(This,dir)	\
    ( (This)->lpVtbl -> get_TextAttachmentDirection(This,dir) ) 

#define IGcadMLeader_put_TextAttachmentDirection(This,dir)	\
    ( (This)->lpVtbl -> put_TextAttachmentDirection(This,dir) ) 

#define IGcadMLeader_get_TextLeftAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextLeftAttachmentType(This,Type) ) 

#define IGcadMLeader_put_TextLeftAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextLeftAttachmentType(This,Type) ) 

#define IGcadMLeader_get_TextRightAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextRightAttachmentType(This,Type) ) 

#define IGcadMLeader_put_TextRightAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextRightAttachmentType(This,Type) ) 

#define IGcadMLeader_get_TextTopAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextTopAttachmentType(This,Type) ) 

#define IGcadMLeader_put_TextTopAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextTopAttachmentType(This,Type) ) 

#define IGcadMLeader_get_TextBottomAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> get_TextBottomAttachmentType(This,Type) ) 

#define IGcadMLeader_put_TextBottomAttachmentType(This,Type)	\
    ( (This)->lpVtbl -> put_TextBottomAttachmentType(This,Type) ) 

#define IGcadMLeader_get_LandingGap(This,gap)	\
    ( (This)->lpVtbl -> get_LandingGap(This,gap) ) 

#define IGcadMLeader_put_LandingGap(This,gap)	\
    ( (This)->lpVtbl -> put_LandingGap(This,gap) ) 

#define IGcadMLeader_get_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> get_ArrowheadBlock(This,BlockName) ) 

#define IGcadMLeader_put_ArrowheadBlock(This,BlockName)	\
    ( (This)->lpVtbl -> put_ArrowheadBlock(This,BlockName) ) 

#define IGcadMLeader_get_ContentBlockType(This,Type)	\
    ( (This)->lpVtbl -> get_ContentBlockType(This,Type) ) 

#define IGcadMLeader_put_ContentBlockType(This,Type)	\
    ( (This)->lpVtbl -> put_ContentBlockType(This,Type) ) 

#define IGcadMLeader_get_LeaderCount(This,number)	\
    ( (This)->lpVtbl -> get_LeaderCount(This,number) ) 

#define IGcadMLeader_AddLeader(This,leaderIndex)	\
    ( (This)->lpVtbl -> AddLeader(This,leaderIndex) ) 

#define IGcadMLeader_RemoveLeader(This,leaderIndex)	\
    ( (This)->lpVtbl -> RemoveLeader(This,leaderIndex) ) 

#define IGcadMLeader_AddLeaderLine(This,leaderIndex,pointArray,leaderLineIndex)	\
    ( (This)->lpVtbl -> AddLeaderLine(This,leaderIndex,pointArray,leaderLineIndex) ) 

#define IGcadMLeader_AddLeaderLineEx(This,pointArray,leaderLineIndex)	\
    ( (This)->lpVtbl -> AddLeaderLineEx(This,pointArray,leaderLineIndex) ) 

#define IGcadMLeader_RemoveLeaderLine(This,leaderLineIndex)	\
    ( (This)->lpVtbl -> RemoveLeaderLine(This,leaderLineIndex) ) 

#define IGcadMLeader_SetLeaderLineVertices(This,leaderLineIndex,pointArray)	\
    ( (This)->lpVtbl -> SetLeaderLineVertices(This,leaderLineIndex,pointArray) ) 

#define IGcadMLeader_GetLeaderLineVertices(This,leaderLineIndex,pointArray)	\
    ( (This)->lpVtbl -> GetLeaderLineVertices(This,leaderLineIndex,pointArray) ) 

#define IGcadMLeader_put_ContentType(This,Type)	\
    ( (This)->lpVtbl -> put_ContentType(This,Type) ) 

#define IGcadMLeader_get_ContentType(This,Type)	\
    ( (This)->lpVtbl -> get_ContentType(This,Type) ) 

#define IGcadMLeader_GetLeaderIndex(This,leaderLineIndex,leaderIndex)	\
    ( (This)->lpVtbl -> GetLeaderIndex(This,leaderLineIndex,leaderIndex) ) 

#define IGcadMLeader_GetLeaderLineIndexes(This,leaderIndex,leaderLineIndexes)	\
    ( (This)->lpVtbl -> GetLeaderLineIndexes(This,leaderIndex,leaderLineIndexes) ) 

#define IGcadMLeader_GetVertexCount(This,leaderLineIndex,number)	\
    ( (This)->lpVtbl -> GetVertexCount(This,leaderLineIndex,number) ) 

#define IGcadMLeader_get_TextFrameDisplay(This,pVal)	\
    ( (This)->lpVtbl -> get_TextFrameDisplay(This,pVal) ) 

#define IGcadMLeader_put_TextFrameDisplay(This,pVal)	\
    ( (This)->lpVtbl -> put_TextFrameDisplay(This,pVal) ) 

#define IGcadMLeader_get_StyleName(This,Name)	\
    ( (This)->lpVtbl -> get_StyleName(This,Name) ) 

#define IGcadMLeader_put_StyleName(This,Name)	\
    ( (This)->lpVtbl -> put_StyleName(This,Name) ) 

#define IGcadMLeader_GetDoglegDirection(This,leaderIndex,dirVec)	\
    ( (This)->lpVtbl -> GetDoglegDirection(This,leaderIndex,dirVec) ) 

#define IGcadMLeader_SetDoglegDirection(This,leaderIndex,dirVec)	\
    ( (This)->lpVtbl -> SetDoglegDirection(This,leaderIndex,dirVec) ) 

#define IGcadMLeader_GetBlockAttributeValue(This,attdefId,Value)	\
    ( (This)->lpVtbl -> GetBlockAttributeValue(This,attdefId,Value) ) 

#define IGcadMLeader_SetBlockAttributeValue(This,attdefId,Value)	\
    ( (This)->lpVtbl -> SetBlockAttributeValue(This,attdefId,Value) ) 

#define IGcadMLeader_GetBlockAttributeValue32(This,attdefId,Value)	\
    ( (This)->lpVtbl -> GetBlockAttributeValue32(This,attdefId,Value) ) 

#define IGcadMLeader_SetBlockAttributeValue32(This,attdefId,Value)	\
    ( (This)->lpVtbl -> SetBlockAttributeValue32(This,attdefId,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetLeaderLineVertices_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderLineIndex,
    /* [retval][out] */ VARIANT *pointArray);


void __RPC_STUB IGcadMLeader_GetLeaderLineVertices_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_put_ContentType_Proxy( 
    IGcadMLeader * This,
    /* [in] */ GcMLeaderContentType Type);


void __RPC_STUB IGcadMLeader_put_ContentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_get_ContentType_Proxy( 
    IGcadMLeader * This,
    /* [retval][out] */ GcMLeaderContentType *Type);


void __RPC_STUB IGcadMLeader_get_ContentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetLeaderIndex_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderLineIndex,
    /* [retval][out] */ int *leaderIndex);


void __RPC_STUB IGcadMLeader_GetLeaderIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetLeaderLineIndexes_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderIndex,
    /* [retval][out] */ VARIANT *leaderLineIndexes);


void __RPC_STUB IGcadMLeader_GetLeaderLineIndexes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetVertexCount_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderLineIndex,
    /* [retval][out] */ int *number);


void __RPC_STUB IGcadMLeader_GetVertexCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_get_TextFrameDisplay_Proxy( 
    IGcadMLeader * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB IGcadMLeader_get_TextFrameDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_put_TextFrameDisplay_Proxy( 
    IGcadMLeader * This,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB IGcadMLeader_put_TextFrameDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_get_StyleName_Proxy( 
    IGcadMLeader * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB IGcadMLeader_get_StyleName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_put_StyleName_Proxy( 
    IGcadMLeader * This,
    /* [in] */ BSTR Name);


void __RPC_STUB IGcadMLeader_put_StyleName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetDoglegDirection_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderIndex,
    /* [retval][out] */ VARIANT *dirVec);


void __RPC_STUB IGcadMLeader_GetDoglegDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_SetDoglegDirection_Proxy( 
    IGcadMLeader * This,
    /* [in] */ int leaderIndex,
    /* [in] */ VARIANT dirVec);


void __RPC_STUB IGcadMLeader_SetDoglegDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetBlockAttributeValue_Proxy( 
    IGcadMLeader * This,
    /* [in] */ LONG_PTR attdefId,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadMLeader_GetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_SetBlockAttributeValue_Proxy( 
    IGcadMLeader * This,
    /* [in] */ LONG_PTR attdefId,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadMLeader_SetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_GetBlockAttributeValue32_Proxy( 
    IGcadMLeader * This,
    /* [in] */ long attdefId,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IGcadMLeader_GetBlockAttributeValue32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IGcadMLeader_SetBlockAttributeValue32_Proxy( 
    IGcadMLeader * This,
    /* [in] */ long attdefId,
    /* [in] */ BSTR Value);


void __RPC_STUB IGcadMLeader_SetBlockAttributeValue32_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadMLeader_INTERFACE_DEFINED__ */


#ifndef __IGcadSubDMesh_INTERFACE_DEFINED__
#define __IGcadSubDMesh_INTERFACE_DEFINED__

/* interface IGcadSubDMesh */
/* [object][unique][oleautomation][dual][helpstring][uuid] */ 


EXTERN_C const IID IID_IGcadSubDMesh;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8C885B40-5BFE-4F71-BF41-AB8280A1B361")
    IGcadSubDMesh : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Smoothness( 
            /* [retval][out] */ int *level) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Smoothness( 
            /* [in] */ int level) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ VARIANT *corners) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinates( 
            /* [in] */ VARIANT corners) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coordinate( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Coordinate( 
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_VertexCount( 
            /* [retval][out] */ int *Count) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FaceCount( 
            /* [retval][out] */ int *Count) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadSubDMeshVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadSubDMesh * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadSubDMesh * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadSubDMesh * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadSubDMesh * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadSubDMesh * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadSubDMesh * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadSubDMesh * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadSubDMesh * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadSubDMesh * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadSubDMesh * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadSubDMesh * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadSubDMesh * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadSubDMesh * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadSubDMesh * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadSubDMesh * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadSubDMesh * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadSubDMesh * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadSubDMesh * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadSubDMesh * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Smoothness )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ int *level);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Smoothness )( 
            IGcadSubDMesh * This,
            /* [in] */ int level);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ VARIANT *corners);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IGcadSubDMesh * This,
            /* [in] */ VARIANT corners);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IGcadSubDMesh * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IGcadSubDMesh * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VertexCount )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ int *Count);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FaceCount )( 
            IGcadSubDMesh * This,
            /* [retval][out] */ int *Count);
        
        END_INTERFACE
    } IGcadSubDMeshVtbl;

    interface IGcadSubDMesh
    {
        CONST_VTBL struct IGcadSubDMeshVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadSubDMesh_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadSubDMesh_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadSubDMesh_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadSubDMesh_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadSubDMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadSubDMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadSubDMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadSubDMesh_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadSubDMesh_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadSubDMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadSubDMesh_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadSubDMesh_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadSubDMesh_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadSubDMesh_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadSubDMesh_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadSubDMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadSubDMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadSubDMesh_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadSubDMesh_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadSubDMesh_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadSubDMesh_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadSubDMesh_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadSubDMesh_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadSubDMesh_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadSubDMesh_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadSubDMesh_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadSubDMesh_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadSubDMesh_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadSubDMesh_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadSubDMesh_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadSubDMesh_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadSubDMesh_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadSubDMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadSubDMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadSubDMesh_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadSubDMesh_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadSubDMesh_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadSubDMesh_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadSubDMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadSubDMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadSubDMesh_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadSubDMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadSubDMesh_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadSubDMesh_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadSubDMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadSubDMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadSubDMesh_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadSubDMesh_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadSubDMesh_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadSubDMesh_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadSubDMesh_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadSubDMesh_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadSubDMesh_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadSubDMesh_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadSubDMesh_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadSubDMesh_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadSubDMesh_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadSubDMesh_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadSubDMesh_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadSubDMesh_get_Smoothness(This,level)	\
    ( (This)->lpVtbl -> get_Smoothness(This,level) ) 

#define IGcadSubDMesh_put_Smoothness(This,level)	\
    ( (This)->lpVtbl -> put_Smoothness(This,level) ) 

#define IGcadSubDMesh_get_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> get_Coordinates(This,corners) ) 

#define IGcadSubDMesh_put_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> put_Coordinates(This,corners) ) 

#define IGcadSubDMesh_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IGcadSubDMesh_put_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,pVal) ) 

#define IGcadSubDMesh_get_VertexCount(This,Count)	\
    ( (This)->lpVtbl -> get_VertexCount(This,Count) ) 

#define IGcadSubDMesh_get_FaceCount(This,Count)	\
    ( (This)->lpVtbl -> get_FaceCount(This,Count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadSubDMesh_INTERFACE_DEFINED__ */


#ifndef __IGcadCamera_INTERFACE_DEFINED__
#define __IGcadCamera_INTERFACE_DEFINED__

/* interface IGcadCamera */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IGcadCamera;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F1837BAD-436C-4FFF-AC4B-7DA34F2A6D3F")
    IGcadCamera : public IGcadEntity
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LensLength( 
            /* [retval][out] */ GCAD_NOUNITS *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LensLength( 
            /* [in] */ GCAD_NOUNITS pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldOfView( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FieldOfView( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameHeight( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameHeight( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameWidth( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameWidth( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_RollAngle( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_RollAngle( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPlotable( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IsPlotable( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FrontPlane( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FrontPlane( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_BackPlane( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_BackPlane( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Clipping( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Clipping( 
            /* [in] */ BSTR pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadCameraVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadCamera * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadCamera * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadCamera * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadCamera * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadCamera * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadCamera * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadCamera * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadCamera * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadCamera * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadCamera * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadCamera * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadCamera * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadCamera * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadCamera * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadCamera * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadCamera * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadCamera * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadCamera * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadCamera * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadCamera * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadCamera * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadCamera * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadCamera * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadCamera * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadCamera * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadCamera * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadCamera * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadCamera * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadCamera * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadCamera * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadCamera * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadCamera * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadCamera * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadCamera * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadCamera * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadCamera * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadCamera * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadCamera * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadCamera * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadCamera * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadCamera * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadCamera * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadCamera * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadCamera * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadCamera * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadCamera * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadCamera * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadCamera * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadCamera * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            IGcadCamera * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            IGcadCamera * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadCamera * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadCamera * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LensLength )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_NOUNITS *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LensLength )( 
            IGcadCamera * This,
            /* [in] */ GCAD_NOUNITS pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldOfView )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FieldOfView )( 
            IGcadCamera * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameHeight )( 
            IGcadCamera * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameHeight )( 
            IGcadCamera * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameWidth )( 
            IGcadCamera * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameWidth )( 
            IGcadCamera * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RollAngle )( 
            IGcadCamera * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RollAngle )( 
            IGcadCamera * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPlotable )( 
            IGcadCamera * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsPlotable )( 
            IGcadCamera * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrontPlane )( 
            IGcadCamera * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrontPlane )( 
            IGcadCamera * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackPlane )( 
            IGcadCamera * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackPlane )( 
            IGcadCamera * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Clipping )( 
            IGcadCamera * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Clipping )( 
            IGcadCamera * This,
            /* [in] */ BSTR pVal);
        
        END_INTERFACE
    } IGcadCameraVtbl;

    interface IGcadCamera
    {
        CONST_VTBL struct IGcadCameraVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadCamera_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadCamera_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadCamera_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadCamera_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadCamera_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadCamera_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadCamera_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadCamera_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadCamera_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadCamera_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadCamera_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadCamera_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadCamera_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadCamera_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadCamera_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadCamera_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadCamera_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadCamera_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadCamera_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadCamera_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadCamera_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadCamera_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadCamera_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadCamera_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadCamera_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadCamera_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadCamera_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadCamera_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadCamera_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadCamera_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadCamera_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadCamera_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadCamera_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadCamera_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadCamera_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadCamera_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadCamera_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadCamera_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadCamera_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadCamera_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadCamera_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadCamera_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadCamera_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadCamera_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadCamera_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadCamera_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadCamera_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadCamera_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadCamera_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadCamera_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadCamera_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadCamera_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadCamera_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadCamera_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadCamera_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadCamera_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadCamera_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadCamera_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadCamera_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadCamera_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadCamera_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadCamera_get_Location(This,pVal)	\
    ( (This)->lpVtbl -> get_Location(This,pVal) ) 

#define IGcadCamera_put_Location(This,pVal)	\
    ( (This)->lpVtbl -> put_Location(This,pVal) ) 

#define IGcadCamera_get_Target(This,pVal)	\
    ( (This)->lpVtbl -> get_Target(This,pVal) ) 

#define IGcadCamera_put_Target(This,pVal)	\
    ( (This)->lpVtbl -> put_Target(This,pVal) ) 

#define IGcadCamera_get_LensLength(This,pVal)	\
    ( (This)->lpVtbl -> get_LensLength(This,pVal) ) 

#define IGcadCamera_put_LensLength(This,pVal)	\
    ( (This)->lpVtbl -> put_LensLength(This,pVal) ) 

#define IGcadCamera_get_FieldOfView(This,pVal)	\
    ( (This)->lpVtbl -> get_FieldOfView(This,pVal) ) 

#define IGcadCamera_put_FieldOfView(This,pVal)	\
    ( (This)->lpVtbl -> put_FieldOfView(This,pVal) ) 

#define IGcadCamera_get_FrameHeight(This,pVal)	\
    ( (This)->lpVtbl -> get_FrameHeight(This,pVal) ) 

#define IGcadCamera_put_FrameHeight(This,pVal)	\
    ( (This)->lpVtbl -> put_FrameHeight(This,pVal) ) 

#define IGcadCamera_get_FrameWidth(This,pVal)	\
    ( (This)->lpVtbl -> get_FrameWidth(This,pVal) ) 

#define IGcadCamera_put_FrameWidth(This,pVal)	\
    ( (This)->lpVtbl -> put_FrameWidth(This,pVal) ) 

#define IGcadCamera_get_RollAngle(This,pVal)	\
    ( (This)->lpVtbl -> get_RollAngle(This,pVal) ) 

#define IGcadCamera_put_RollAngle(This,pVal)	\
    ( (This)->lpVtbl -> put_RollAngle(This,pVal) ) 

#define IGcadCamera_get_IsPlotable(This,pVal)	\
    ( (This)->lpVtbl -> get_IsPlotable(This,pVal) ) 

#define IGcadCamera_put_IsPlotable(This,pVal)	\
    ( (This)->lpVtbl -> put_IsPlotable(This,pVal) ) 

#define IGcadCamera_get_FrontPlane(This,pVal)	\
    ( (This)->lpVtbl -> get_FrontPlane(This,pVal) ) 

#define IGcadCamera_put_FrontPlane(This,pVal)	\
    ( (This)->lpVtbl -> put_FrontPlane(This,pVal) ) 

#define IGcadCamera_get_BackPlane(This,pVal)	\
    ( (This)->lpVtbl -> get_BackPlane(This,pVal) ) 

#define IGcadCamera_put_BackPlane(This,pVal)	\
    ( (This)->lpVtbl -> put_BackPlane(This,pVal) ) 

#define IGcadCamera_get_Clipping(This,pVal)	\
    ( (This)->lpVtbl -> get_Clipping(This,pVal) ) 

#define IGcadCamera_put_Clipping(This,pVal)	\
    ( (This)->lpVtbl -> put_Clipping(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadCamera_INTERFACE_DEFINED__ */


#ifndef __IGcadLight_INTERFACE_DEFINED__
#define __IGcadLight_INTERFACE_DEFINED__

/* interface IGcadLight */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IGcadLight;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A76DA9B-B679-4506-BB20-5793E5AB2ADA")
    IGcadLight : public IGcadEntity
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LightType( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LightType( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadows( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadows( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HotSpot( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HotSpot( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FallOff( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FallOff( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Intensity( 
            /* [retval][out] */ GCAD_NOUNITS *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Intensity( 
            /* [in] */ GCAD_NOUNITS pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LColor( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LColor( 
            /* [in] */ IGcadAcCmColor *ppColor) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotGlyph( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotGlyph( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AttenuationType( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AttenuationType( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UseLimits( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UseLimits( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_StartLimit( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_StartLimit( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EndLimit( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EndLimit( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowType( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowType( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MapSize( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_MapSize( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Softness( 
            /* [retval][out] */ int *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Softness( 
            /* [in] */ int pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FromVector( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FromVector( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ToVector( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ToVector( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceVectorX( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceVectorX( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceVectorY( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceVectorY( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceVectorZ( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceVectorZ( 
            /* [in] */ double pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLightVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLight * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLight * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLight * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLight * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLight * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLight * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLight * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLight * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLight * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLight * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLight * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLight * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLight * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLight * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLight * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLight * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLight * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLight * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLight * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLight * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLight * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLight * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLight * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLight * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLight * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLight * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLight * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLight * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLight * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLight * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLight * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLight * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLight * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLight * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLight * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLight * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLight * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLight * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLight * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLight * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLight * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLight * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLight * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLight * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLight * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LightType )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LightType )( 
            IGcadLight * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadows )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadows )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HotSpot )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HotSpot )( 
            IGcadLight * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FallOff )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FallOff )( 
            IGcadLight * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Intensity )( 
            IGcadLight * This,
            /* [retval][out] */ GCAD_NOUNITS *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Intensity )( 
            IGcadLight * This,
            /* [in] */ GCAD_NOUNITS pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LColor )( 
            IGcadLight * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LColor )( 
            IGcadLight * This,
            /* [in] */ IGcadAcCmColor *ppColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotGlyph )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotGlyph )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadLight * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadLight * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttenuationType )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttenuationType )( 
            IGcadLight * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLimits )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLimits )( 
            IGcadLight * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartLimit )( 
            IGcadLight * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartLimit )( 
            IGcadLight * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndLimit )( 
            IGcadLight * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndLimit )( 
            IGcadLight * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowType )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowType )( 
            IGcadLight * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MapSize )( 
            IGcadLight * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MapSize )( 
            IGcadLight * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Softness )( 
            IGcadLight * This,
            /* [retval][out] */ int *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Softness )( 
            IGcadLight * This,
            /* [in] */ int pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromVector )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromVector )( 
            IGcadLight * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToVector )( 
            IGcadLight * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToVector )( 
            IGcadLight * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorX )( 
            IGcadLight * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorX )( 
            IGcadLight * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorY )( 
            IGcadLight * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorY )( 
            IGcadLight * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorZ )( 
            IGcadLight * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorZ )( 
            IGcadLight * This,
            /* [in] */ double pVal);
        
        END_INTERFACE
    } IGcadLightVtbl;

    interface IGcadLight
    {
        CONST_VTBL struct IGcadLightVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLight_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLight_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLight_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLight_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLight_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLight_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLight_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLight_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLight_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLight_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLight_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLight_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLight_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLight_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLight_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLight_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLight_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLight_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLight_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLight_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLight_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLight_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLight_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLight_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLight_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLight_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLight_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLight_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLight_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLight_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLight_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLight_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLight_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLight_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLight_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLight_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLight_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLight_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLight_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLight_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLight_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLight_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLight_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLight_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLight_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLight_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLight_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLight_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLight_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLight_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLight_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLight_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLight_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLight_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLight_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLight_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLight_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLight_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLight_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLight_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadLight_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadLight_get_LightType(This,pVal)	\
    ( (This)->lpVtbl -> get_LightType(This,pVal) ) 

#define IGcadLight_put_LightType(This,pVal)	\
    ( (This)->lpVtbl -> put_LightType(This,pVal) ) 

#define IGcadLight_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IGcadLight_put_Status(This,pVal)	\
    ( (This)->lpVtbl -> put_Status(This,pVal) ) 

#define IGcadLight_get_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> get_Shadows(This,pVal) ) 

#define IGcadLight_put_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> put_Shadows(This,pVal) ) 

#define IGcadLight_get_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> get_HotSpot(This,pVal) ) 

#define IGcadLight_put_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> put_HotSpot(This,pVal) ) 

#define IGcadLight_get_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> get_FallOff(This,pVal) ) 

#define IGcadLight_put_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> put_FallOff(This,pVal) ) 

#define IGcadLight_get_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> get_Intensity(This,pVal) ) 

#define IGcadLight_put_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> put_Intensity(This,pVal) ) 

#define IGcadLight_get_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_LColor(This,ppColor) ) 

#define IGcadLight_put_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> put_LColor(This,ppColor) ) 

#define IGcadLight_get_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> get_PlotGlyph(This,pVal) ) 

#define IGcadLight_put_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> put_PlotGlyph(This,pVal) ) 

#define IGcadLight_get_Position(This,pVal)	\
    ( (This)->lpVtbl -> get_Position(This,pVal) ) 

#define IGcadLight_put_Position(This,pVal)	\
    ( (This)->lpVtbl -> put_Position(This,pVal) ) 

#define IGcadLight_get_Target(This,pVal)	\
    ( (This)->lpVtbl -> get_Target(This,pVal) ) 

#define IGcadLight_put_Target(This,pVal)	\
    ( (This)->lpVtbl -> put_Target(This,pVal) ) 

#define IGcadLight_get_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> get_AttenuationType(This,pVal) ) 

#define IGcadLight_put_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> put_AttenuationType(This,pVal) ) 

#define IGcadLight_get_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> get_UseLimits(This,pVal) ) 

#define IGcadLight_put_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> put_UseLimits(This,pVal) ) 

#define IGcadLight_get_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_StartLimit(This,pVal) ) 

#define IGcadLight_put_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_StartLimit(This,pVal) ) 

#define IGcadLight_get_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_EndLimit(This,pVal) ) 

#define IGcadLight_put_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_EndLimit(This,pVal) ) 

#define IGcadLight_get_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowType(This,pVal) ) 

#define IGcadLight_put_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowType(This,pVal) ) 

#define IGcadLight_get_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> get_MapSize(This,pVal) ) 

#define IGcadLight_put_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> put_MapSize(This,pVal) ) 

#define IGcadLight_get_Softness(This,pVal)	\
    ( (This)->lpVtbl -> get_Softness(This,pVal) ) 

#define IGcadLight_put_Softness(This,pVal)	\
    ( (This)->lpVtbl -> put_Softness(This,pVal) ) 

#define IGcadLight_get_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> get_FromVector(This,pVal) ) 

#define IGcadLight_put_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> put_FromVector(This,pVal) ) 

#define IGcadLight_get_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> get_ToVector(This,pVal) ) 

#define IGcadLight_put_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> put_ToVector(This,pVal) ) 

#define IGcadLight_get_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorX(This,pVal) ) 

#define IGcadLight_put_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorX(This,pVal) ) 

#define IGcadLight_get_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorY(This,pVal) ) 

#define IGcadLight_put_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorY(This,pVal) ) 

#define IGcadLight_get_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorZ(This,pVal) ) 

#define IGcadLight_put_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorZ(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadLight_INTERFACE_DEFINED__ */


#ifndef __IGcadLight2_INTERFACE_DEFINED__
#define __IGcadLight2_INTERFACE_DEFINED__

/* interface IGcadLight2 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IGcadLight2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("496BDE6B-F8DE-476B-BE7D-27CBDA7AFEA0")
    IGcadLight2 : public IGcadLight
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LampIntensity( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LampIntensity( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultIntensity( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ResultIntensity( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LampColor( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_LampColor( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultColor( 
            /* [retval][out] */ IGcadAcCmColor **ppColor) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ResultColor( 
            /* [in] */ IGcadAcCmColor *ppColor) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WebFile( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WebFile( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WebPreview( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WebPreview( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WebRotateX( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WebRotateX( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WebRotateY( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WebRotateY( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WebRotateZ( 
            /* [retval][out] */ GCAD_ANGLE *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WebRotateZ( 
            /* [in] */ GCAD_ANGLE pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTarget( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasTarget( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowSamples( 
            /* [retval][out] */ long *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowSamples( 
            /* [in] */ long pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowVisible( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowVisible( 
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowShape( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowShape( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowRadius( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowRadius( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IlluminanceDistance( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IlluminanceDistance( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowLength( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowLength( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadowWidth( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadowWidth( 
            /* [in] */ double pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLight2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLight2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLight2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLight2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLight2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLight2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLight2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLight2 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLight2 * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLight2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLight2 * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLight2 * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLight2 * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLight2 * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLight2 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLight2 * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLight2 * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLight2 * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLight2 * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLight2 * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLight2 * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLight2 * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLight2 * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLight2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLight2 * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLight2 * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLight2 * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLight2 * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLight2 * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLight2 * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LightType )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LightType )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadows )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadows )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HotSpot )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HotSpot )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FallOff )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FallOff )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Intensity )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_NOUNITS *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Intensity )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_NOUNITS pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LColor )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LColor )( 
            IGcadLight2 * This,
            /* [in] */ IGcadAcCmColor *ppColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotGlyph )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotGlyph )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttenuationType )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttenuationType )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLimits )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLimits )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartLimit )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartLimit )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndLimit )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndLimit )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowType )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowType )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MapSize )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MapSize )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Softness )( 
            IGcadLight2 * This,
            /* [retval][out] */ int *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Softness )( 
            IGcadLight2 * This,
            /* [in] */ int pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromVector )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromVector )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToVector )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToVector )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorX )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorX )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorY )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorY )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorZ )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorZ )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LampIntensity )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LampIntensity )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultIntensity )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultIntensity )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LampColor )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LampColor )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultColor )( 
            IGcadLight2 * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultColor )( 
            IGcadLight2 * This,
            /* [in] */ IGcadAcCmColor *ppColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebFile )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebFile )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebPreview )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebPreview )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateX )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateX )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateY )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateY )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateZ )( 
            IGcadLight2 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateZ )( 
            IGcadLight2 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTarget )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasTarget )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowSamples )( 
            IGcadLight2 * This,
            /* [retval][out] */ long *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowSamples )( 
            IGcadLight2 * This,
            /* [in] */ long pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowVisible )( 
            IGcadLight2 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowVisible )( 
            IGcadLight2 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowShape )( 
            IGcadLight2 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowShape )( 
            IGcadLight2 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowRadius )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowRadius )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IlluminanceDistance )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IlluminanceDistance )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowLength )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowLength )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowWidth )( 
            IGcadLight2 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowWidth )( 
            IGcadLight2 * This,
            /* [in] */ double pVal);
        
        END_INTERFACE
    } IGcadLight2Vtbl;

    interface IGcadLight2
    {
        CONST_VTBL struct IGcadLight2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLight2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLight2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLight2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLight2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLight2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLight2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLight2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLight2_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLight2_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLight2_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLight2_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLight2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLight2_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLight2_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLight2_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLight2_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLight2_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLight2_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLight2_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLight2_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLight2_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLight2_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLight2_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLight2_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLight2_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLight2_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLight2_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLight2_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLight2_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLight2_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLight2_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLight2_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLight2_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLight2_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLight2_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLight2_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLight2_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLight2_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLight2_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLight2_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLight2_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLight2_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLight2_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLight2_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLight2_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLight2_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLight2_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLight2_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLight2_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLight2_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLight2_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLight2_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLight2_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLight2_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLight2_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLight2_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLight2_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLight2_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLight2_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLight2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadLight2_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadLight2_get_LightType(This,pVal)	\
    ( (This)->lpVtbl -> get_LightType(This,pVal) ) 

#define IGcadLight2_put_LightType(This,pVal)	\
    ( (This)->lpVtbl -> put_LightType(This,pVal) ) 

#define IGcadLight2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IGcadLight2_put_Status(This,pVal)	\
    ( (This)->lpVtbl -> put_Status(This,pVal) ) 

#define IGcadLight2_get_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> get_Shadows(This,pVal) ) 

#define IGcadLight2_put_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> put_Shadows(This,pVal) ) 

#define IGcadLight2_get_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> get_HotSpot(This,pVal) ) 

#define IGcadLight2_put_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> put_HotSpot(This,pVal) ) 

#define IGcadLight2_get_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> get_FallOff(This,pVal) ) 

#define IGcadLight2_put_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> put_FallOff(This,pVal) ) 

#define IGcadLight2_get_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> get_Intensity(This,pVal) ) 

#define IGcadLight2_put_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> put_Intensity(This,pVal) ) 

#define IGcadLight2_get_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_LColor(This,ppColor) ) 

#define IGcadLight2_put_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> put_LColor(This,ppColor) ) 

#define IGcadLight2_get_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> get_PlotGlyph(This,pVal) ) 

#define IGcadLight2_put_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> put_PlotGlyph(This,pVal) ) 

#define IGcadLight2_get_Position(This,pVal)	\
    ( (This)->lpVtbl -> get_Position(This,pVal) ) 

#define IGcadLight2_put_Position(This,pVal)	\
    ( (This)->lpVtbl -> put_Position(This,pVal) ) 

#define IGcadLight2_get_Target(This,pVal)	\
    ( (This)->lpVtbl -> get_Target(This,pVal) ) 

#define IGcadLight2_put_Target(This,pVal)	\
    ( (This)->lpVtbl -> put_Target(This,pVal) ) 

#define IGcadLight2_get_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> get_AttenuationType(This,pVal) ) 

#define IGcadLight2_put_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> put_AttenuationType(This,pVal) ) 

#define IGcadLight2_get_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> get_UseLimits(This,pVal) ) 

#define IGcadLight2_put_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> put_UseLimits(This,pVal) ) 

#define IGcadLight2_get_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_StartLimit(This,pVal) ) 

#define IGcadLight2_put_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_StartLimit(This,pVal) ) 

#define IGcadLight2_get_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_EndLimit(This,pVal) ) 

#define IGcadLight2_put_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_EndLimit(This,pVal) ) 

#define IGcadLight2_get_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowType(This,pVal) ) 

#define IGcadLight2_put_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowType(This,pVal) ) 

#define IGcadLight2_get_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> get_MapSize(This,pVal) ) 

#define IGcadLight2_put_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> put_MapSize(This,pVal) ) 

#define IGcadLight2_get_Softness(This,pVal)	\
    ( (This)->lpVtbl -> get_Softness(This,pVal) ) 

#define IGcadLight2_put_Softness(This,pVal)	\
    ( (This)->lpVtbl -> put_Softness(This,pVal) ) 

#define IGcadLight2_get_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> get_FromVector(This,pVal) ) 

#define IGcadLight2_put_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> put_FromVector(This,pVal) ) 

#define IGcadLight2_get_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> get_ToVector(This,pVal) ) 

#define IGcadLight2_put_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> put_ToVector(This,pVal) ) 

#define IGcadLight2_get_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorX(This,pVal) ) 

#define IGcadLight2_put_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorX(This,pVal) ) 

#define IGcadLight2_get_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorY(This,pVal) ) 

#define IGcadLight2_put_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorY(This,pVal) ) 

#define IGcadLight2_get_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorZ(This,pVal) ) 

#define IGcadLight2_put_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorZ(This,pVal) ) 


#define IGcadLight2_get_LampIntensity(This,pVal)	\
    ( (This)->lpVtbl -> get_LampIntensity(This,pVal) ) 

#define IGcadLight2_put_LampIntensity(This,pVal)	\
    ( (This)->lpVtbl -> put_LampIntensity(This,pVal) ) 

#define IGcadLight2_get_ResultIntensity(This,pVal)	\
    ( (This)->lpVtbl -> get_ResultIntensity(This,pVal) ) 

#define IGcadLight2_put_ResultIntensity(This,pVal)	\
    ( (This)->lpVtbl -> put_ResultIntensity(This,pVal) ) 

#define IGcadLight2_get_LampColor(This,pVal)	\
    ( (This)->lpVtbl -> get_LampColor(This,pVal) ) 

#define IGcadLight2_put_LampColor(This,pVal)	\
    ( (This)->lpVtbl -> put_LampColor(This,pVal) ) 

#define IGcadLight2_get_ResultColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_ResultColor(This,ppColor) ) 

#define IGcadLight2_put_ResultColor(This,ppColor)	\
    ( (This)->lpVtbl -> put_ResultColor(This,ppColor) ) 

#define IGcadLight2_get_WebFile(This,pVal)	\
    ( (This)->lpVtbl -> get_WebFile(This,pVal) ) 

#define IGcadLight2_put_WebFile(This,pVal)	\
    ( (This)->lpVtbl -> put_WebFile(This,pVal) ) 

#define IGcadLight2_get_WebPreview(This,pVal)	\
    ( (This)->lpVtbl -> get_WebPreview(This,pVal) ) 

#define IGcadLight2_put_WebPreview(This,pVal)	\
    ( (This)->lpVtbl -> put_WebPreview(This,pVal) ) 

#define IGcadLight2_get_WebRotateX(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateX(This,pVal) ) 

#define IGcadLight2_put_WebRotateX(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateX(This,pVal) ) 

#define IGcadLight2_get_WebRotateY(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateY(This,pVal) ) 

#define IGcadLight2_put_WebRotateY(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateY(This,pVal) ) 

#define IGcadLight2_get_WebRotateZ(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateZ(This,pVal) ) 

#define IGcadLight2_put_WebRotateZ(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateZ(This,pVal) ) 

#define IGcadLight2_get_HasTarget(This,pVal)	\
    ( (This)->lpVtbl -> get_HasTarget(This,pVal) ) 

#define IGcadLight2_put_HasTarget(This,pVal)	\
    ( (This)->lpVtbl -> put_HasTarget(This,pVal) ) 

#define IGcadLight2_get_ShadowSamples(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowSamples(This,pVal) ) 

#define IGcadLight2_put_ShadowSamples(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowSamples(This,pVal) ) 

#define IGcadLight2_get_ShadowVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowVisible(This,pVal) ) 

#define IGcadLight2_put_ShadowVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowVisible(This,pVal) ) 

#define IGcadLight2_get_ShadowShape(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowShape(This,pVal) ) 

#define IGcadLight2_put_ShadowShape(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowShape(This,pVal) ) 

#define IGcadLight2_get_ShadowRadius(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowRadius(This,pVal) ) 

#define IGcadLight2_put_ShadowRadius(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowRadius(This,pVal) ) 

#define IGcadLight2_get_IlluminanceDistance(This,pVal)	\
    ( (This)->lpVtbl -> get_IlluminanceDistance(This,pVal) ) 

#define IGcadLight2_put_IlluminanceDistance(This,pVal)	\
    ( (This)->lpVtbl -> put_IlluminanceDistance(This,pVal) ) 

#define IGcadLight2_get_ShadowLength(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowLength(This,pVal) ) 

#define IGcadLight2_put_ShadowLength(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowLength(This,pVal) ) 

#define IGcadLight2_get_ShadowWidth(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowWidth(This,pVal) ) 

#define IGcadLight2_put_ShadowWidth(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowWidth(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_ShadowVisible_Proxy( 
    IGcadLight2 * This,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB IGcadLight2_put_ShadowVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_get_ShadowShape_Proxy( 
    IGcadLight2 * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB IGcadLight2_get_ShadowShape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_ShadowShape_Proxy( 
    IGcadLight2 * This,
    /* [in] */ BSTR pVal);


void __RPC_STUB IGcadLight2_put_ShadowShape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_get_ShadowRadius_Proxy( 
    IGcadLight2 * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadLight2_get_ShadowRadius_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_ShadowRadius_Proxy( 
    IGcadLight2 * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadLight2_put_ShadowRadius_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_get_IlluminanceDistance_Proxy( 
    IGcadLight2 * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadLight2_get_IlluminanceDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_IlluminanceDistance_Proxy( 
    IGcadLight2 * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadLight2_put_IlluminanceDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_get_ShadowLength_Proxy( 
    IGcadLight2 * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadLight2_get_ShadowLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_ShadowLength_Proxy( 
    IGcadLight2 * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadLight2_put_ShadowLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_get_ShadowWidth_Proxy( 
    IGcadLight2 * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IGcadLight2_get_ShadowWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight2_put_ShadowWidth_Proxy( 
    IGcadLight2 * This,
    /* [in] */ double pVal);


void __RPC_STUB IGcadLight2_put_ShadowWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadLight2_INTERFACE_DEFINED__ */


#ifndef __IGcadLight3_INTERFACE_DEFINED__
#define __IGcadLight3_INTERFACE_DEFINED__

/* interface IGcadLight3 */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IGcadLight3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66FCA24F-17E7-4C6F-A32E-01BC3C40FCA8")
    IGcadLight3 : public IGcadLight2
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_GlyphDisplay( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_GlyphDisplay( 
            /* [in] */ BSTR pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadLight3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadLight3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadLight3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadLight3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadLight3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadLight3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadLight3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadLight3 * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadLight3 * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadLight3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadLight3 * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadLight3 * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadLight3 * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadLight3 * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadLight3 * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadLight3 * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadLight3 * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadLight3 * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadLight3 * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadLight3 * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadLight3 * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadLight3 * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadLight3 * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadLight3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadLight3 * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadLight3 * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadLight3 * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadLight3 * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadLight3 * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadLight3 * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LightType )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LightType )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadows )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadows )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HotSpot )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HotSpot )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FallOff )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FallOff )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Intensity )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_NOUNITS *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Intensity )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_NOUNITS pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LColor )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LColor )( 
            IGcadLight3 * This,
            /* [in] */ IGcadAcCmColor *ppColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotGlyph )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotGlyph )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttenuationType )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttenuationType )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLimits )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLimits )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartLimit )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartLimit )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndLimit )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndLimit )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowType )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowType )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MapSize )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MapSize )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Softness )( 
            IGcadLight3 * This,
            /* [retval][out] */ int *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Softness )( 
            IGcadLight3 * This,
            /* [in] */ int pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromVector )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromVector )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToVector )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToVector )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorX )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorX )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorY )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorY )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceVectorZ )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceVectorZ )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LampIntensity )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LampIntensity )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultIntensity )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultIntensity )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LampColor )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LampColor )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultColor )( 
            IGcadLight3 * This,
            /* [retval][out] */ IGcadAcCmColor **ppColor);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultColor )( 
            IGcadLight3 * This,
            /* [in] */ IGcadAcCmColor *ppColor);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebFile )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebFile )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebPreview )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebPreview )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateX )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateX )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateY )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateY )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebRotateZ )( 
            IGcadLight3 * This,
            /* [retval][out] */ GCAD_ANGLE *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WebRotateZ )( 
            IGcadLight3 * This,
            /* [in] */ GCAD_ANGLE pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTarget )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasTarget )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowSamples )( 
            IGcadLight3 * This,
            /* [retval][out] */ long *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowSamples )( 
            IGcadLight3 * This,
            /* [in] */ long pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowVisible )( 
            IGcadLight3 * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowVisible )( 
            IGcadLight3 * This,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowShape )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowShape )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowRadius )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowRadius )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IlluminanceDistance )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IlluminanceDistance )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowLength )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowLength )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowWidth )( 
            IGcadLight3 * This,
            /* [retval][out] */ double *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowWidth )( 
            IGcadLight3 * This,
            /* [in] */ double pVal);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GlyphDisplay )( 
            IGcadLight3 * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GlyphDisplay )( 
            IGcadLight3 * This,
            /* [in] */ BSTR pVal);
        
        END_INTERFACE
    } IGcadLight3Vtbl;

    interface IGcadLight3
    {
        CONST_VTBL struct IGcadLight3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadLight3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadLight3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadLight3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadLight3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadLight3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadLight3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadLight3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadLight3_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadLight3_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadLight3_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadLight3_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadLight3_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadLight3_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadLight3_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadLight3_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadLight3_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadLight3_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadLight3_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadLight3_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadLight3_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadLight3_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadLight3_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadLight3_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadLight3_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadLight3_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadLight3_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadLight3_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadLight3_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadLight3_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadLight3_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadLight3_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadLight3_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadLight3_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadLight3_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadLight3_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadLight3_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadLight3_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadLight3_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadLight3_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadLight3_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadLight3_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadLight3_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadLight3_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadLight3_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadLight3_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadLight3_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadLight3_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadLight3_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadLight3_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadLight3_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadLight3_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadLight3_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadLight3_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadLight3_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadLight3_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadLight3_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadLight3_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadLight3_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadLight3_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadLight3_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IGcadLight3_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IGcadLight3_get_LightType(This,pVal)	\
    ( (This)->lpVtbl -> get_LightType(This,pVal) ) 

#define IGcadLight3_put_LightType(This,pVal)	\
    ( (This)->lpVtbl -> put_LightType(This,pVal) ) 

#define IGcadLight3_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IGcadLight3_put_Status(This,pVal)	\
    ( (This)->lpVtbl -> put_Status(This,pVal) ) 

#define IGcadLight3_get_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> get_Shadows(This,pVal) ) 

#define IGcadLight3_put_Shadows(This,pVal)	\
    ( (This)->lpVtbl -> put_Shadows(This,pVal) ) 

#define IGcadLight3_get_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> get_HotSpot(This,pVal) ) 

#define IGcadLight3_put_HotSpot(This,pVal)	\
    ( (This)->lpVtbl -> put_HotSpot(This,pVal) ) 

#define IGcadLight3_get_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> get_FallOff(This,pVal) ) 

#define IGcadLight3_put_FallOff(This,pVal)	\
    ( (This)->lpVtbl -> put_FallOff(This,pVal) ) 

#define IGcadLight3_get_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> get_Intensity(This,pVal) ) 

#define IGcadLight3_put_Intensity(This,pVal)	\
    ( (This)->lpVtbl -> put_Intensity(This,pVal) ) 

#define IGcadLight3_get_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_LColor(This,ppColor) ) 

#define IGcadLight3_put_LColor(This,ppColor)	\
    ( (This)->lpVtbl -> put_LColor(This,ppColor) ) 

#define IGcadLight3_get_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> get_PlotGlyph(This,pVal) ) 

#define IGcadLight3_put_PlotGlyph(This,pVal)	\
    ( (This)->lpVtbl -> put_PlotGlyph(This,pVal) ) 

#define IGcadLight3_get_Position(This,pVal)	\
    ( (This)->lpVtbl -> get_Position(This,pVal) ) 

#define IGcadLight3_put_Position(This,pVal)	\
    ( (This)->lpVtbl -> put_Position(This,pVal) ) 

#define IGcadLight3_get_Target(This,pVal)	\
    ( (This)->lpVtbl -> get_Target(This,pVal) ) 

#define IGcadLight3_put_Target(This,pVal)	\
    ( (This)->lpVtbl -> put_Target(This,pVal) ) 

#define IGcadLight3_get_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> get_AttenuationType(This,pVal) ) 

#define IGcadLight3_put_AttenuationType(This,pVal)	\
    ( (This)->lpVtbl -> put_AttenuationType(This,pVal) ) 

#define IGcadLight3_get_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> get_UseLimits(This,pVal) ) 

#define IGcadLight3_put_UseLimits(This,pVal)	\
    ( (This)->lpVtbl -> put_UseLimits(This,pVal) ) 

#define IGcadLight3_get_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_StartLimit(This,pVal) ) 

#define IGcadLight3_put_StartLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_StartLimit(This,pVal) ) 

#define IGcadLight3_get_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> get_EndLimit(This,pVal) ) 

#define IGcadLight3_put_EndLimit(This,pVal)	\
    ( (This)->lpVtbl -> put_EndLimit(This,pVal) ) 

#define IGcadLight3_get_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowType(This,pVal) ) 

#define IGcadLight3_put_ShadowType(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowType(This,pVal) ) 

#define IGcadLight3_get_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> get_MapSize(This,pVal) ) 

#define IGcadLight3_put_MapSize(This,pVal)	\
    ( (This)->lpVtbl -> put_MapSize(This,pVal) ) 

#define IGcadLight3_get_Softness(This,pVal)	\
    ( (This)->lpVtbl -> get_Softness(This,pVal) ) 

#define IGcadLight3_put_Softness(This,pVal)	\
    ( (This)->lpVtbl -> put_Softness(This,pVal) ) 

#define IGcadLight3_get_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> get_FromVector(This,pVal) ) 

#define IGcadLight3_put_FromVector(This,pVal)	\
    ( (This)->lpVtbl -> put_FromVector(This,pVal) ) 

#define IGcadLight3_get_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> get_ToVector(This,pVal) ) 

#define IGcadLight3_put_ToVector(This,pVal)	\
    ( (This)->lpVtbl -> put_ToVector(This,pVal) ) 

#define IGcadLight3_get_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorX(This,pVal) ) 

#define IGcadLight3_put_SourceVectorX(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorX(This,pVal) ) 

#define IGcadLight3_get_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorY(This,pVal) ) 

#define IGcadLight3_put_SourceVectorY(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorY(This,pVal) ) 

#define IGcadLight3_get_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> get_SourceVectorZ(This,pVal) ) 

#define IGcadLight3_put_SourceVectorZ(This,pVal)	\
    ( (This)->lpVtbl -> put_SourceVectorZ(This,pVal) ) 


#define IGcadLight3_get_LampIntensity(This,pVal)	\
    ( (This)->lpVtbl -> get_LampIntensity(This,pVal) ) 

#define IGcadLight3_put_LampIntensity(This,pVal)	\
    ( (This)->lpVtbl -> put_LampIntensity(This,pVal) ) 

#define IGcadLight3_get_ResultIntensity(This,pVal)	\
    ( (This)->lpVtbl -> get_ResultIntensity(This,pVal) ) 

#define IGcadLight3_put_ResultIntensity(This,pVal)	\
    ( (This)->lpVtbl -> put_ResultIntensity(This,pVal) ) 

#define IGcadLight3_get_LampColor(This,pVal)	\
    ( (This)->lpVtbl -> get_LampColor(This,pVal) ) 

#define IGcadLight3_put_LampColor(This,pVal)	\
    ( (This)->lpVtbl -> put_LampColor(This,pVal) ) 

#define IGcadLight3_get_ResultColor(This,ppColor)	\
    ( (This)->lpVtbl -> get_ResultColor(This,ppColor) ) 

#define IGcadLight3_put_ResultColor(This,ppColor)	\
    ( (This)->lpVtbl -> put_ResultColor(This,ppColor) ) 

#define IGcadLight3_get_WebFile(This,pVal)	\
    ( (This)->lpVtbl -> get_WebFile(This,pVal) ) 

#define IGcadLight3_put_WebFile(This,pVal)	\
    ( (This)->lpVtbl -> put_WebFile(This,pVal) ) 

#define IGcadLight3_get_WebPreview(This,pVal)	\
    ( (This)->lpVtbl -> get_WebPreview(This,pVal) ) 

#define IGcadLight3_put_WebPreview(This,pVal)	\
    ( (This)->lpVtbl -> put_WebPreview(This,pVal) ) 

#define IGcadLight3_get_WebRotateX(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateX(This,pVal) ) 

#define IGcadLight3_put_WebRotateX(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateX(This,pVal) ) 

#define IGcadLight3_get_WebRotateY(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateY(This,pVal) ) 

#define IGcadLight3_put_WebRotateY(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateY(This,pVal) ) 

#define IGcadLight3_get_WebRotateZ(This,pVal)	\
    ( (This)->lpVtbl -> get_WebRotateZ(This,pVal) ) 

#define IGcadLight3_put_WebRotateZ(This,pVal)	\
    ( (This)->lpVtbl -> put_WebRotateZ(This,pVal) ) 

#define IGcadLight3_get_HasTarget(This,pVal)	\
    ( (This)->lpVtbl -> get_HasTarget(This,pVal) ) 

#define IGcadLight3_put_HasTarget(This,pVal)	\
    ( (This)->lpVtbl -> put_HasTarget(This,pVal) ) 

#define IGcadLight3_get_ShadowSamples(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowSamples(This,pVal) ) 

#define IGcadLight3_put_ShadowSamples(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowSamples(This,pVal) ) 

#define IGcadLight3_get_ShadowVisible(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowVisible(This,pVal) ) 

#define IGcadLight3_put_ShadowVisible(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowVisible(This,pVal) ) 

#define IGcadLight3_get_ShadowShape(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowShape(This,pVal) ) 

#define IGcadLight3_put_ShadowShape(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowShape(This,pVal) ) 

#define IGcadLight3_get_ShadowRadius(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowRadius(This,pVal) ) 

#define IGcadLight3_put_ShadowRadius(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowRadius(This,pVal) ) 

#define IGcadLight3_get_IlluminanceDistance(This,pVal)	\
    ( (This)->lpVtbl -> get_IlluminanceDistance(This,pVal) ) 

#define IGcadLight3_put_IlluminanceDistance(This,pVal)	\
    ( (This)->lpVtbl -> put_IlluminanceDistance(This,pVal) ) 

#define IGcadLight3_get_ShadowLength(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowLength(This,pVal) ) 

#define IGcadLight3_put_ShadowLength(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowLength(This,pVal) ) 

#define IGcadLight3_get_ShadowWidth(This,pVal)	\
    ( (This)->lpVtbl -> get_ShadowWidth(This,pVal) ) 

#define IGcadLight3_put_ShadowWidth(This,pVal)	\
    ( (This)->lpVtbl -> put_ShadowWidth(This,pVal) ) 


#define IGcadLight3_get_GlyphDisplay(This,pVal)	\
    ( (This)->lpVtbl -> get_GlyphDisplay(This,pVal) ) 

#define IGcadLight3_put_GlyphDisplay(This,pVal)	\
    ( (This)->lpVtbl -> put_GlyphDisplay(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT STDMETHODCALLTYPE IGcadLight3_get_GlyphDisplay_Proxy( 
    IGcadLight3 * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB IGcadLight3_get_GlyphDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IGcadLight3_put_GlyphDisplay_Proxy( 
    IGcadLight3 * This,
    /* [in] */ BSTR pVal);


void __RPC_STUB IGcadLight3_put_GlyphDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGcadLight3_INTERFACE_DEFINED__ */


#ifndef __IGcadArcAlignedText_INTERFACE_DEFINED__
#define __IGcadArcAlignedText_INTERFACE_DEFINED__

/* interface IGcadArcAlignedText */
/* [object][oleautomation][nonextensible][dual][uuid] */ 


EXTERN_C const IID IID_IGcadArcAlignedText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7F307FF3-C097-45F2-A6E1-8D7484DDEEBB")
    IGcadArcAlignedText : public IGcadEntity
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Contents( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Contents( 
            /* [in] */ BSTR pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Center( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Center( 
            /* [in] */ VARIANT pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Normal( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Radius( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Radius( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartAngle( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartAngle( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndAngle( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndAngle( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArcOffset( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArcOffset( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftOffset( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftOffset( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightOffset( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightOffset( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidthFactor( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidthFactor( 
            /* [in] */ double pVal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharSpacing( 
            /* [retval][out] */ double *pVal) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct IGcadArcAlignedTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGcadArcAlignedText * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGcadArcAlignedText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGcadArcAlignedText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGcadArcAlignedText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGcadArcAlignedText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGcadArcAlignedText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGcadArcAlignedText * This,
            /* [annotation][in] */ 
            _In_  DISPID dispIdMember,
            /* [annotation][in] */ 
            _In_  REFIID riid,
            /* [annotation][in] */ 
            _In_  LCID lcid,
            /* [annotation][in] */ 
            _In_  WORD wFlags,
            /* [annotation][out][in] */ 
            _In_  DISPPARAMS *pDispParams,
            /* [annotation][out] */ 
            _Out_opt_  VARIANT *pVarResult,
            /* [annotation][out] */ 
            _Out_opt_  EXCEPINFO *pExcepInfo,
            /* [annotation][out] */ 
            _Out_opt_  UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *Handle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *ObjectName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR AppName,
            /* [out] */ VARIANT *XDataType,
            /* [out] */ VARIANT *XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT XDataType,
            /* [in] */ VARIANT XDataValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IGcadArcAlignedText * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ LONG_PTR *ObjectID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IDispatch **ApplicationObject);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IGcadDatabase **pDatabase);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ VARIANT_BOOL *bHasDictionary);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IGcadDictionary **pExtDictionary);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ LONG_PTR *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IDispatch **pDocument);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IGcadArcAlignedText * This);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectID32 )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ long *ObjectID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerID32 )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ long *OwnerID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IGcadAcCmColor **pColor);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IGcadArcAlignedText * This,
            /* [in] */ IGcadAcCmColor *pColor);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *Layer);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR Layer);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *Linetype);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR Linetype);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ GCAD_NOUNITS *ltScale);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IGcadArcAlignedText * This,
            /* [in] */ GCAD_NOUNITS ltScale);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ VARIANT_BOOL *bVisible);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT_BOOL bVisible);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IGcadArcAlignedText * This,
            /* [in] */ int NumberOfObjects,
            /* [in] */ double AngleToFill,
            /* [in] */ VARIANT CenterPoint,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IGcadArcAlignedText * This,
            /* [in] */ int NumberOfRows,
            /* [in] */ int NumberOfColumns,
            /* [in] */ int NumberOfLevels,
            /* [in] */ double DistBetweenRows,
            /* [in] */ double DistBetweenCols,
            /* [in] */ double DistBetweenLevels,
            /* [retval][out] */ VARIANT *pArrayObjs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT_BOOL HighlightFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IDispatch **pCopyObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT FromPoint,
            /* [in] */ VARIANT ToPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ double RotationAngle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT Point1,
            /* [in] */ VARIANT Point2,
            /* [in] */ VARIANT point3,
            /* [retval][out] */ IDispatch **pMirrorObj);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT BasePoint,
            /* [in] */ double ScaleFactor);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT TransformationMatrix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IGcadArcAlignedText * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IGcadArcAlignedText * This,
            /* [out] */ VARIANT *MinPoint,
            /* [out] */ VARIANT *MaxPoint);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IGcadArcAlignedText * This,
            /* [in] */ IDispatch *IntersectObject,
            /* [in] */ GcExtendOption option,
            /* [retval][out] */ VARIANT *intPoints);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *plotStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR plotStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ GCAD_LWEIGHT *Lineweight);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IGcadArcAlignedText * This,
            /* [in] */ GCAD_LWEIGHT Lineweight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *transparency);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR transparency);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ IGcadHyperlinks **Hyperlinks);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *Material);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR Material);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *EntityName);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ GcEntityName *entType);
        
        /* [helpstring][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_color )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ GCAD_COLOR *color);
        
        /* [helpstring][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_color )( 
            IGcadArcAlignedText * This,
            /* [in] */ GCAD_COLOR color);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contents )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contents )( 
            IGcadArcAlignedText * This,
            /* [in] */ BSTR pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            IGcadArcAlignedText * This,
            /* [in] */ VARIANT pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Normal )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Radius )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Radius )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartAngle )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartAngle )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndAngle )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndAngle )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArcOffset )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArcOffset )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftOffset )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftOffset )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightOffset )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightOffset )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidthFactor )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidthFactor )( 
            IGcadArcAlignedText * This,
            /* [in] */ double pVal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharSpacing )( 
            IGcadArcAlignedText * This,
            /* [retval][out] */ double *pVal);
        
        END_INTERFACE
    } IGcadArcAlignedTextVtbl;

    interface IGcadArcAlignedText
    {
        CONST_VTBL struct IGcadArcAlignedTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGcadArcAlignedText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGcadArcAlignedText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGcadArcAlignedText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGcadArcAlignedText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGcadArcAlignedText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGcadArcAlignedText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGcadArcAlignedText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGcadArcAlignedText_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IGcadArcAlignedText_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IGcadArcAlignedText_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IGcadArcAlignedText_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IGcadArcAlignedText_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IGcadArcAlignedText_get_ObjectID(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectID) ) 

#define IGcadArcAlignedText_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IGcadArcAlignedText_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IGcadArcAlignedText_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IGcadArcAlignedText_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IGcadArcAlignedText_get_OwnerID(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerID) ) 

#define IGcadArcAlignedText_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IGcadArcAlignedText_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 

#define IGcadArcAlignedText_get_ObjectID32(This,ObjectID)	\
    ( (This)->lpVtbl -> get_ObjectID32(This,ObjectID) ) 

#define IGcadArcAlignedText_get_OwnerID32(This,OwnerID)	\
    ( (This)->lpVtbl -> get_OwnerID32(This,OwnerID) ) 


#define IGcadArcAlignedText_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IGcadArcAlignedText_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IGcadArcAlignedText_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IGcadArcAlignedText_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IGcadArcAlignedText_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IGcadArcAlignedText_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IGcadArcAlignedText_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IGcadArcAlignedText_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IGcadArcAlignedText_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IGcadArcAlignedText_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IGcadArcAlignedText_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IGcadArcAlignedText_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IGcadArcAlignedText_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IGcadArcAlignedText_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IGcadArcAlignedText_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IGcadArcAlignedText_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IGcadArcAlignedText_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IGcadArcAlignedText_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IGcadArcAlignedText_Mirror3D(This,Point1,Point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,Point1,Point2,point3,pMirrorObj) ) 

#define IGcadArcAlignedText_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IGcadArcAlignedText_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IGcadArcAlignedText_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IGcadArcAlignedText_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IGcadArcAlignedText_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IGcadArcAlignedText_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IGcadArcAlignedText_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IGcadArcAlignedText_get_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,Lineweight) ) 

#define IGcadArcAlignedText_put_Lineweight(This,Lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,Lineweight) ) 

#define IGcadArcAlignedText_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IGcadArcAlignedText_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IGcadArcAlignedText_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define IGcadArcAlignedText_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IGcadArcAlignedText_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IGcadArcAlignedText_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IGcadArcAlignedText_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IGcadArcAlignedText_get_color(This,color)	\
    ( (This)->lpVtbl -> get_color(This,color) ) 

#define IGcadArcAlignedText_put_color(This,color)	\
    ( (This)->lpVtbl -> put_color(This,color) ) 


#define IGcadArcAlignedText_get_Contents(This,pVal)	\
    ( (This)->lpVtbl -> get_Contents(This,pVal) ) 

#define IGcadArcAlignedText_put_Contents(This,pVal)	\
    ( (This)->lpVtbl -> put_Contents(This,pVal) ) 

#define IGcadArcAlignedText_get_Center(This,pVal)	\
    ( (This)->lpVtbl -> get_Center(This,pVal) ) 

#define IGcadArcAlignedText_put_Center(This,pVal)	\
    ( (This)->lpVtbl -> put_Center(This,pVal) ) 

#define IGcadArcAlignedText_get_Normal(This,pVal)	\
    ( (This)->lpVtbl -> get_Normal(This,pVal) ) 

#define IGcadArcAlignedText_get_Radius(This,pVal)	\
    ( (This)->lpVtbl -> get_Radius(This,pVal) ) 

#define IGcadArcAlignedText_put_Radius(This,pVal)	\
    ( (This)->lpVtbl -> put_Radius(This,pVal) ) 

#define IGcadArcAlignedText_get_StartAngle(This,pVal)	\
    ( (This)->lpVtbl -> get_StartAngle(This,pVal) ) 

#define IGcadArcAlignedText_put_StartAngle(This,pVal)	\
    ( (This)->lpVtbl -> put_StartAngle(This,pVal) ) 

#define IGcadArcAlignedText_get_EndAngle(This,pVal)	\
    ( (This)->lpVtbl -> get_EndAngle(This,pVal) ) 

#define IGcadArcAlignedText_put_EndAngle(This,pVal)	\
    ( (This)->lpVtbl -> put_EndAngle(This,pVal) ) 

#define IGcadArcAlignedText_get_ArcOffset(This,pVal)	\
    ( (This)->lpVtbl -> get_ArcOffset(This,pVal) ) 

#define IGcadArcAlignedText_put_ArcOffset(This,pVal)	\
    ( (This)->lpVtbl -> put_ArcOffset(This,pVal) ) 

#define IGcadArcAlignedText_get_LeftOffset(This,pVal)	\
    ( (This)->lpVtbl -> get_LeftOffset(This,pVal) ) 

#define IGcadArcAlignedText_put_LeftOffset(This,pVal)	\
    ( (This)->lpVtbl -> put_LeftOffset(This,pVal) ) 

#define IGcadArcAlignedText_get_RightOffset(This,pVal)	\
    ( (This)->lpVtbl -> get_RightOffset(This,pVal) ) 

#define IGcadArcAlignedText_put_RightOffset(This,pVal)	\
    ( (This)->lpVtbl -> put_RightOffset(This,pVal) ) 

#define IGcadArcAlignedText_get_Height(This,pVal)	\
    ( (This)->lpVtbl -> get_Height(This,pVal) ) 

#define IGcadArcAlignedText_put_Height(This,pVal)	\
    ( (This)->lpVtbl -> put_Height(This,pVal) ) 

#define IGcadArcAlignedText_get_WidthFactor(This,pVal)	\
    ( (This)->lpVtbl -> get_WidthFactor(This,pVal) ) 

#define IGcadArcAlignedText_put_WidthFactor(This,pVal)	\
    ( (This)->lpVtbl -> put_WidthFactor(This,pVal) ) 

#define IGcadArcAlignedText_get_CharSpacing(This,pVal)	\
    ( (This)->lpVtbl -> get_CharSpacing(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGcadArcAlignedText_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


